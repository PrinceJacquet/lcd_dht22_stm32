
DHT22_LCD_STM32_27.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cddc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800cf20  0800cf20  0001cf20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7fc  0800d7fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7fc  0800d7fc  0001d7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d804  0800d804  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d804  0800d804  0001d804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d808  0800d808  0001d808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001e0  0800d9ec  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800d9ec  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016241  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a7  00000000  00000000  0003644a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000396f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  0003a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197d8  00000000  00000000  0003b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b03  00000000  00000000  00054f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096659  00000000  00000000  00069a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010008c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  001000e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cf04 	.word	0x0800cf04

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800cf04 	.word	0x0800cf04

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_f2iz>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800105c:	d30f      	bcc.n	800107e <__aeabi_f2iz+0x2a>
 800105e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001066:	d90d      	bls.n	8001084 <__aeabi_f2iz+0x30>
 8001068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800106c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001070:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001074:	fa23 f002 	lsr.w	r0, r3, r2
 8001078:	bf18      	it	ne
 800107a:	4240      	negne	r0, r0
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2iz+0x3a>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d105      	bne.n	800109a <__aeabi_f2iz+0x46>
 800108e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001092:	bf08      	it	eq
 8001094:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b9a6 	b.w	8001404 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f83e 	bl	8001140 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__aeabi_d2lz>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	460c      	mov	r4, r1
 80010d4:	4605      	mov	r5, r0
 80010d6:	4621      	mov	r1, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	2200      	movs	r2, #0
 80010dc:	2300      	movs	r3, #0
 80010de:	f7ff fc85 	bl	80009ec <__aeabi_dcmplt>
 80010e2:	b928      	cbnz	r0, 80010f0 <__aeabi_d2lz+0x20>
 80010e4:	4628      	mov	r0, r5
 80010e6:	4621      	mov	r1, r4
 80010e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ec:	f000 b80a 	b.w	8001104 <__aeabi_d2ulz>
 80010f0:	4628      	mov	r0, r5
 80010f2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010f6:	f000 f805 	bl	8001104 <__aeabi_d2ulz>
 80010fa:	4240      	negs	r0, r0
 80010fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001100:	bd38      	pop	{r3, r4, r5, pc}
 8001102:	bf00      	nop

08001104 <__aeabi_d2ulz>:
 8001104:	b5d0      	push	{r4, r6, r7, lr}
 8001106:	2200      	movs	r2, #0
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__aeabi_d2ulz+0x34>)
 800110a:	4606      	mov	r6, r0
 800110c:	460f      	mov	r7, r1
 800110e:	f7ff f9fb 	bl	8000508 <__aeabi_dmul>
 8001112:	f7ff fcd1 	bl	8000ab8 <__aeabi_d2uiz>
 8001116:	4604      	mov	r4, r0
 8001118:	f7ff f97c 	bl	8000414 <__aeabi_ui2d>
 800111c:	2200      	movs	r2, #0
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <__aeabi_d2ulz+0x38>)
 8001120:	f7ff f9f2 	bl	8000508 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4630      	mov	r0, r6
 800112a:	4639      	mov	r1, r7
 800112c:	f7ff f834 	bl	8000198 <__aeabi_dsub>
 8001130:	f7ff fcc2 	bl	8000ab8 <__aeabi_d2uiz>
 8001134:	4621      	mov	r1, r4
 8001136:	bdd0      	pop	{r4, r6, r7, pc}
 8001138:	3df00000 	.word	0x3df00000
 800113c:	41f00000 	.word	0x41f00000

08001140 <__udivmoddi4>:
 8001140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001144:	9e08      	ldr	r6, [sp, #32]
 8001146:	460d      	mov	r5, r1
 8001148:	4604      	mov	r4, r0
 800114a:	468e      	mov	lr, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 8083 	bne.w	8001258 <__udivmoddi4+0x118>
 8001152:	428a      	cmp	r2, r1
 8001154:	4617      	mov	r7, r2
 8001156:	d947      	bls.n	80011e8 <__udivmoddi4+0xa8>
 8001158:	fab2 f382 	clz	r3, r2
 800115c:	b14b      	cbz	r3, 8001172 <__udivmoddi4+0x32>
 800115e:	f1c3 0120 	rsb	r1, r3, #32
 8001162:	fa05 fe03 	lsl.w	lr, r5, r3
 8001166:	fa20 f101 	lsr.w	r1, r0, r1
 800116a:	409f      	lsls	r7, r3
 800116c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001170:	409c      	lsls	r4, r3
 8001172:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001176:	fbbe fcf8 	udiv	ip, lr, r8
 800117a:	fa1f f987 	uxth.w	r9, r7
 800117e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001182:	fb0c f009 	mul.w	r0, ip, r9
 8001186:	0c21      	lsrs	r1, r4, #16
 8001188:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800118c:	4290      	cmp	r0, r2
 800118e:	d90a      	bls.n	80011a6 <__udivmoddi4+0x66>
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001196:	f080 8118 	bcs.w	80013ca <__udivmoddi4+0x28a>
 800119a:	4290      	cmp	r0, r2
 800119c:	f240 8115 	bls.w	80013ca <__udivmoddi4+0x28a>
 80011a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011a4:	443a      	add	r2, r7
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011ac:	fb08 2210 	mls	r2, r8, r0, r2
 80011b0:	fb00 f109 	mul.w	r1, r0, r9
 80011b4:	b2a4      	uxth	r4, r4
 80011b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ba:	42a1      	cmp	r1, r4
 80011bc:	d909      	bls.n	80011d2 <__udivmoddi4+0x92>
 80011be:	193c      	adds	r4, r7, r4
 80011c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80011c4:	f080 8103 	bcs.w	80013ce <__udivmoddi4+0x28e>
 80011c8:	42a1      	cmp	r1, r4
 80011ca:	f240 8100 	bls.w	80013ce <__udivmoddi4+0x28e>
 80011ce:	3802      	subs	r0, #2
 80011d0:	443c      	add	r4, r7
 80011d2:	1a64      	subs	r4, r4, r1
 80011d4:	2100      	movs	r1, #0
 80011d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011da:	b11e      	cbz	r6, 80011e4 <__udivmoddi4+0xa4>
 80011dc:	2200      	movs	r2, #0
 80011de:	40dc      	lsrs	r4, r3
 80011e0:	e9c6 4200 	strd	r4, r2, [r6]
 80011e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e8:	b902      	cbnz	r2, 80011ec <__udivmoddi4+0xac>
 80011ea:	deff      	udf	#255	; 0xff
 80011ec:	fab2 f382 	clz	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d14f      	bne.n	8001294 <__udivmoddi4+0x154>
 80011f4:	1a8d      	subs	r5, r1, r2
 80011f6:	2101      	movs	r1, #1
 80011f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80011fc:	fa1f f882 	uxth.w	r8, r2
 8001200:	fbb5 fcfe 	udiv	ip, r5, lr
 8001204:	fb0e 551c 	mls	r5, lr, ip, r5
 8001208:	fb08 f00c 	mul.w	r0, r8, ip
 800120c:	0c22      	lsrs	r2, r4, #16
 800120e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001212:	42a8      	cmp	r0, r5
 8001214:	d907      	bls.n	8001226 <__udivmoddi4+0xe6>
 8001216:	197d      	adds	r5, r7, r5
 8001218:	f10c 32ff 	add.w	r2, ip, #4294967295
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0xe4>
 800121e:	42a8      	cmp	r0, r5
 8001220:	f200 80e9 	bhi.w	80013f6 <__udivmoddi4+0x2b6>
 8001224:	4694      	mov	ip, r2
 8001226:	1a2d      	subs	r5, r5, r0
 8001228:	fbb5 f0fe 	udiv	r0, r5, lr
 800122c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001230:	fb08 f800 	mul.w	r8, r8, r0
 8001234:	b2a4      	uxth	r4, r4
 8001236:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800123a:	45a0      	cmp	r8, r4
 800123c:	d907      	bls.n	800124e <__udivmoddi4+0x10e>
 800123e:	193c      	adds	r4, r7, r4
 8001240:	f100 32ff 	add.w	r2, r0, #4294967295
 8001244:	d202      	bcs.n	800124c <__udivmoddi4+0x10c>
 8001246:	45a0      	cmp	r8, r4
 8001248:	f200 80d9 	bhi.w	80013fe <__udivmoddi4+0x2be>
 800124c:	4610      	mov	r0, r2
 800124e:	eba4 0408 	sub.w	r4, r4, r8
 8001252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001256:	e7c0      	b.n	80011da <__udivmoddi4+0x9a>
 8001258:	428b      	cmp	r3, r1
 800125a:	d908      	bls.n	800126e <__udivmoddi4+0x12e>
 800125c:	2e00      	cmp	r6, #0
 800125e:	f000 80b1 	beq.w	80013c4 <__udivmoddi4+0x284>
 8001262:	2100      	movs	r1, #0
 8001264:	e9c6 0500 	strd	r0, r5, [r6]
 8001268:	4608      	mov	r0, r1
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	fab3 f183 	clz	r1, r3
 8001272:	2900      	cmp	r1, #0
 8001274:	d14b      	bne.n	800130e <__udivmoddi4+0x1ce>
 8001276:	42ab      	cmp	r3, r5
 8001278:	d302      	bcc.n	8001280 <__udivmoddi4+0x140>
 800127a:	4282      	cmp	r2, r0
 800127c:	f200 80b9 	bhi.w	80013f2 <__udivmoddi4+0x2b2>
 8001280:	1a84      	subs	r4, r0, r2
 8001282:	eb65 0303 	sbc.w	r3, r5, r3
 8001286:	2001      	movs	r0, #1
 8001288:	469e      	mov	lr, r3
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0aa      	beq.n	80011e4 <__udivmoddi4+0xa4>
 800128e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001292:	e7a7      	b.n	80011e4 <__udivmoddi4+0xa4>
 8001294:	409f      	lsls	r7, r3
 8001296:	f1c3 0220 	rsb	r2, r3, #32
 800129a:	40d1      	lsrs	r1, r2
 800129c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012a4:	fa1f f887 	uxth.w	r8, r7
 80012a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012ac:	fa24 f202 	lsr.w	r2, r4, r2
 80012b0:	409d      	lsls	r5, r3
 80012b2:	fb00 fc08 	mul.w	ip, r0, r8
 80012b6:	432a      	orrs	r2, r5
 80012b8:	0c15      	lsrs	r5, r2, #16
 80012ba:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012be:	45ac      	cmp	ip, r5
 80012c0:	fa04 f403 	lsl.w	r4, r4, r3
 80012c4:	d909      	bls.n	80012da <__udivmoddi4+0x19a>
 80012c6:	197d      	adds	r5, r7, r5
 80012c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80012cc:	f080 808f 	bcs.w	80013ee <__udivmoddi4+0x2ae>
 80012d0:	45ac      	cmp	ip, r5
 80012d2:	f240 808c 	bls.w	80013ee <__udivmoddi4+0x2ae>
 80012d6:	3802      	subs	r0, #2
 80012d8:	443d      	add	r5, r7
 80012da:	eba5 050c 	sub.w	r5, r5, ip
 80012de:	fbb5 f1fe 	udiv	r1, r5, lr
 80012e2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80012e6:	fb01 f908 	mul.w	r9, r1, r8
 80012ea:	b295      	uxth	r5, r2
 80012ec:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80012f0:	45a9      	cmp	r9, r5
 80012f2:	d907      	bls.n	8001304 <__udivmoddi4+0x1c4>
 80012f4:	197d      	adds	r5, r7, r5
 80012f6:	f101 32ff 	add.w	r2, r1, #4294967295
 80012fa:	d274      	bcs.n	80013e6 <__udivmoddi4+0x2a6>
 80012fc:	45a9      	cmp	r9, r5
 80012fe:	d972      	bls.n	80013e6 <__udivmoddi4+0x2a6>
 8001300:	3902      	subs	r1, #2
 8001302:	443d      	add	r5, r7
 8001304:	eba5 0509 	sub.w	r5, r5, r9
 8001308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800130c:	e778      	b.n	8001200 <__udivmoddi4+0xc0>
 800130e:	f1c1 0720 	rsb	r7, r1, #32
 8001312:	408b      	lsls	r3, r1
 8001314:	fa22 fc07 	lsr.w	ip, r2, r7
 8001318:	ea4c 0c03 	orr.w	ip, ip, r3
 800131c:	fa25 f407 	lsr.w	r4, r5, r7
 8001320:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001324:	fbb4 f9fe 	udiv	r9, r4, lr
 8001328:	fa1f f88c 	uxth.w	r8, ip
 800132c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001330:	fa20 f307 	lsr.w	r3, r0, r7
 8001334:	fb09 fa08 	mul.w	sl, r9, r8
 8001338:	408d      	lsls	r5, r1
 800133a:	431d      	orrs	r5, r3
 800133c:	0c2b      	lsrs	r3, r5, #16
 800133e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001342:	45a2      	cmp	sl, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	fa00 f301 	lsl.w	r3, r0, r1
 800134c:	d909      	bls.n	8001362 <__udivmoddi4+0x222>
 800134e:	eb1c 0404 	adds.w	r4, ip, r4
 8001352:	f109 30ff 	add.w	r0, r9, #4294967295
 8001356:	d248      	bcs.n	80013ea <__udivmoddi4+0x2aa>
 8001358:	45a2      	cmp	sl, r4
 800135a:	d946      	bls.n	80013ea <__udivmoddi4+0x2aa>
 800135c:	f1a9 0902 	sub.w	r9, r9, #2
 8001360:	4464      	add	r4, ip
 8001362:	eba4 040a 	sub.w	r4, r4, sl
 8001366:	fbb4 f0fe 	udiv	r0, r4, lr
 800136a:	fb0e 4410 	mls	r4, lr, r0, r4
 800136e:	fb00 fa08 	mul.w	sl, r0, r8
 8001372:	b2ad      	uxth	r5, r5
 8001374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001378:	45a2      	cmp	sl, r4
 800137a:	d908      	bls.n	800138e <__udivmoddi4+0x24e>
 800137c:	eb1c 0404 	adds.w	r4, ip, r4
 8001380:	f100 35ff 	add.w	r5, r0, #4294967295
 8001384:	d22d      	bcs.n	80013e2 <__udivmoddi4+0x2a2>
 8001386:	45a2      	cmp	sl, r4
 8001388:	d92b      	bls.n	80013e2 <__udivmoddi4+0x2a2>
 800138a:	3802      	subs	r0, #2
 800138c:	4464      	add	r4, ip
 800138e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001392:	fba0 8902 	umull	r8, r9, r0, r2
 8001396:	eba4 040a 	sub.w	r4, r4, sl
 800139a:	454c      	cmp	r4, r9
 800139c:	46c6      	mov	lr, r8
 800139e:	464d      	mov	r5, r9
 80013a0:	d319      	bcc.n	80013d6 <__udivmoddi4+0x296>
 80013a2:	d016      	beq.n	80013d2 <__udivmoddi4+0x292>
 80013a4:	b15e      	cbz	r6, 80013be <__udivmoddi4+0x27e>
 80013a6:	ebb3 020e 	subs.w	r2, r3, lr
 80013aa:	eb64 0405 	sbc.w	r4, r4, r5
 80013ae:	fa04 f707 	lsl.w	r7, r4, r7
 80013b2:	fa22 f301 	lsr.w	r3, r2, r1
 80013b6:	431f      	orrs	r7, r3
 80013b8:	40cc      	lsrs	r4, r1
 80013ba:	e9c6 7400 	strd	r7, r4, [r6]
 80013be:	2100      	movs	r1, #0
 80013c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c4:	4631      	mov	r1, r6
 80013c6:	4630      	mov	r0, r6
 80013c8:	e70c      	b.n	80011e4 <__udivmoddi4+0xa4>
 80013ca:	468c      	mov	ip, r1
 80013cc:	e6eb      	b.n	80011a6 <__udivmoddi4+0x66>
 80013ce:	4610      	mov	r0, r2
 80013d0:	e6ff      	b.n	80011d2 <__udivmoddi4+0x92>
 80013d2:	4543      	cmp	r3, r8
 80013d4:	d2e6      	bcs.n	80013a4 <__udivmoddi4+0x264>
 80013d6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013da:	eb69 050c 	sbc.w	r5, r9, ip
 80013de:	3801      	subs	r0, #1
 80013e0:	e7e0      	b.n	80013a4 <__udivmoddi4+0x264>
 80013e2:	4628      	mov	r0, r5
 80013e4:	e7d3      	b.n	800138e <__udivmoddi4+0x24e>
 80013e6:	4611      	mov	r1, r2
 80013e8:	e78c      	b.n	8001304 <__udivmoddi4+0x1c4>
 80013ea:	4681      	mov	r9, r0
 80013ec:	e7b9      	b.n	8001362 <__udivmoddi4+0x222>
 80013ee:	4608      	mov	r0, r1
 80013f0:	e773      	b.n	80012da <__udivmoddi4+0x19a>
 80013f2:	4608      	mov	r0, r1
 80013f4:	e749      	b.n	800128a <__udivmoddi4+0x14a>
 80013f6:	f1ac 0c02 	sub.w	ip, ip, #2
 80013fa:	443d      	add	r5, r7
 80013fc:	e713      	b.n	8001226 <__udivmoddi4+0xe6>
 80013fe:	3802      	subs	r0, #2
 8001400:	443c      	add	r4, r7
 8001402:	e724      	b.n	800124e <__udivmoddi4+0x10e>

08001404 <__aeabi_idiv0>:
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <DHT22_Init>:

static void set_sensor_pin_mode(uint8_t in);
static void timer_init(TIM_HandleTypeDef* _htim);

void DHT22_Init(TIM_HandleTypeDef* _htim, uint32_t _timer_clock_freq, GPIO_TypeDef* _SENSOR_GPIO_Port, uint8_t _SENSOR_Pin, IRQn_Type _SENSOR_EXTI_IRQn)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	70fb      	strb	r3, [r7, #3]
	DHT22._htim 			= _htim;
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <DHT22_Init+0x6c>)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6013      	str	r3, [r2, #0]
	DHT22._tim_clock_freq 		= _timer_clock_freq;
 800141c:	4a15      	ldr	r2, [pc, #84]	; (8001474 <DHT22_Init+0x6c>)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	6053      	str	r3, [r2, #4]
	DHT22._SENSOR_GPIO_Port = _SENSOR_GPIO_Port;
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <DHT22_Init+0x6c>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6093      	str	r3, [r2, #8]
	DHT22._SENSOR_Pin 		= _SENSOR_Pin;
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <DHT22_Init+0x6c>)
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	7313      	strb	r3, [r2, #12]
	DHT22._SENSOR_EXTI_IRQn = _SENSOR_EXTI_IRQn;
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <DHT22_Init+0x6c>)
 8001430:	7e3b      	ldrb	r3, [r7, #24]
 8001432:	7353      	strb	r3, [r2, #13]

	timer_init(DHT22._htim);
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <DHT22_Init+0x6c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f901 	bl	8001640 <timer_init>

	set_sensor_pin_mode(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f8be 	bl	80015c0 <set_sensor_pin_mode>
	_SENSOR_EDGES = 0;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <DHT22_Init+0x70>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <DHT22_Init+0x6c>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <DHT22_Init+0x6c>)
 8001450:	7b12      	ldrb	r2, [r2, #12]
 8001452:	b291      	uxth	r1, r2
 8001454:	2201      	movs	r2, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fde0 	bl	800401c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800145c:	200a      	movs	r0, #10
 800145e:	f001 fe9f 	bl	80031a0 <HAL_Delay>
	HAL_TIM_Base_Start_IT(DHT22._htim);
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <DHT22_Init+0x6c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f006 f972 	bl	8007750 <HAL_TIM_Base_Start_IT>

}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000220 	.word	0x20000220
 8001478:	20000200 	.word	0x20000200

0800147c <DHT22_ReadData>:

DHT22_Data DHT22_ReadData()
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	DHT22_Data _DHT22_data;
	uint16_t RH, T;
	uint8_t check_sum;
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 0);
 8001484:	4b49      	ldr	r3, [pc, #292]	; (80015ac <DHT22_ReadData+0x130>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a48      	ldr	r2, [pc, #288]	; (80015ac <DHT22_ReadData+0x130>)
 800148a:	7b12      	ldrb	r2, [r2, #12]
 800148c:	b291      	uxth	r1, r2
 800148e:	2200      	movs	r2, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fdc3 	bl	800401c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001496:	2005      	movs	r0, #5
 8001498:	f001 fe82 	bl	80031a0 <HAL_Delay>
	set_sensor_pin_mode(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 f88f 	bl	80015c0 <set_sensor_pin_mode>

	while(_SENSOR_EDGES <1 + 3 + 2 * 40 + 2);
 80014a2:	bf00      	nop
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <DHT22_ReadData+0x134>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b55      	cmp	r3, #85	; 0x55
 80014ac:	d9fa      	bls.n	80014a4 <DHT22_ReadData+0x28>

	set_sensor_pin_mode(0);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f886 	bl	80015c0 <set_sensor_pin_mode>
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 80014b4:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <DHT22_ReadData+0x130>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <DHT22_ReadData+0x130>)
 80014ba:	7b12      	ldrb	r2, [r2, #12]
 80014bc:	b291      	uxth	r1, r2
 80014be:	2201      	movs	r2, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fdab 	bl	800401c <HAL_GPIO_WritePin>
 	_SENSOR_EDGES = 0;
 80014c6:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <DHT22_ReadData+0x134>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]

 	check_sum 	= data & 0xFF;
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <DHT22_ReadData+0x138>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	4613      	mov	r3, r2
 80014d4:	77fb      	strb	r3, [r7, #31]
 	T 			= (data >> 8) & 0xFFFF;
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <DHT22_ReadData+0x138>)
 80014d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	0a02      	lsrs	r2, r0, #8
 80014e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80014ea:	0a0b      	lsrs	r3, r1, #8
 80014ec:	4613      	mov	r3, r2
 80014ee:	83bb      	strh	r3, [r7, #28]
 	RH 			= (data >> 24) & 0xFFFF;
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <DHT22_ReadData+0x138>)
 80014f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	0e02      	lsrs	r2, r0, #24
 8001500:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001504:	0e0b      	lsrs	r3, r1, #24
 8001506:	4613      	mov	r3, r2
 8001508:	837b      	strh	r3, [r7, #26]

 	_DHT22_data.check_sum 	= check_sum;
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	733b      	strb	r3, [r7, #12]
 	_DHT22_data.T 			= (float) (T & 0x7FFF) / 10.0;
 800150e:	8bbb      	ldrh	r3, [r7, #28]
 8001510:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fbf9 	bl	8000d0c <__aeabi_i2f>
 800151a:	4603      	mov	r3, r0
 800151c:	4926      	ldr	r1, [pc, #152]	; (80015b8 <DHT22_ReadData+0x13c>)
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fcfc 	bl	8000f1c <__aeabi_fdiv>
 8001524:	4603      	mov	r3, r0
 8001526:	617b      	str	r3, [r7, #20]
 	_DHT22_data.T 		   *= (T & 0x8000) ? -1 : 1 ;
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800152e:	2b00      	cmp	r3, #0
 8001530:	da01      	bge.n	8001536 <DHT22_ReadData+0xba>
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <DHT22_ReadData+0x140>)
 8001534:	e001      	b.n	800153a <DHT22_ReadData+0xbe>
 8001536:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc39 	bl	8000db4 <__aeabi_fmul>
 8001542:	4603      	mov	r3, r0
 8001544:	617b      	str	r3, [r7, #20]
 	_DHT22_data.RH 			= (float) RH / 10.0;
 8001546:	8b7b      	ldrh	r3, [r7, #26]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fbdb 	bl	8000d04 <__aeabi_ui2f>
 800154e:	4603      	mov	r3, r0
 8001550:	4919      	ldr	r1, [pc, #100]	; (80015b8 <DHT22_ReadData+0x13c>)
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fce2 	bl	8000f1c <__aeabi_fdiv>
 8001558:	4603      	mov	r3, r0
 800155a:	613b      	str	r3, [r7, #16]

 	uint8_t sum = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	767b      	strb	r3, [r7, #25]
 	sum = (T & 0xFF) + ((T >> 8) & 0xFF) + (RH & 0xFF) + ((RH >> 8) & 0xFF);
 8001560:	8bbb      	ldrh	r3, [r7, #28]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	8bbb      	ldrh	r3, [r7, #28]
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b2da      	uxtb	r2, r3
 8001570:	8b7b      	ldrh	r3, [r7, #26]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b2da      	uxtb	r2, r3
 8001578:	8b7b      	ldrh	r3, [r7, #26]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b29b      	uxth	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	767b      	strb	r3, [r7, #25]

 	_DHT22_data.is_data_valid = (sum == check_sum) ? 1 : 0;
 8001584:	7e7a      	ldrb	r2, [r7, #25]
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	429a      	cmp	r2, r3
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	737b      	strb	r3, [r7, #13]

 	return _DHT22_data;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	461c      	mov	r4, r3
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	3724      	adds	r7, #36	; 0x24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	20000220 	.word	0x20000220
 80015b0:	20000200 	.word	0x20000200
 80015b4:	20000208 	.word	0x20000208
 80015b8:	41200000 	.word	0x41200000
 80015bc:	bf800000 	.word	0xbf800000

080015c0 <set_sensor_pin_mode>:


static void set_sensor_pin_mode(uint8_t in){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DHT22._SENSOR_Pin;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <set_sensor_pin_mode+0x78>)
 80015dc:	7b1b      	ldrb	r3, [r3, #12]
 80015de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]

	if(in) 	{
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <set_sensor_pin_mode+0x3c>
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <set_sensor_pin_mode+0x7c>)
 80015ec:	613b      	str	r3, [r7, #16]
		HAL_NVIC_EnableIRQ(DHT22._SENSOR_EXTI_IRQn);
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <set_sensor_pin_mode+0x78>)
 80015f0:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fb0a 	bl	8003c0e <HAL_NVIC_EnableIRQ>
 80015fa:	e010      	b.n	800161e <set_sensor_pin_mode+0x5e>
	}
	else 	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
		HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <set_sensor_pin_mode+0x78>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <set_sensor_pin_mode+0x78>)
 8001606:	7b12      	ldrb	r2, [r2, #12]
 8001608:	b291      	uxth	r1, r2
 800160a:	2201      	movs	r2, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fd05 	bl	800401c <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(DHT22._SENSOR_EXTI_IRQn);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <set_sensor_pin_mode+0x78>)
 8001614:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001618:	4618      	mov	r0, r3
 800161a:	f002 fb06 	bl	8003c2a <HAL_NVIC_DisableIRQ>
	}

	HAL_GPIO_Init(DHT22._SENSOR_GPIO_Port, &GPIO_InitStruct);
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <set_sensor_pin_mode+0x78>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f107 020c 	add.w	r2, r7, #12
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fb67 	bl	8003cfc <HAL_GPIO_Init>

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000220 	.word	0x20000220
 800163c:	10310000 	.word	0x10310000

08001640 <timer_init>:


static void timer_init(TIM_HandleTypeDef* _htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
  _htim->Init.Prescaler = DHT22._tim_clock_freq/1e6-1;
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <timer_init+0xa0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fedc 	bl	8000414 <__aeabi_ui2d>
 800165c:	a31e      	add	r3, pc, #120	; (adr r3, 80016d8 <timer_init+0x98>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7ff f87b 	bl	800075c <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <timer_init+0xa4>)
 8001674:	f7fe fd90 	bl	8000198 <__aeabi_dsub>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa1a 	bl	8000ab8 <__aeabi_d2uiz>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]
  _htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  _htim->Init.Period = 10-1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2209      	movs	r2, #9
 8001694:	60da      	str	r2, [r3, #12]
  _htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(_htim) != HAL_OK)
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f006 f817 	bl	80076d0 <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <timer_init+0x6c>
  {
    Error_Handler();
 80016a8:	f000 ffca 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(_htim, &sMasterConfig) != HAL_OK)
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f006 fa0a 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <timer_init+0x8a>
  {
    Error_Handler();
 80016c6:	f000 ffbb 	bl	8002640 <Error_Handler>
  }
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	00000000 	.word	0x00000000
 80016dc:	412e8480 	.word	0x412e8480
 80016e0:	20000220 	.word	0x20000220
 80016e4:	3ff00000 	.word	0x3ff00000

080016e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == DHT22._htim->Instance)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d104      	bne.n	8001708 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		_TIM_TIC++;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001706:	6013      	str	r3, [r2, #0]
	}
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000220 	.word	0x20000220
 8001718:	200001fc 	.word	0x200001fc

0800171c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800171c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	4601      	mov	r1, r0
 8001726:	80f9      	strh	r1, [r7, #6]
	if(GPIO_Pin == DHT22._SENSOR_Pin)
 8001728:	492d      	ldr	r1, [pc, #180]	; (80017e0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800172a:	7b09      	ldrb	r1, [r1, #12]
 800172c:	b289      	uxth	r1, r1
 800172e:	88f8      	ldrh	r0, [r7, #6]
 8001730:	4288      	cmp	r0, r1
 8001732:	d14f      	bne.n	80017d4 <HAL_GPIO_EXTI_Callback+0xb8>
	{
		static uint8_t sensor_0_1 = 0;
		_SENSOR_EDGES++;
 8001734:	492b      	ldr	r1, [pc, #172]	; (80017e4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001736:	7809      	ldrb	r1, [r1, #0]
 8001738:	b2c9      	uxtb	r1, r1
 800173a:	3101      	adds	r1, #1
 800173c:	b2c8      	uxtb	r0, r1
 800173e:	4929      	ldr	r1, [pc, #164]	; (80017e4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001740:	7008      	strb	r0, [r1, #0]

		if(_SENSOR_EDGES < 4 + 1);
 8001742:	4928      	ldr	r1, [pc, #160]	; (80017e4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001744:	7809      	ldrb	r1, [r1, #0]
 8001746:	b2c9      	uxtb	r1, r1
 8001748:	2904      	cmp	r1, #4
 800174a:	d943      	bls.n	80017d4 <HAL_GPIO_EXTI_Callback+0xb8>
		else if(_SENSOR_EDGES < 1 + 3 + 2 * 40 + 1)
 800174c:	4925      	ldr	r1, [pc, #148]	; (80017e4 <HAL_GPIO_EXTI_Callback+0xc8>)
 800174e:	7809      	ldrb	r1, [r1, #0]
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	2954      	cmp	r1, #84	; 0x54
 8001754:	d83e      	bhi.n	80017d4 <HAL_GPIO_EXTI_Callback+0xb8>
		{
			if(_SENSOR_EDGES == 4 + 1){
 8001756:	4923      	ldr	r1, [pc, #140]	; (80017e4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001758:	7809      	ldrb	r1, [r1, #0]
 800175a:	b2c9      	uxtb	r1, r1
 800175c:	2905      	cmp	r1, #5
 800175e:	d10a      	bne.n	8001776 <HAL_GPIO_EXTI_Callback+0x5a>
				sensor_0_1 = 0;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
				data = 0;
 8001766:	4921      	ldr	r1, [pc, #132]	; (80017ec <HAL_GPIO_EXTI_Callback+0xd0>)
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9c1 2300 	strd	r2, r3, [r1]
				data = data << 1;
			}
		}
	}

}
 8001774:	e02e      	b.n	80017d4 <HAL_GPIO_EXTI_Callback+0xb8>
			else if(_SENSOR_EDGES % 2 == 0) {
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001778:	7809      	ldrb	r1, [r1, #0]
 800177a:	b2c9      	uxtb	r1, r1
 800177c:	f001 0101 	and.w	r1, r1, #1
 8001780:	b2c9      	uxtb	r1, r1
 8001782:	2900      	cmp	r1, #0
 8001784:	d103      	bne.n	800178e <HAL_GPIO_EXTI_Callback+0x72>
				_TIM_TIC = 0;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	e022      	b.n	80017d4 <HAL_GPIO_EXTI_Callback+0xb8>
				sensor_0_1 = _TIM_TIC;
 800178e:	4918      	ldr	r1, [pc, #96]	; (80017f0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001790:	6809      	ldr	r1, [r1, #0]
 8001792:	b2c8      	uxtb	r0, r1
 8001794:	4914      	ldr	r1, [pc, #80]	; (80017e8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001796:	7008      	strb	r0, [r1, #0]
				if(sensor_0_1 > 6) data |= 1;
 8001798:	4913      	ldr	r1, [pc, #76]	; (80017e8 <HAL_GPIO_EXTI_Callback+0xcc>)
 800179a:	7809      	ldrb	r1, [r1, #0]
 800179c:	2906      	cmp	r1, #6
 800179e:	d90d      	bls.n	80017bc <HAL_GPIO_EXTI_Callback+0xa0>
 80017a0:	4912      	ldr	r1, [pc, #72]	; (80017ec <HAL_GPIO_EXTI_Callback+0xd0>)
 80017a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017a6:	f04f 0401 	mov.w	r4, #1
 80017aa:	f04f 0500 	mov.w	r5, #0
 80017ae:	ea40 0204 	orr.w	r2, r0, r4
 80017b2:	ea41 0305 	orr.w	r3, r1, r5
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <HAL_GPIO_EXTI_Callback+0xd0>)
 80017b8:	e9c1 2300 	strd	r2, r3, [r1]
				data = data << 1;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_GPIO_EXTI_Callback+0xd0>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	eb12 0802 	adds.w	r8, r2, r2
 80017c6:	eb43 0903 	adc.w	r9, r3, r3
 80017ca:	4642      	mov	r2, r8
 80017cc:	464b      	mov	r3, r9
 80017ce:	4907      	ldr	r1, [pc, #28]	; (80017ec <HAL_GPIO_EXTI_Callback+0xd0>)
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80017de:	4770      	bx	lr
 80017e0:	20000220 	.word	0x20000220
 80017e4:	20000200 	.word	0x20000200
 80017e8:	20000210 	.word	0x20000210
 80017ec:	20000208 	.word	0x20000208
 80017f0:	200001fc 	.word	0x200001fc

080017f4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <MX_ADC_Init+0xa8>)
 8001806:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <MX_ADC_Init+0xac>)
 8001808:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_ADC_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_ADC_Init+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC_Init+0xa8>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC_Init+0xa8>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <MX_ADC_Init+0xa8>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_ADC_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_ADC_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_ADC_Init+0xa8>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_ADC_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_ADC_Init+0xa8>)
 8001844:	2201      	movs	r2, #1
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_ADC_Init+0xa8>)
 800184a:	2200      	movs	r2, #0
 800184c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_ADC_Init+0xa8>)
 8001852:	2210      	movs	r2, #16
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_ADC_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_ADC_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC_Init+0xa8>)
 8001866:	f001 fcbd 	bl	80031e4 <HAL_ADC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001870:	f000 fee6 	bl	8002640 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001878:	2301      	movs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_ADC_Init+0xa8>)
 8001886:	f001 fee9 	bl	800365c <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001890:	f000 fed6 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000230 	.word	0x20000230
 80018a0:	40012400 	.word	0x40012400

080018a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_ADC_MspInit+0x74>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d123      	bne.n	800190e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_ADC_MspInit+0x78>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = HUM_SOL_Pin|WTR_LVL_Pin;
 80018f6:	2312      	movs	r3, #18
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	2303      	movs	r3, #3
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_ADC_MspInit+0x7c>)
 800190a:	f002 f9f7 	bl	8003cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40012400 	.word	0x40012400
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000

08001924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <MX_GPIO_Init+0x10c>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a3c      	ldr	r2, [pc, #240]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a36      	ldr	r2, [pc, #216]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <MX_GPIO_Init+0x10c>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_GPIO_Init+0x10c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POMPE_GPIO_Port, POMPE_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2108      	movs	r1, #8
 800199e:	4825      	ldr	r0, [pc, #148]	; (8001a34 <MX_GPIO_Init+0x110>)
 80019a0:	f002 fb3c 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2120      	movs	r1, #32
 80019a8:	4823      	ldr	r0, [pc, #140]	; (8001a38 <MX_GPIO_Init+0x114>)
 80019aa:	f002 fb37 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <MX_GPIO_Init+0x118>)
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	481c      	ldr	r0, [pc, #112]	; (8001a34 <MX_GPIO_Init+0x110>)
 80019c4:	f002 f99a 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POMPE_Pin;
 80019c8:	2308      	movs	r3, #8
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(POMPE_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4815      	ldr	r0, [pc, #84]	; (8001a34 <MX_GPIO_Init+0x110>)
 80019e0:	f002 f98c 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT22_SENS_Pin;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_GPIO_Init+0x11c>)
 80019ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_SENS_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_GPIO_Init+0x114>)
 80019f8:	f002 f980 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019fc:	2320      	movs	r3, #32
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <MX_GPIO_Init+0x114>)
 8001a14:	f002 f972 	bl	8003cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2006      	movs	r0, #6
 8001a1e:	f002 f8da 	bl	8003bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a22:	2006      	movs	r0, #6
 8001a24:	f002 f8f3 	bl	8003c0e <HAL_NVIC_EnableIRQ>

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	10110000 	.word	0x10110000
 8001a40:	10310000 	.word	0x10310000

08001a44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <MX_I2C1_Init+0x54>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <MX_I2C1_Init+0x58>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_I2C1_Init+0x50>)
 8001a82:	f002 fafb 	bl	800407c <HAL_I2C_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a8c:	f000 fdd8 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000284 	.word	0x20000284
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	000186a0 	.word	0x000186a0

08001aa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_I2C_MspInit+0x9c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d138      	bne.n	8001b34 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_I2C_MspInit+0xa0>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_I2C_MspInit+0xa0>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_I2C_MspInit+0xa0>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae0:	2312      	movs	r3, #18
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aec:	2304      	movs	r3, #4
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4813      	ldr	r0, [pc, #76]	; (8001b44 <HAL_I2C_MspInit+0xa4>)
 8001af8:	f002 f900 	bl	8003cfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_I2C_MspInit+0xa0>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_I2C_MspInit+0xa0>)
 8001b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b06:	6253      	str	r3, [r2, #36]	; 0x24
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_I2C_MspInit+0xa0>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	201f      	movs	r0, #31
 8001b1a:	f002 f85c 	bl	8003bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b1e:	201f      	movs	r0, #31
 8001b20:	f002 f875 	bl	8003c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2020      	movs	r0, #32
 8001b2a:	f002 f854 	bl	8003bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b2e:	2020      	movs	r0, #32
 8001b30:	f002 f86d 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400

08001b48 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f043 030c 	orr.w	r3, r3, #12
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001b74:	f107 0118 	add.w	r1, r7, #24
 8001b78:	230a      	movs	r3, #10
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	486c      	ldr	r0, [pc, #432]	; (8001d30 <lcd_init+0x1e8>)
 8001b7e:	f006 f854 	bl	8007c2a <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001b82:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001b86:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001b88:	f107 0114 	add.w	r1, r7, #20
 8001b8c:	230a      	movs	r3, #10
 8001b8e:	2202      	movs	r2, #2
 8001b90:	4867      	ldr	r0, [pc, #412]	; (8001d30 <lcd_init+0x1e8>)
 8001b92:	f006 f84a 	bl	8007c2a <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001b96:	2364      	movs	r3, #100	; 0x64
 8001b98:	2205      	movs	r2, #5
 8001b9a:	217c      	movs	r1, #124	; 0x7c
 8001b9c:	69f8      	ldr	r0, [r7, #28]
 8001b9e:	f002 fed5 	bl	800494c <HAL_I2C_IsDeviceReady>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001ba6:	f107 0113 	add.w	r1, r7, #19
 8001baa:	230a      	movs	r3, #10
 8001bac:	2201      	movs	r2, #1
 8001bae:	4860      	ldr	r0, [pc, #384]	; (8001d30 <lcd_init+0x1e8>)
 8001bb0:	f006 f83b 	bl	8007c2a <HAL_UART_Transmit>
	HAL_Delay(50);
 8001bb4:	2032      	movs	r0, #50	; 0x32
 8001bb6:	f001 faf3 	bl	80031a0 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001bba:	f107 0218 	add.w	r2, r7, #24
 8001bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	217c      	movs	r1, #124	; 0x7c
 8001bc8:	69f8      	ldr	r0, [r7, #28]
 8001bca:	f002 fb9b 	bl	8004304 <HAL_I2C_Master_Transmit>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001bd2:	f107 0112 	add.w	r1, r7, #18
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4855      	ldr	r0, [pc, #340]	; (8001d30 <lcd_init+0x1e8>)
 8001bdc:	f006 f825 	bl	8007c2a <HAL_UART_Transmit>
	HAL_Delay(50);
 8001be0:	2032      	movs	r0, #50	; 0x32
 8001be2:	f001 fadd 	bl	80031a0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001be6:	f107 0218 	add.w	r2, r7, #24
 8001bea:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	217c      	movs	r1, #124	; 0x7c
 8001bf4:	69f8      	ldr	r0, [r7, #28]
 8001bf6:	f002 fb85 	bl	8004304 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f001 fad0 	bl	80031a0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001c00:	f107 0218 	add.w	r2, r7, #24
 8001c04:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	217c      	movs	r1, #124	; 0x7c
 8001c0e:	69f8      	ldr	r0, [r7, #28]
 8001c10:	f002 fb78 	bl	8004304 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2204      	movs	r2, #4
 8001c18:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	785b      	ldrb	r3, [r3, #1]
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8001c26:	f107 0218 	add.w	r2, r7, #24
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2302      	movs	r3, #2
 8001c32:	217c      	movs	r1, #124	; 0x7c
 8001c34:	69f8      	ldr	r0, [r7, #28]
 8001c36:	f002 fb65 	bl	8004304 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001c3e:	f107 0218 	add.w	r2, r7, #24
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	217c      	movs	r1, #124	; 0x7c
 8001c4c:	69f8      	ldr	r0, [r7, #28]
 8001c4e:	f002 fb59 	bl	8004304 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001c52:	2002      	movs	r0, #2
 8001c54:	f001 faa4 	bl	80031a0 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	789b      	ldrb	r3, [r3, #2]
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001c6a:	f107 0218 	add.w	r2, r7, #24
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2302      	movs	r3, #2
 8001c76:	217c      	movs	r1, #124	; 0x7c
 8001c78:	69f8      	ldr	r0, [r7, #28]
 8001c7a:	f002 fb43 	bl	8004304 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001c86:	f107 0210 	add.w	r2, r7, #16
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2302      	movs	r3, #2
 8001c92:	21c4      	movs	r1, #196	; 0xc4
 8001c94:	69f8      	ldr	r0, [r7, #28]
 8001c96:	f002 fb35 	bl	8004304 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001c9e:	23ff      	movs	r3, #255	; 0xff
 8001ca0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001ca2:	f107 0210 	add.w	r2, r7, #16
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2302      	movs	r3, #2
 8001cae:	21c4      	movs	r1, #196	; 0xc4
 8001cb0:	69f8      	ldr	r0, [r7, #28]
 8001cb2:	f002 fb27 	bl	8004304 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001cbe:	f107 0210 	add.w	r2, r7, #16
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21c4      	movs	r1, #196	; 0xc4
 8001ccc:	69f8      	ldr	r0, [r7, #28]
 8001cce:	f002 fb19 	bl	8004304 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001cd6:	23ff      	movs	r3, #255	; 0xff
 8001cd8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001cda:	f107 020c 	add.w	r2, r7, #12
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	21c4      	movs	r1, #196	; 0xc4
 8001ce8:	69f8      	ldr	r0, [r7, #28]
 8001cea:	f002 fb0b 	bl	8004304 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001cf2:	23ff      	movs	r3, #255	; 0xff
 8001cf4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2302      	movs	r3, #2
 8001d02:	21c4      	movs	r1, #196	; 0xc4
 8001d04:	69f8      	ldr	r0, [r7, #28]
 8001d06:	f002 fafd 	bl	8004304 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001d0e:	23ff      	movs	r3, #255	; 0xff
 8001d10:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001d12:	f107 020c 	add.w	r2, r7, #12
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	21c4      	movs	r1, #196	; 0xc4
 8001d20:	69f8      	ldr	r0, [r7, #28]
 8001d22:	f002 faef 	bl	8004304 <HAL_I2C_Master_Transmit>


}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000035c 	.word	0x2000035c

08001d34 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001d42:	2340      	movs	r3, #64	; 0x40
 8001d44:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001d4a:	e011      	b.n	8001d70 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001d56:	f107 020c 	add.w	r2, r7, #12
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2302      	movs	r3, #2
 8001d62:	217c      	movs	r1, #124	; 0x7c
 8001d64:	6938      	ldr	r0, [r7, #16]
 8001d66:	f002 facd 	bl	8004304 <HAL_I2C_Master_Transmit>
            i++;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e7      	bne.n	8001d4c <lcd_print+0x18>
   }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af02      	add	r7, sp, #8
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
 8001d92:	4613      	mov	r3, r2
 8001d94:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001d9a:	78bb      	ldrb	r3, [r7, #2]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d104      	bne.n	8001daa <lcd_position+0x24>
    {
        col = col | 0x80;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da6:	70fb      	strb	r3, [r7, #3]
 8001da8:	e003      	b.n	8001db2 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001db0:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001dba:	f107 0208 	add.w	r2, r7, #8
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	217c      	movs	r1, #124	; 0x7c
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f002 fa9b 	bl	8004304 <HAL_I2C_Master_Transmit>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <reglagecouleur+0x74>)
 8001dec:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8001dee:	2304      	movs	r3, #4
 8001df0:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8001df6:	f107 0210 	add.w	r2, r7, #16
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2302      	movs	r3, #2
 8001e02:	21c4      	movs	r1, #196	; 0xc4
 8001e04:	6978      	ldr	r0, [r7, #20]
 8001e06:	f002 fa7d 	bl	8004304 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8001e0e:	79bb      	ldrb	r3, [r7, #6]
 8001e10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8001e12:	f107 020c 	add.w	r2, r7, #12
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	21c4      	movs	r1, #196	; 0xc4
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f002 fa6f 	bl	8004304 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8001e26:	2302      	movs	r3, #2
 8001e28:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8001e2a:	797b      	ldrb	r3, [r7, #5]
 8001e2c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8001e2e:	f107 0208 	add.w	r2, r7, #8
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	21c4      	movs	r1, #196	; 0xc4
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	f002 fa61 	bl	8004304 <HAL_I2C_Master_Transmit>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000284 	.word	0x20000284

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e52:	f5ad 4d20 	sub.w	sp, sp, #40960	; 0xa000
 8001e56:	b09b      	sub	sp, #108	; 0x6c
 8001e58:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e5a:	f001 f932 	bl	80030c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e5e:	f000 fba1 	bl	80025a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e62:	f7ff fd5f 	bl	8001924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e66:	f000 ff7f 	bl	8002d68 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001e6a:	f000 fef9 	bl	8002c60 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001e6e:	f7ff fde9 	bl	8001a44 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001e72:	f000 ff4f 	bl	8002d14 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8001e76:	f7ff fcbd 	bl	80017f4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */



  int ok[MAX_RCP_LEN ] = {0};
 8001e7a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001e7e:	3b60      	subs	r3, #96	; 0x60
 8001e80:	4618      	mov	r0, r3
 8001e82:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001e86:	461a      	mov	r2, r3
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f006 fbe3 	bl	8008654 <memset>
  char GET_DATA_Send[100] = "GET /ShowData?id=10";
 8001e8e:	f507 668a 	add.w	r6, r7, #1104	; 0x450
 8001e92:	3ec4      	subs	r6, #196	; 0xc4
 8001e94:	4bd5      	ldr	r3, [pc, #852]	; (80021ec <main+0x39c>)
 8001e96:	4634      	mov	r4, r6
 8001e98:	461d      	mov	r5, r3
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	f106 0314 	add.w	r3, r6, #20
 8001ea6:	2250      	movs	r2, #80	; 0x50
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 fbd2 	bl	8008654 <memset>
  //char path = "/ShowData?";
  int  id = 10, temp = 2000, humA = 4560, humS = 6700 , Waterlvl = 5000;
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001eb6:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ec0:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001ec4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8001ece:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001ed2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	f641 232c 	movw	r3, #6700	; 0x1a2c
 8001edc:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001ee0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001eea:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001eee:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001ef2:	6013      	str	r3, [r2, #0]
  int reboot = 0, i =0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001efa:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	2300      	movs	r3, #0
 8001f02:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001f06:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001f0a:	6013      	str	r3, [r2, #0]


  /* ----- INIT LCD ----- */

    rgb_lcd LCD_DataStruct;
    LCD_DataStruct._displaycontrol = LCD_DISPLAYON;
 8001f0c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f10:	3bc8      	subs	r3, #200	; 0xc8
 8001f12:	2204      	movs	r2, #4
 8001f14:	705a      	strb	r2, [r3, #1]
    LCD_DataStruct._displayfunction = LCD_2LINE;
 8001f16:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f1a:	3bc8      	subs	r3, #200	; 0xc8
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	701a      	strb	r2, [r3, #0]
    LCD_DataStruct._displaymode = LCD_ENTRYLEFT;
 8001f20:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f24:	3bc8      	subs	r3, #200	; 0xc8
 8001f26:	2202      	movs	r2, #2
 8001f28:	709a      	strb	r2, [r3, #2]


    lcd_init(&hi2c1, &LCD_DataStruct);
 8001f2a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f2e:	3bc8      	subs	r3, #200	; 0xc8
 8001f30:	4619      	mov	r1, r3
 8001f32:	48af      	ldr	r0, [pc, #700]	; (80021f0 <main+0x3a0>)
 8001f34:	f7ff fe08 	bl	8001b48 <lcd_init>

    reglagecouleur(50,100,255);
 8001f38:	22ff      	movs	r2, #255	; 0xff
 8001f3a:	2164      	movs	r1, #100	; 0x64
 8001f3c:	2032      	movs	r0, #50	; 0x32
 8001f3e:	f7ff ff4b 	bl	8001dd8 <reglagecouleur>
    HAL_Delay(1000);
 8001f42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f46:	f001 f92b 	bl	80031a0 <HAL_Delay>
    reglagecouleur(100,200,255);
 8001f4a:	22ff      	movs	r2, #255	; 0xff
 8001f4c:	21c8      	movs	r1, #200	; 0xc8
 8001f4e:	2064      	movs	r0, #100	; 0x64
 8001f50:	f7ff ff42 	bl	8001dd8 <reglagecouleur>
    HAL_Delay(1000);
 8001f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f58:	f001 f922 	bl	80031a0 <HAL_Delay>
    reglagecouleur(255,255,255);
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	21ff      	movs	r1, #255	; 0xff
 8001f60:	20ff      	movs	r0, #255	; 0xff
 8001f62:	f7ff ff39 	bl	8001dd8 <reglagecouleur>
    HAL_Delay(1000);
 8001f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6a:	f001 f919 	bl	80031a0 <HAL_Delay>



    char text_buff[32] = "Initialisation           ";
 8001f6e:	f507 668a 	add.w	r6, r7, #1104	; 0x450
 8001f72:	3ee8      	subs	r6, #232	; 0xe8
 8001f74:	4b9f      	ldr	r3, [pc, #636]	; (80021f4 <main+0x3a4>)
 8001f76:	4634      	mov	r4, r6
 8001f78:	461d      	mov	r5, r3
 8001f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f82:	c403      	stmia	r4!, {r0, r1}
 8001f84:	8022      	strh	r2, [r4, #0]
 8001f86:	f106 031a 	add.w	r3, r6, #26
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	809a      	strh	r2, [r3, #4]
    //sprintf(text_buff,"Temp : %.2f C",DHT22_DataStruct.T);

    lcd_position(&hi2c1,0,0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	4896      	ldr	r0, [pc, #600]	; (80021f0 <main+0x3a0>)
 8001f96:	f7ff fef6 	bl	8001d86 <lcd_position>
    lcd_print(&hi2c1, text_buff);
 8001f9a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f9e:	3be8      	subs	r3, #232	; 0xe8
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4893      	ldr	r0, [pc, #588]	; (80021f0 <main+0x3a0>)
 8001fa4:	f7ff fec6 	bl	8001d34 <lcd_print>



    /* lCD INIT : DHT22 */

    sprintf(text_buff,"du DHT22              ");
 8001fa8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001fac:	3be8      	subs	r3, #232	; 0xe8
 8001fae:	4992      	ldr	r1, [pc, #584]	; (80021f8 <main+0x3a8>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f007 fa01 	bl	80093b8 <siprintf>

    lcd_position(&hi2c1,0,1);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2100      	movs	r1, #0
 8001fba:	488d      	ldr	r0, [pc, #564]	; (80021f0 <main+0x3a0>)
 8001fbc:	f7ff fee3 	bl	8001d86 <lcd_position>
    lcd_print(&hi2c1, text_buff);
 8001fc0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001fc4:	3be8      	subs	r3, #232	; 0xe8
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4889      	ldr	r0, [pc, #548]	; (80021f0 <main+0x3a0>)
 8001fca:	f7ff feb3 	bl	8001d34 <lcd_print>
    HAL_Delay(500);
 8001fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd2:	f001 f8e5 	bl	80031a0 <HAL_Delay>

    /* INIT DHT22 */
     DHT22_Init(&htim7, 32e6,DHT22_SENS_GPIO_Port,DHT22_SENS_Pin, DHT22_SENS_EXTI_IRQn);
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	4a87      	ldr	r2, [pc, #540]	; (80021fc <main+0x3ac>)
 8001fde:	4988      	ldr	r1, [pc, #544]	; (8002200 <main+0x3b0>)
 8001fe0:	4888      	ldr	r0, [pc, #544]	; (8002204 <main+0x3b4>)
 8001fe2:	f7ff fa11 	bl	8001408 <DHT22_Init>

    /* TEST : Print measures on the LCD screen */
    DHT22_Data DHT22_DataStruct;
    HAL_Delay(500);
 8001fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fea:	f001 f8d9 	bl	80031a0 <HAL_Delay>
*/


   	/* ----- ADC - Water Level  ----- */

   	sprintf(text_buff,"du Niv D'eau           ");
 8001fee:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001ff2:	3be8      	subs	r3, #232	; 0xe8
 8001ff4:	4984      	ldr	r1, [pc, #528]	; (8002208 <main+0x3b8>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f007 f9de 	bl	80093b8 <siprintf>

   	lcd_position(&hi2c1,0,1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2100      	movs	r1, #0
 8002000:	487b      	ldr	r0, [pc, #492]	; (80021f0 <main+0x3a0>)
 8002002:	f7ff fec0 	bl	8001d86 <lcd_position>
   	lcd_print(&hi2c1, text_buff);
 8002006:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800200a:	3be8      	subs	r3, #232	; 0xe8
 800200c:	4619      	mov	r1, r3
 800200e:	4878      	ldr	r0, [pc, #480]	; (80021f0 <main+0x3a0>)
 8002010:	f7ff fe90 	bl	8001d34 <lcd_print>
   	HAL_Delay(1000);
 8002014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002018:	f001 f8c2 	bl	80031a0 <HAL_Delay>




    /* ----- LCD INIT : TCS34 ---- */
        sprintf(text_buff,"du TCS34          ");
 800201c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002020:	3be8      	subs	r3, #232	; 0xe8
 8002022:	497a      	ldr	r1, [pc, #488]	; (800220c <main+0x3bc>)
 8002024:	4618      	mov	r0, r3
 8002026:	f007 f9c7 	bl	80093b8 <siprintf>

        lcd_position(&hi2c1,0,1);
 800202a:	2201      	movs	r2, #1
 800202c:	2100      	movs	r1, #0
 800202e:	4870      	ldr	r0, [pc, #448]	; (80021f0 <main+0x3a0>)
 8002030:	f7ff fea9 	bl	8001d86 <lcd_position>
        lcd_print(&hi2c1, text_buff);
 8002034:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002038:	3be8      	subs	r3, #232	; 0xe8
 800203a:	4619      	mov	r1, r3
 800203c:	486c      	ldr	r0, [pc, #432]	; (80021f0 <main+0x3a0>)
 800203e:	f7ff fe79 	bl	8001d34 <lcd_print>
        HAL_Delay(1000);
 8002042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002046:	f001 f8ab 	bl	80031a0 <HAL_Delay>
        uint8_t Green[256];
        float red,green,blue;


    /* lCD INIT : WIFI */
    sprintf(text_buff,"du module wifi          ");
 800204a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800204e:	3be8      	subs	r3, #232	; 0xe8
 8002050:	496f      	ldr	r1, [pc, #444]	; (8002210 <main+0x3c0>)
 8002052:	4618      	mov	r0, r3
 8002054:	f007 f9b0 	bl	80093b8 <siprintf>

    lcd_position(&hi2c1,0,1);
 8002058:	2201      	movs	r2, #1
 800205a:	2100      	movs	r1, #0
 800205c:	4864      	ldr	r0, [pc, #400]	; (80021f0 <main+0x3a0>)
 800205e:	f7ff fe92 	bl	8001d86 <lcd_position>
    lcd_print(&hi2c1, text_buff);
 8002062:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002066:	3be8      	subs	r3, #232	; 0xe8
 8002068:	4619      	mov	r1, r3
 800206a:	4861      	ldr	r0, [pc, #388]	; (80021f0 <main+0x3a0>)
 800206c:	f7ff fe62 	bl	8001d34 <lcd_print>



  /* -----  WIFI_authentification(SSID,AUTH,KEY);  ----- */

    commandMode();
 8002070:	f000 ff28 	bl	8002ec4 <commandMode>

	sendCommand("set wlan ssid " SSID "\r", "OK",ok);
 8002074:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002078:	3b60      	subs	r3, #96	; 0x60
 800207a:	461a      	mov	r2, r3
 800207c:	4965      	ldr	r1, [pc, #404]	; (8002214 <main+0x3c4>)
 800207e:	4866      	ldr	r0, [pc, #408]	; (8002218 <main+0x3c8>)
 8002080:	f000 ff60 	bl	8002f44 <sendCommand>
	  if (strcmp(AUTH , WIFLY_AUTH_OPEN) > 0 || strcmp(AUTH , WIFLY_AUTH_OPEN) < 0 )
	    {
		  sendCommand("set wlan auth " AUTH "\r","OK", ok);
 8002084:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002088:	3b60      	subs	r3, #96	; 0x60
 800208a:	461a      	mov	r2, r3
 800208c:	4961      	ldr	r1, [pc, #388]	; (8002214 <main+0x3c4>)
 800208e:	4863      	ldr	r0, [pc, #396]	; (800221c <main+0x3cc>)
 8002090:	f000 ff58 	bl	8002f44 <sendCommand>
	  	  if (strcmp(AUTH , WIFLY_AUTH_WEP)==0)
	  	  {
	  		sendCommand("set wlan key " KEY "\r","OK", ok); // Key must be EXACTLY 13 bytes (26 ASCII chars)
	  	  }
	  	  else{
	  		sendCommand("set wlan phrase " KEY"\r","OK", ok);
 8002094:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002098:	3b60      	subs	r3, #96	; 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	495d      	ldr	r1, [pc, #372]	; (8002214 <main+0x3c4>)
 800209e:	4860      	ldr	r0, [pc, #384]	; (8002220 <main+0x3d0>)
 80020a0:	f000 ff50 	bl	8002f44 <sendCommand>
  //sendCommand("open\r","*OPEN*",ok); // One time opening of connection to server


  /* -----  Save wlan config ----- */

  sendCommand("save\r", "Storing in config",ok);
 80020a4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80020a8:	3b60      	subs	r3, #96	; 0x60
 80020aa:	461a      	mov	r2, r3
 80020ac:	495d      	ldr	r1, [pc, #372]	; (8002224 <main+0x3d4>)
 80020ae:	485e      	ldr	r0, [pc, #376]	; (8002228 <main+0x3d8>)
 80020b0:	f000 ff48 	bl	8002f44 <sendCommand>
  sendCommand("reboot\r", "*READY*", ok); //After reboot we directly go to dataMode
 80020b4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80020b8:	3b60      	subs	r3, #96	; 0x60
 80020ba:	461a      	mov	r2, r3
 80020bc:	495b      	ldr	r1, [pc, #364]	; (800222c <main+0x3dc>)
 80020be:	485c      	ldr	r0, [pc, #368]	; (8002230 <main+0x3e0>)
 80020c0:	f000 ff40 	bl	8002f44 <sendCommand>

    /* USER CODE BEGIN 3 */

	  /*-----  Join access point -----*/

	  HAL_Delay(1000);
 80020c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020c8:	f001 f86a 	bl	80031a0 <HAL_Delay>
	  commandMode();
 80020cc:	f000 fefa 	bl	8002ec4 <commandMode>
	  sendCommand("show  net\r", "Assoc=OK",ok);
 80020d0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80020d4:	3b60      	subs	r3, #96	; 0x60
 80020d6:	461a      	mov	r2, r3
 80020d8:	4956      	ldr	r1, [pc, #344]	; (8002234 <main+0x3e4>)
 80020da:	4857      	ldr	r0, [pc, #348]	; (8002238 <main+0x3e8>)
 80020dc:	f000 ff32 	bl	8002f44 <sendCommand>
	  if (strstr((char *)ok,"Assoc=OK")==NULL)
 80020e0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80020e4:	3b60      	subs	r3, #96	; 0x60
 80020e6:	4953      	ldr	r1, [pc, #332]	; (8002234 <main+0x3e4>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f007 f985 	bl	80093f8 <strstr>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d133      	bne.n	800215c <main+0x30c>
	  {
		  sendCommand("join\r","Associated!",ok);
 80020f4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80020f8:	3b60      	subs	r3, #96	; 0x60
 80020fa:	461a      	mov	r2, r3
 80020fc:	494f      	ldr	r1, [pc, #316]	; (800223c <main+0x3ec>)
 80020fe:	4850      	ldr	r0, [pc, #320]	; (8002240 <main+0x3f0>)
 8002100:	f000 ff20 	bl	8002f44 <sendCommand>
		  HAL_Delay(2000);
 8002104:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002108:	f001 f84a 	bl	80031a0 <HAL_Delay>
		  sendCommand("set ip protocol 18\r","OK",ok); //enable html client
 800210c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002110:	3b60      	subs	r3, #96	; 0x60
 8002112:	461a      	mov	r2, r3
 8002114:	493f      	ldr	r1, [pc, #252]	; (8002214 <main+0x3c4>)
 8002116:	484b      	ldr	r0, [pc, #300]	; (8002244 <main+0x3f4>)
 8002118:	f000 ff14 	bl	8002f44 <sendCommand>
		    sendCommand("set com remote 0\r","OK",ok); // turn off the REMOTE string so it does not interfere with the post
 800211c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002120:	3b60      	subs	r3, #96	; 0x60
 8002122:	461a      	mov	r2, r3
 8002124:	493b      	ldr	r1, [pc, #236]	; (8002214 <main+0x3c4>)
 8002126:	4848      	ldr	r0, [pc, #288]	; (8002248 <main+0x3f8>)
 8002128:	f000 ff0c 	bl	8002f44 <sendCommand>


		    sendCommand("set ip host " HOST_IP"\r","OK",ok); //set remote IP to connect to
 800212c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002130:	3b60      	subs	r3, #96	; 0x60
 8002132:	461a      	mov	r2, r3
 8002134:	4937      	ldr	r1, [pc, #220]	; (8002214 <main+0x3c4>)
 8002136:	4845      	ldr	r0, [pc, #276]	; (800224c <main+0x3fc>)
 8002138:	f000 ff04 	bl	8002f44 <sendCommand>
		    sendCommand("set ip remote "HOST_PORT"\r","OK",ok); //set remote Port to connect to
 800213c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002140:	3b60      	subs	r3, #96	; 0x60
 8002142:	461a      	mov	r2, r3
 8002144:	4933      	ldr	r1, [pc, #204]	; (8002214 <main+0x3c4>)
 8002146:	4842      	ldr	r0, [pc, #264]	; (8002250 <main+0x400>)
 8002148:	f000 fefc 	bl	8002f44 <sendCommand>
	  sendCommand("set uart mode 2\r","AOK",ok); //auto connect on every UART message
 800214c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002150:	3b60      	subs	r3, #96	; 0x60
 8002152:	461a      	mov	r2, r3
 8002154:	493f      	ldr	r1, [pc, #252]	; (8002254 <main+0x404>)
 8002156:	4840      	ldr	r0, [pc, #256]	; (8002258 <main+0x408>)
 8002158:	f000 fef4 	bl	8002f44 <sendCommand>


	  }
	  sendCommand("exit\r","EXIT", ok);
 800215c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002160:	3b60      	subs	r3, #96	; 0x60
 8002162:	461a      	mov	r2, r3
 8002164:	493d      	ldr	r1, [pc, #244]	; (800225c <main+0x40c>)
 8002166:	483e      	ldr	r0, [pc, #248]	; (8002260 <main+0x410>)
 8002168:	f000 feec 	bl	8002f44 <sendCommand>

	  /* Code Capteurs */



		  	  char text_buff[32] = "Les Mesures :       ";
 800216c:	f107 0650 	add.w	r6, r7, #80	; 0x50
 8002170:	3e4c      	subs	r6, #76	; 0x4c
 8002172:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <main+0x414>)
 8002174:	4634      	mov	r4, r6
 8002176:	461d      	mov	r5, r3
 8002178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002180:	6020      	str	r0, [r4, #0]
 8002182:	3404      	adds	r4, #4
 8002184:	7021      	strb	r1, [r4, #0]
 8002186:	f106 0315 	add.w	r3, r6, #21
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	f8c3 2007 	str.w	r2, [r3, #7]
		 	  lcd_position(&hi2c1,0,0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	4815      	ldr	r0, [pc, #84]	; (80021f0 <main+0x3a0>)
 800219a:	f7ff fdf4 	bl	8001d86 <lcd_position>
		  	  lcd_print(&hi2c1, text_buff);
 800219e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021a2:	3b4c      	subs	r3, #76	; 0x4c
 80021a4:	4619      	mov	r1, r3
 80021a6:	4812      	ldr	r0, [pc, #72]	; (80021f0 <main+0x3a0>)
 80021a8:	f7ff fdc4 	bl	8001d34 <lcd_print>



		  	  sprintf(text_buff,"                          .");
 80021ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021b0:	3b4c      	subs	r3, #76	; 0x4c
 80021b2:	492d      	ldr	r1, [pc, #180]	; (8002268 <main+0x418>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f007 f8ff 	bl	80093b8 <siprintf>
		  	  lcd_position(&hi2c1,0,1);
 80021ba:	2201      	movs	r2, #1
 80021bc:	2100      	movs	r1, #0
 80021be:	480c      	ldr	r0, [pc, #48]	; (80021f0 <main+0x3a0>)
 80021c0:	f7ff fde1 	bl	8001d86 <lcd_position>
		  	  lcd_print(&hi2c1, text_buff);
 80021c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021c8:	3b4c      	subs	r3, #76	; 0x4c
 80021ca:	4619      	mov	r1, r3
 80021cc:	4808      	ldr	r0, [pc, #32]	; (80021f0 <main+0x3a0>)
 80021ce:	f7ff fdb1 	bl	8001d34 <lcd_print>



	  // DHT22

	    DHT22_DataStruct = DHT22_ReadData();
 80021d2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80021d6:	3bf4      	subs	r3, #244	; 0xf4
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f94f 	bl	800147c <DHT22_ReadData>
	   	  if(DHT22_DataStruct.is_data_valid)
 80021de:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80021e2:	3bf4      	subs	r3, #244	; 0xf4
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d07e      	beq.n	80022e8 <main+0x498>
 80021ea:	e03f      	b.n	800226c <main+0x41c>
 80021ec:	0800d17c 	.word	0x0800d17c
 80021f0:	20000284 	.word	0x20000284
 80021f4:	0800d1e0 	.word	0x0800d1e0
 80021f8:	0800cf20 	.word	0x0800cf20
 80021fc:	40020000 	.word	0x40020000
 8002200:	01e84800 	.word	0x01e84800
 8002204:	200002dc 	.word	0x200002dc
 8002208:	0800cf38 	.word	0x0800cf38
 800220c:	0800cf50 	.word	0x0800cf50
 8002210:	0800cf64 	.word	0x0800cf64
 8002214:	0800cf80 	.word	0x0800cf80
 8002218:	0800cf84 	.word	0x0800cf84
 800221c:	0800cfa4 	.word	0x0800cfa4
 8002220:	0800cfb8 	.word	0x0800cfb8
 8002224:	0800cfdc 	.word	0x0800cfdc
 8002228:	0800cff0 	.word	0x0800cff0
 800222c:	0800cff8 	.word	0x0800cff8
 8002230:	0800d000 	.word	0x0800d000
 8002234:	0800d008 	.word	0x0800d008
 8002238:	0800d014 	.word	0x0800d014
 800223c:	0800d020 	.word	0x0800d020
 8002240:	0800d02c 	.word	0x0800d02c
 8002244:	0800d034 	.word	0x0800d034
 8002248:	0800d048 	.word	0x0800d048
 800224c:	0800d05c 	.word	0x0800d05c
 8002250:	0800d078 	.word	0x0800d078
 8002254:	0800d08c 	.word	0x0800d08c
 8002258:	0800d090 	.word	0x0800d090
 800225c:	0800d0a4 	.word	0x0800d0a4
 8002260:	0800d0ac 	.word	0x0800d0ac
 8002264:	0800d200 	.word	0x0800d200
 8002268:	0800d0b4 	.word	0x0800d0b4
	   	  {
	   		  char text_buff[32];
	   		  sprintf(text_buff,"Temp : %.2f C       ",DHT22_DataStruct.T);
 800226c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002270:	3bf4      	subs	r3, #244	; 0xf4
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f8ef 	bl	8000458 <__aeabi_f2d>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002282:	382c      	subs	r0, #44	; 0x2c
 8002284:	49b7      	ldr	r1, [pc, #732]	; (8002564 <main+0x714>)
 8002286:	f007 f897 	bl	80093b8 <siprintf>
	   		  lcd_position(&hi2c1,0,1);
 800228a:	2201      	movs	r2, #1
 800228c:	2100      	movs	r1, #0
 800228e:	48b6      	ldr	r0, [pc, #728]	; (8002568 <main+0x718>)
 8002290:	f7ff fd79 	bl	8001d86 <lcd_position>
	   		  lcd_print(&hi2c1, text_buff);
 8002294:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002298:	3b2c      	subs	r3, #44	; 0x2c
 800229a:	4619      	mov	r1, r3
 800229c:	48b2      	ldr	r0, [pc, #712]	; (8002568 <main+0x718>)
 800229e:	f7ff fd49 	bl	8001d34 <lcd_print>
	   		  HAL_Delay(1000);
 80022a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a6:	f000 ff7b 	bl	80031a0 <HAL_Delay>


	   		  sprintf(text_buff,"Hum : %.2f %%      ",DHT22_DataStruct.RH);
 80022aa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80022ae:	3bf4      	subs	r3, #244	; 0xf4
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f8d0 	bl	8000458 <__aeabi_f2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80022c0:	382c      	subs	r0, #44	; 0x2c
 80022c2:	49aa      	ldr	r1, [pc, #680]	; (800256c <main+0x71c>)
 80022c4:	f007 f878 	bl	80093b8 <siprintf>
	   		  lcd_position(&hi2c1,0,1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	2100      	movs	r1, #0
 80022cc:	48a6      	ldr	r0, [pc, #664]	; (8002568 <main+0x718>)
 80022ce:	f7ff fd5a 	bl	8001d86 <lcd_position>
	   		  lcd_print(&hi2c1, text_buff);
 80022d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022d6:	3b2c      	subs	r3, #44	; 0x2c
 80022d8:	4619      	mov	r1, r3
 80022da:	48a3      	ldr	r0, [pc, #652]	; (8002568 <main+0x718>)
 80022dc:	f7ff fd2a 	bl	8001d34 <lcd_print>
	   		  HAL_Delay(1000);
 80022e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022e4:	f000 ff5c 	bl	80031a0 <HAL_Delay>
	    // WATER LEVEL



	    // Get ADC value
	   	    HAL_ADC_Start(&hadc);
 80022e8:	48a1      	ldr	r0, [pc, #644]	; (8002570 <main+0x720>)
 80022ea:	f001 f8c1 	bl	8003470 <HAL_ADC_Start>
	   	    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80022ee:	f04f 31ff 	mov.w	r1, #4294967295
 80022f2:	489f      	ldr	r0, [pc, #636]	; (8002570 <main+0x720>)
 80022f4:	f001 f91c 	bl	8003530 <HAL_ADC_PollForConversion>
	   	    raw_wtr_lvl = HAL_ADC_GetValue(&hadc);
 80022f8:	489d      	ldr	r0, [pc, #628]	; (8002570 <main+0x720>)
 80022fa:	f001 f9a2 	bl	8003642 <HAL_ADC_GetValue>
 80022fe:	4603      	mov	r3, r0
 8002300:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8002304:	f102 0232 	add.w	r2, r2, #50	; 0x32
 8002308:	8013      	strh	r3, [r2, #0]



	   	    // Convert to string and print
	   	    sprintf(msg_raw_wtr_lvl, "%hu\r\n", raw_wtr_lvl);
 800230a:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 800230e:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002318:	4996      	ldr	r1, [pc, #600]	; (8002574 <main+0x724>)
 800231a:	4618      	mov	r0, r3
 800231c:	f007 f84c 	bl	80093b8 <siprintf>
	   	    HAL_UART_Transmit(&huart2, (uint8_t*)msg_raw_wtr_lvl, strlen(msg_raw_wtr_lvl), HAL_MAX_DELAY);
 8002320:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002324:	4618      	mov	r0, r3
 8002326:	f7fd ff2b 	bl	8000180 <strlen>
 800232a:	4603      	mov	r3, r0
 800232c:	b29a      	uxth	r2, r3
 800232e:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	4890      	ldr	r0, [pc, #576]	; (8002578 <main+0x728>)
 8002338:	f005 fc77 	bl	8007c2a <HAL_UART_Transmit>

	   	    // get pourcentage value
	   	    Waterlvl = raw_wtr_lvl * 100 / 4095 ;//4095 adc 12 bits resolution
 800233c:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002340:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	2264      	movs	r2, #100	; 0x64
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	4a8b      	ldr	r2, [pc, #556]	; (800257c <main+0x72c>)
 800234e:	fb82 1203 	smull	r1, r2, r2, r3
 8002352:	441a      	add	r2, r3
 8002354:	12d2      	asrs	r2, r2, #11
 8002356:	17db      	asrs	r3, r3, #31
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 800235e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002362:	6013      	str	r3, [r2, #0]

	   //affichage LCD water level


	   	 sprintf(text_buff,"Hum Terre : %d %%     ",Waterlvl);
 8002364:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002368:	3b4c      	subs	r3, #76	; 0x4c
 800236a:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 800236e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	4982      	ldr	r1, [pc, #520]	; (8002580 <main+0x730>)
 8002376:	4618      	mov	r0, r3
 8002378:	f007 f81e 	bl	80093b8 <siprintf>
	   	 lcd_position(&hi2c1,0,1);
 800237c:	2201      	movs	r2, #1
 800237e:	2100      	movs	r1, #0
 8002380:	4879      	ldr	r0, [pc, #484]	; (8002568 <main+0x718>)
 8002382:	f7ff fd00 	bl	8001d86 <lcd_position>
	   	 lcd_print(&hi2c1, text_buff);
 8002386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800238a:	3b4c      	subs	r3, #76	; 0x4c
 800238c:	4619      	mov	r1, r3
 800238e:	4876      	ldr	r0, [pc, #472]	; (8002568 <main+0x718>)
 8002390:	f7ff fcd0 	bl	8001d34 <lcd_print>
	   	 HAL_Delay(1000);
 8002394:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002398:	f000 ff02 	bl	80031a0 <HAL_Delay>


	   	tcs34725_get_RGB_Values(&red, &green, &blue);//lecture rgb
 800239c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80023a0:	3a0c      	subs	r2, #12
 80023a2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80023a6:	3908      	subs	r1, #8
 80023a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ac:	3b04      	subs	r3, #4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fbe0 	bl	8002b74 <tcs34725_get_RGB_Values>

	   	//LCD screen take ambient color
	   	reglagecouleur((int) red,(int) green,(int) blue);
 80023b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023b8:	3b04      	subs	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fe49 	bl	8001054 <__aeabi_f2iz>
 80023c2:	4603      	mov	r3, r0
 80023c4:	b2dc      	uxtb	r4, r3
 80023c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ca:	3b08      	subs	r3, #8
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fe40 	bl	8001054 <__aeabi_f2iz>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b2dd      	uxtb	r5, r3
 80023d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023dc:	3b0c      	subs	r3, #12
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fe37 	bl	8001054 <__aeabi_f2iz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	4629      	mov	r1, r5
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fcf2 	bl	8001dd8 <reglagecouleur>


	      // affichage de la temperature sur l'ecran lcd
	     	 	 	 //lcd_clear();

	   	sprintf(text_buff,"R%.0d G%.0d B%.0d      ",(int) red,(int) green,(int) blue);
 80023f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023f8:	3b04      	subs	r3, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fe29 	bl	8001054 <__aeabi_f2iz>
 8002402:	4604      	mov	r4, r0
 8002404:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002408:	3b08      	subs	r3, #8
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fe21 	bl	8001054 <__aeabi_f2iz>
 8002412:	4605      	mov	r5, r0
 8002414:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002418:	3b0c      	subs	r3, #12
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fe19 	bl	8001054 <__aeabi_f2iz>
 8002422:	4603      	mov	r3, r0
 8002424:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002428:	384c      	subs	r0, #76	; 0x4c
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	462b      	mov	r3, r5
 800242e:	4622      	mov	r2, r4
 8002430:	4954      	ldr	r1, [pc, #336]	; (8002584 <main+0x734>)
 8002432:	f006 ffc1 	bl	80093b8 <siprintf>
	    lcd_position(&hi2c1,0,1);
 8002436:	2201      	movs	r2, #1
 8002438:	2100      	movs	r1, #0
 800243a:	484b      	ldr	r0, [pc, #300]	; (8002568 <main+0x718>)
 800243c:	f7ff fca3 	bl	8001d86 <lcd_position>
	    lcd_print(&hi2c1, text_buff);
 8002440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002444:	3b4c      	subs	r3, #76	; 0x4c
 8002446:	4619      	mov	r1, r3
 8002448:	4847      	ldr	r0, [pc, #284]	; (8002568 <main+0x718>)
 800244a:	f7ff fc73 	bl	8001d34 <lcd_print>
	    HAL_Delay(1000);
 800244e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002452:	f000 fea5 	bl	80031a0 <HAL_Delay>



	  /* Send measures to server */

	  snprintf(GET_DATA_Send,100,"GET %sid=%d&temp=%d&huma=%d&hums=%d&wtrlvl=%d","/ShowData?",
 8002456:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 800245a:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002464:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	18d4      	adds	r4, r2, r3
			  	  	  	  	  id + i, (int)(DHT22_DataStruct.T * 100), (int)(DHT22_DataStruct.RH * 100), humS, Waterlvl);
 800246c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002470:	3bf4      	subs	r3, #244	; 0xf4
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4944      	ldr	r1, [pc, #272]	; (8002588 <main+0x738>)
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fc9c 	bl	8000db4 <__aeabi_fmul>
 800247c:	4603      	mov	r3, r0
	  snprintf(GET_DATA_Send,100,"GET %sid=%d&temp=%d&huma=%d&hums=%d&wtrlvl=%d","/ShowData?",
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fde8 	bl	8001054 <__aeabi_f2iz>
 8002484:	4605      	mov	r5, r0
			  	  	  	  	  id + i, (int)(DHT22_DataStruct.T * 100), (int)(DHT22_DataStruct.RH * 100), humS, Waterlvl);
 8002486:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800248a:	3bf4      	subs	r3, #244	; 0xf4
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	493e      	ldr	r1, [pc, #248]	; (8002588 <main+0x738>)
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fc8f 	bl	8000db4 <__aeabi_fmul>
 8002496:	4603      	mov	r3, r0
	  snprintf(GET_DATA_Send,100,"GET %sid=%d&temp=%d&huma=%d&hums=%d&wtrlvl=%d","/ShowData?",
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fddb 	bl	8001054 <__aeabi_f2iz>
 800249e:	4602      	mov	r2, r0
 80024a0:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 80024a4:	38c4      	subs	r0, #196	; 0xc4
 80024a6:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80024aa:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	9304      	str	r3, [sp, #16]
 80024b2:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80024b6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	9303      	str	r3, [sp, #12]
 80024be:	9202      	str	r2, [sp, #8]
 80024c0:	9501      	str	r5, [sp, #4]
 80024c2:	9400      	str	r4, [sp, #0]
 80024c4:	4b31      	ldr	r3, [pc, #196]	; (800258c <main+0x73c>)
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <main+0x740>)
 80024c8:	2164      	movs	r1, #100	; 0x64
 80024ca:	f006 ff41 	bl	8009350 <sniprintf>

	  sendData(GET_DATA_Send,"200 OK", ok);
 80024ce:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80024d2:	3a60      	subs	r2, #96	; 0x60
 80024d4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80024d8:	3bc4      	subs	r3, #196	; 0xc4
 80024da:	492e      	ldr	r1, [pc, #184]	; (8002594 <main+0x744>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fd87 	bl	8002ff0 <sendData>
	  i++;
 80024e2:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80024e6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80024f2:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80024f6:	6013      	str	r3, [r2, #0]

	  /* test Failure and reboot Wifi Module*/
	  if( strstr((char *)ok,"ERR") != NULL ||  strcmp((char *)ok,"") == 0 )
 80024f8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80024fc:	3b60      	subs	r3, #96	; 0x60
 80024fe:	4926      	ldr	r1, [pc, #152]	; (8002598 <main+0x748>)
 8002500:	4618      	mov	r0, r3
 8002502:	f006 ff79 	bl	80093f8 <strstr>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <main+0x6ca>
 800250c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002510:	3b60      	subs	r3, #96	; 0x60
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f add5 	bne.w	80020c4 <main+0x274>
	  {
		  reboot ++;
 800251a:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 800251e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 800252a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800252e:	6013      	str	r3, [r2, #0]
		  if(reboot >= 2)
 8002530:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002534:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	f77f adc2 	ble.w	80020c4 <main+0x274>
		  {
			  reboot = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8002546:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800254a:	6013      	str	r3, [r2, #0]
			  commandMode();
 800254c:	f000 fcba 	bl	8002ec4 <commandMode>
			  sendCommand("reboot\r", "*READY*", ok);
 8002550:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002554:	3b60      	subs	r3, #96	; 0x60
 8002556:	461a      	mov	r2, r3
 8002558:	4910      	ldr	r1, [pc, #64]	; (800259c <main+0x74c>)
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <main+0x750>)
 800255c:	f000 fcf2 	bl	8002f44 <sendCommand>
  {
 8002560:	e5b0      	b.n	80020c4 <main+0x274>
 8002562:	bf00      	nop
 8002564:	0800d0d0 	.word	0x0800d0d0
 8002568:	20000284 	.word	0x20000284
 800256c:	0800d0e8 	.word	0x0800d0e8
 8002570:	20000230 	.word	0x20000230
 8002574:	0800d0fc 	.word	0x0800d0fc
 8002578:	2000035c 	.word	0x2000035c
 800257c:	80080081 	.word	0x80080081
 8002580:	0800d104 	.word	0x0800d104
 8002584:	0800d11c 	.word	0x0800d11c
 8002588:	42c80000 	.word	0x42c80000
 800258c:	0800d134 	.word	0x0800d134
 8002590:	0800d140 	.word	0x0800d140
 8002594:	0800d170 	.word	0x0800d170
 8002598:	0800d178 	.word	0x0800d178
 800259c:	0800cff8 	.word	0x0800cff8
 80025a0:	0800d000 	.word	0x0800d000

080025a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b092      	sub	sp, #72	; 0x48
 80025a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	2234      	movs	r2, #52	; 0x34
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f006 f84e 	bl	8008654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b8:	463b      	mov	r3, r7
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <SystemClock_Config+0x98>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80025ce:	4a1b      	ldr	r2, [pc, #108]	; (800263c <SystemClock_Config+0x98>)
 80025d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025d6:	2302      	movs	r3, #2
 80025d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025da:	2301      	movs	r3, #1
 80025dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025de:	2310      	movs	r3, #16
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e2:	2302      	movs	r3, #2
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80025ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80025f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80025f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 faa4 	bl	8006b48 <HAL_RCC_OscConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002606:	f000 f81b 	bl	8002640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260a:	230f      	movs	r3, #15
 800260c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260e:	2303      	movs	r3, #3
 8002610:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800261e:	463b      	mov	r3, r7
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fdc0 	bl	80071a8 <HAL_RCC_ClockConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800262e:	f000 f807 	bl	8002640 <Error_Handler>
  }
}
 8002632:	bf00      	nop
 8002634:	3748      	adds	r7, #72	; 0x48
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40007000 	.word	0x40007000

08002640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002644:	b672      	cpsid	i
}
 8002646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002648:	e7fe      	b.n	8002648 <Error_Handler+0x8>
	...

0800264c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_MspInit+0x5c>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_MspInit+0x5c>)
 8002658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800265c:	6253      	str	r3, [r2, #36]	; 0x24
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_MspInit+0x5c>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_MspInit+0x5c>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <HAL_MspInit+0x5c>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_MspInit+0x5c>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_MspInit+0x5c>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_MspInit+0x5c>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6253      	str	r3, [r2, #36]	; 0x24
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_MspInit+0x5c>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800269a:	2007      	movs	r0, #7
 800269c:	f001 fa90 	bl	8003bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <NMI_Handler+0x4>

080026b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <HardFault_Handler+0x4>

080026b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <MemManage_Handler+0x4>

080026be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <UsageFault_Handler+0x4>

080026ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f2:	f000 fd39 	bl	8003168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}

080026fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80026fe:	2001      	movs	r0, #1
 8002700:	f001 fca4 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <I2C1_EV_IRQHandler+0x10>)
 800270e:	f002 fa4b 	bl	8004ba8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000284 	.word	0x20000284

0800271c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <I2C1_ER_IRQHandler+0x10>)
 8002722:	f002 fbae 	bl	8004e82 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000284 	.word	0x20000284

08002730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <USART1_IRQHandler+0x10>)
 8002736:	f005 fbfb 	bl	8007f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000031c 	.word	0x2000031c

08002744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <USART2_IRQHandler+0x10>)
 800274a:	f005 fbf1 	bl	8007f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000035c 	.word	0x2000035c

08002758 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <TIM7_IRQHandler+0x10>)
 800275e:	f005 f849 	bl	80077f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200002dc 	.word	0x200002dc

0800276c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
	return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <_kill>:

int _kill(int pid, int sig)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002784:	f005 ff3c 	bl	8008600 <__errno>
 8002788:	4603      	mov	r3, r0
 800278a:	2216      	movs	r2, #22
 800278c:	601a      	str	r2, [r3, #0]
	return -1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_exit>:

void _exit (int status)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027a2:	f04f 31ff 	mov.w	r1, #4294967295
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffe7 	bl	800277a <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ac:	e7fe      	b.n	80027ac <_exit+0x12>

080027ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e00a      	b.n	80027d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027c0:	f3af 8000 	nop.w
 80027c4:	4601      	mov	r1, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	60ba      	str	r2, [r7, #8]
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbf0      	blt.n	80027c0 <_read+0x12>
	}

return len;
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e009      	b.n	800280e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	dbf1      	blt.n	80027fa <_write+0x12>
	}
	return len;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_close>:

int _close(int file)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	return -1;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002846:	605a      	str	r2, [r3, #4]
	return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <_isatty>:

int _isatty(int file)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	return 0;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <_sbrk+0x5c>)
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <_sbrk+0x60>)
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <_sbrk+0x64>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <_sbrk+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d207      	bcs.n	80028c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b0:	f005 fea6 	bl	8008600 <__errno>
 80028b4:	4603      	mov	r3, r0
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	e009      	b.n	80028d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <_sbrk+0x64>)
 80028d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20014000 	.word	0x20014000
 80028e0:	00000400 	.word	0x00000400
 80028e4:	20000214 	.word	0x20000214
 80028e8:	200003b0 	.word	0x200003b0

080028ec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <SystemInit+0x14>)
 80028f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f6:	609a      	str	r2, [r3, #8]
#endif
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <tcs34725_enable>:
tcs34725Gain_t _tcs34725Gain;
tcs34725IntegrationTime_t _tcs34725IntegrationTime;
/***enable and disable the tcs34725 sensor
  */
void tcs34725_enable(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  tcs34725_i2c_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8002908:	2300      	movs	r3, #0
 800290a:	2201      	movs	r2, #1
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f88a 	bl	8002a28 <tcs34725_i2c_write8>
  tcs34725_i2c_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8002914:	2000      	movs	r0, #0
 8002916:	2201      	movs	r2, #1
 8002918:	2302      	movs	r3, #2
 800291a:	4313      	orrs	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	f000 f882 	bl	8002a28 <tcs34725_i2c_write8>
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}

08002928 <tcs34725_i2c_read8>:
	reg = tcs34725_i2c_read8(TCS34725_ENABLE);
	tcs34725_i2c_write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}
//Read with 8 bits using I2C protocol
uint8_t tcs34725_i2c_read8(uint8_t reg)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af02      	add	r7, sp, #8
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = (TCS34725_COMMAND_BYTE | reg);
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4313      	orrs	r3, r2
 8002938:	b2db      	uxtb	r3, r3
 800293a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDR, buf, 1, HAL_MAX_DELAY);
 800293c:	2352      	movs	r3, #82	; 0x52
 800293e:	b299      	uxth	r1, r3
 8002940:	f107 020c 	add.w	r2, r7, #12
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	4809      	ldr	r0, [pc, #36]	; (8002974 <tcs34725_i2c_read8+0x4c>)
 800294e:	f001 fcd9 	bl	8004304 <HAL_I2C_Master_Transmit>
  	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDR, buf, 1, HAL_MAX_DELAY);
 8002952:	2352      	movs	r3, #82	; 0x52
 8002954:	b299      	uxth	r1, r3
 8002956:	f107 020c 	add.w	r2, r7, #12
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2301      	movs	r3, #1
 8002962:	4804      	ldr	r0, [pc, #16]	; (8002974 <tcs34725_i2c_read8+0x4c>)
 8002964:	f001 fdcc 	bl	8004500 <HAL_I2C_Master_Receive>
	return buf[0];
 8002968:	7b3b      	ldrb	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000284 	.word	0x20000284

08002978 <tcs32725_init>:
/*SENSOR init*/
void tcs32725_init()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
/* Make sure we're actually connected */
	uint8_t x = tcs34725_i2c_read8(TCS34725_ID);
 800297e:	2312      	movs	r3, #18
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ffd1 	bl	8002928 <tcs34725_i2c_read8>
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
	//printf("sensor ID %d \n", x);
	if ((x != 0x44) && (x != 0x10))
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b44      	cmp	r3, #68	; 0x44
 800298e:	d009      	beq.n	80029a4 <tcs32725_init+0x2c>
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b10      	cmp	r3, #16
 8002994:	d006      	beq.n	80029a4 <tcs32725_init+0x2c>
		HAL_UART_Transmit(&huart2, (uint8_t *)"sensor not identified \n", 24, HAL_MAX_DELAY);
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	2218      	movs	r2, #24
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <tcs32725_init+0x44>)
 800299e:	4808      	ldr	r0, [pc, #32]	; (80029c0 <tcs32725_init+0x48>)
 80029a0:	f005 f943 	bl	8007c2a <HAL_UART_Transmit>
		//printf("sensor not identified \n");
	//_tcs34725Initialized = true;
/* Set default integration time and gain */
	tcs34725_set_time_integration(TCS34725_INTEGRATIONTIME_2_4MS);
 80029a4:	20ff      	movs	r0, #255	; 0xff
 80029a6:	f000 f85f 	bl	8002a68 <tcs34725_set_time_integration>
	tcs34725_set_gain(TCS34725_GAIN_1X);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f000 f870 	bl	8002a90 <tcs34725_set_gain>
/* Note: by default, the device is in power down mode on bootup */
	tcs34725_enable();
 80029b0:	f7ff ffa8 	bl	8002904 <tcs34725_enable>
	//return true;
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	0800d220 	.word	0x0800d220
 80029c0:	2000035c 	.word	0x2000035c

080029c4 <tcs34725_i2c_read16>:
//////////////////////////////////

// Read with 16 bits using i2c protocol
uint16_t tcs34725_i2c_read16(uint8_t reg)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
	uint16_t x;	uint8_t TxBuf[2],RxBuf[2];
	TxBuf[0] = (TCS34725_COMMAND_BYTE | reg);
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDR, TxBuf, 1, HAL_MAX_DELAY);
 80029d8:	2352      	movs	r3, #82	; 0x52
 80029da:	b299      	uxth	r1, r3
 80029dc:	f107 020c 	add.w	r2, r7, #12
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2301      	movs	r3, #1
 80029e8:	480e      	ldr	r0, [pc, #56]	; (8002a24 <tcs34725_i2c_read16+0x60>)
 80029ea:	f001 fc8b 	bl	8004304 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDR, RxBuf, 2, HAL_MAX_DELAY);
 80029ee:	2352      	movs	r3, #82	; 0x52
 80029f0:	b299      	uxth	r1, r3
 80029f2:	f107 0208 	add.w	r2, r7, #8
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2302      	movs	r3, #2
 80029fe:	4809      	ldr	r0, [pc, #36]	; (8002a24 <tcs34725_i2c_read16+0x60>)
 8002a00:	f001 fd7e 	bl	8004500 <HAL_I2C_Master_Receive>
	x = RxBuf[0];
 8002a04:	7a3b      	ldrb	r3, [r7, #8]
 8002a06:	81fb      	strh	r3, [r7, #14]
	x <<= 8;
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	81fb      	strh	r3, [r7, #14]
	x |= RxBuf[1];
 8002a0e:	7a7b      	ldrb	r3, [r7, #9]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	81fb      	strh	r3, [r7, #14]
	return x;
 8002a18:	89fb      	ldrh	r3, [r7, #14]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000284 	.word	0x20000284

08002a28 <tcs34725_i2c_write8>:
//Write with 8 bits for I2C protocol
void tcs34725_i2c_write8(uint8_t reg, uint32_t val)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = (TCS34725_COMMAND_BYTE | reg);
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	733b      	strb	r3, [r7, #12]
	buf[1] = (val & 0xFF);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDR, buf, 2, HAL_MAX_DELAY);
 8002a44:	2352      	movs	r3, #82	; 0x52
 8002a46:	b299      	uxth	r1, r3
 8002a48:	f107 020c 	add.w	r2, r7, #12
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2302      	movs	r3, #2
 8002a54:	4803      	ldr	r0, [pc, #12]	; (8002a64 <tcs34725_i2c_write8+0x3c>)
 8002a56:	f001 fc55 	bl	8004304 <HAL_I2C_Master_Transmit>
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000284 	.word	0x20000284

08002a68 <tcs34725_set_time_integration>:
// SET TCS34725 TIME INTEGRATION
void tcs34725_set_time_integration(tcs34725IntegrationTime_t intTime)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
	//if (!_tcs34725Initialized) tcs32725_init();
	 /* Update the timing register */
	tcs34725_i2c_write8(TCS34725_ATIME, intTime);
 8002a72:	2201      	movs	r2, #1
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7ff ffd5 	bl	8002a28 <tcs34725_i2c_write8>
	 /* Update value placeholders */
	_tcs34725IntegrationTime = intTime;
 8002a7e:	4a03      	ldr	r2, [pc, #12]	; (8002a8c <tcs34725_set_time_integration+0x24>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	7013      	strb	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200002d8 	.word	0x200002d8

08002a90 <tcs34725_set_gain>:

void tcs34725_set_gain(tcs34725Gain_t gain)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
	//if (!_tcs34725Initialized) tcs32725_init();
/* Update the timing register */
	tcs34725_i2c_write8(TCS34725_CONTROL, gain);
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7ff ffc1 	bl	8002a28 <tcs34725_i2c_write8>
/* Update value placeholders */
	_tcs34725Gain = gain;
 8002aa6:	4a03      	ldr	r2, [pc, #12]	; (8002ab4 <tcs34725_set_gain+0x24>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	7013      	strb	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200002d9 	.word	0x200002d9

08002ab8 <tcs34725_get_RGBC_Data>:
///
/*
 * GET (or read) RGBC data values (get with to bytes)
 */
void tcs34725_get_RGBC_Data(uint16_t *rValue, uint16_t *gValue, uint16_t *bValue, uint16_t *cValue)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
 // if (!_tcs34725Initialized) tcs32725_init();
  *rValue = tcs34725_i2c_read16(REG_RDATAL);
 8002ac6:	2316      	movs	r3, #22
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff7b 	bl	80029c4 <tcs34725_i2c_read16>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	801a      	strh	r2, [r3, #0]
  *gValue = tcs34725_i2c_read16(REG_GDATAL);
 8002ad6:	2318      	movs	r3, #24
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff73 	bl	80029c4 <tcs34725_i2c_read16>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	801a      	strh	r2, [r3, #0]
  *bValue = tcs34725_i2c_read16(REG_BDATAL);
 8002ae6:	231a      	movs	r3, #26
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff6b 	bl	80029c4 <tcs34725_i2c_read16>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	801a      	strh	r2, [r3, #0]
  *cValue = tcs34725_i2c_read16(REG_CDATAL);
 8002af6:	2314      	movs	r3, #20
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff63 	bl	80029c4 <tcs34725_i2c_read16>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	801a      	strh	r2, [r3, #0]
  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime)
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <tcs34725_get_RGBC_Data+0xb8>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2bff      	cmp	r3, #255	; 0xff
 8002b0c:	d012      	beq.n	8002b34 <tcs34725_get_RGBC_Data+0x7c>
 8002b0e:	2bff      	cmp	r3, #255	; 0xff
 8002b10:	dc29      	bgt.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
 8002b12:	2bf6      	cmp	r3, #246	; 0xf6
 8002b14:	d012      	beq.n	8002b3c <tcs34725_get_RGBC_Data+0x84>
 8002b16:	2bf6      	cmp	r3, #246	; 0xf6
 8002b18:	dc25      	bgt.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
 8002b1a:	2beb      	cmp	r3, #235	; 0xeb
 8002b1c:	d012      	beq.n	8002b44 <tcs34725_get_RGBC_Data+0x8c>
 8002b1e:	2beb      	cmp	r3, #235	; 0xeb
 8002b20:	dc21      	bgt.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
 8002b22:	2bd5      	cmp	r3, #213	; 0xd5
 8002b24:	d012      	beq.n	8002b4c <tcs34725_get_RGBC_Data+0x94>
 8002b26:	2bd5      	cmp	r3, #213	; 0xd5
 8002b28:	dc1d      	bgt.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <tcs34725_get_RGBC_Data+0xa4>
 8002b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b30:	d010      	beq.n	8002b54 <tcs34725_get_RGBC_Data+0x9c>
      break;
    case TCS34725_INTEGRATIONTIME_700MS:
      HAL_Delay(700);
      break;
  }
}
 8002b32:	e018      	b.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(3);
 8002b34:	2003      	movs	r0, #3
 8002b36:	f000 fb33 	bl	80031a0 <HAL_Delay>
      break;
 8002b3a:	e014      	b.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(24);
 8002b3c:	2018      	movs	r0, #24
 8002b3e:	f000 fb2f 	bl	80031a0 <HAL_Delay>
      break;
 8002b42:	e010      	b.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(50);
 8002b44:	2032      	movs	r0, #50	; 0x32
 8002b46:	f000 fb2b 	bl	80031a0 <HAL_Delay>
      break;
 8002b4a:	e00c      	b.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(101);
 8002b4c:	2065      	movs	r0, #101	; 0x65
 8002b4e:	f000 fb27 	bl	80031a0 <HAL_Delay>
      break;
 8002b52:	e008      	b.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(154);
 8002b54:	209a      	movs	r0, #154	; 0x9a
 8002b56:	f000 fb23 	bl	80031a0 <HAL_Delay>
      break;
 8002b5a:	e004      	b.n	8002b66 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(700);
 8002b5c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002b60:	f000 fb1e 	bl	80031a0 <HAL_Delay>
      break;
 8002b64:	bf00      	nop
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200002d8 	.word	0x200002d8

08002b74 <tcs34725_get_RGB_Values>:
//GET R or G or B real VALUE
void tcs34725_get_RGB_Values(float *redColor, float *greenColor, float *blueColor)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
	uint16_t redValue = 0, greenValue = 0, blueValue = 0, clearValue = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	82fb      	strh	r3, [r7, #22]
 8002b84:	2300      	movs	r3, #0
 8002b86:	82bb      	strh	r3, [r7, #20]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	827b      	strh	r3, [r7, #18]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	823b      	strh	r3, [r7, #16]
	//
	tcs32725_init();
 8002b90:	f7ff fef2 	bl	8002978 <tcs32725_init>
	//
	tcs34725_get_RGBC_Data(&redValue, &greenValue, &blueValue, &clearValue);
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	f107 0212 	add.w	r2, r7, #18
 8002b9c:	f107 0114 	add.w	r1, r7, #20
 8002ba0:	f107 0016 	add.w	r0, r7, #22
 8002ba4:	f7ff ff88 	bl	8002ab8 <tcs34725_get_RGBC_Data>

	// Division by zero
	if (clearValue == 0)
 8002ba8:	8a3b      	ldrh	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <tcs34725_get_RGB_Values+0x54>
	{
		*redColor = 0;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
		*greenColor = 0;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
		*blueColor = 0;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
		*redColor = (float)redValue / clearValue * 255.0;
		*greenColor = (float)greenValue / clearValue * 255.0;
		*blueColor = (float)blueValue / clearValue * 255.0;
	}

}
 8002bc6:	e044      	b.n	8002c52 <tcs34725_get_RGB_Values+0xde>
		*redColor = (float)redValue / clearValue * 255.0;
 8002bc8:	8afb      	ldrh	r3, [r7, #22]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe f89a 	bl	8000d04 <__aeabi_ui2f>
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	8a3b      	ldrh	r3, [r7, #16]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f899 	bl	8000d0c <__aeabi_i2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4620      	mov	r0, r4
 8002be0:	f7fe f99c 	bl	8000f1c <__aeabi_fdiv>
 8002be4:	4603      	mov	r3, r0
 8002be6:	491d      	ldr	r1, [pc, #116]	; (8002c5c <tcs34725_get_RGB_Values+0xe8>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe f8e3 	bl	8000db4 <__aeabi_fmul>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	601a      	str	r2, [r3, #0]
		*greenColor = (float)greenValue / clearValue * 255.0;
 8002bf6:	8abb      	ldrh	r3, [r7, #20]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe f883 	bl	8000d04 <__aeabi_ui2f>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	8a3b      	ldrh	r3, [r7, #16]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f882 	bl	8000d0c <__aeabi_i2f>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f7fe f985 	bl	8000f1c <__aeabi_fdiv>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4911      	ldr	r1, [pc, #68]	; (8002c5c <tcs34725_get_RGB_Values+0xe8>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f8cc 	bl	8000db4 <__aeabi_fmul>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	601a      	str	r2, [r3, #0]
		*blueColor = (float)blueValue / clearValue * 255.0;
 8002c24:	8a7b      	ldrh	r3, [r7, #18]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f86c 	bl	8000d04 <__aeabi_ui2f>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	8a3b      	ldrh	r3, [r7, #16]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe f86b 	bl	8000d0c <__aeabi_i2f>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7fe f96e 	bl	8000f1c <__aeabi_fdiv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4906      	ldr	r1, [pc, #24]	; (8002c5c <tcs34725_get_RGB_Values+0xe8>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe f8b5 	bl	8000db4 <__aeabi_fmul>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	437f0000 	.word	0x437f0000

08002c60 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c66:	463b      	mov	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_TIM7_Init+0x60>)
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <MX_TIM7_Init+0x64>)
 8002c72:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32-1;
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <MX_TIM7_Init+0x60>)
 8002c76:	221f      	movs	r2, #31
 8002c78:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_TIM7_Init+0x60>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_TIM7_Init+0x60>)
 8002c82:	2209      	movs	r2, #9
 8002c84:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_TIM7_Init+0x60>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <MX_TIM7_Init+0x60>)
 8002c8e:	f004 fd1f 	bl	80076d0 <HAL_TIM_Base_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002c98:	f7ff fcd2 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_TIM7_Init+0x60>)
 8002caa:	f004 ff13 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002cb4:	f7ff fcc4 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200002dc 	.word	0x200002dc
 8002cc4:	40001400 	.word	0x40001400

08002cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_TIM_Base_MspInit+0x44>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_TIM_Base_MspInit+0x48>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <HAL_TIM_Base_MspInit+0x48>)
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_TIM_Base_MspInit+0x48>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	202c      	movs	r0, #44	; 0x2c
 8002cf8:	f000 ff6d 	bl	8003bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cfc:	202c      	movs	r0, #44	; 0x2c
 8002cfe:	f000 ff86 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40001400 	.word	0x40001400
 8002d10:	40023800 	.word	0x40023800

08002d14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <MX_USART1_UART_Init+0x50>)
 8002d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_USART1_UART_Init+0x4c>)
 8002d4c:	f004 ff20 	bl	8007b90 <HAL_UART_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d56:	f7ff fc73 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000031c 	.word	0x2000031c
 8002d64:	40013800 	.word	0x40013800

08002d68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <MX_USART2_UART_Init+0x50>)
 8002d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d8e:	220c      	movs	r2, #12
 8002d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <MX_USART2_UART_Init+0x4c>)
 8002da0:	f004 fef6 	bl	8007b90 <HAL_UART_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002daa:	f7ff fc49 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000035c 	.word	0x2000035c
 8002db8:	40004400 	.word	0x40004400

08002dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a36      	ldr	r2, [pc, #216]	; (8002eb4 <HAL_UART_MspInit+0xf8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d131      	bne.n	8002e42 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b33      	ldr	r3, [pc, #204]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	61d3      	str	r3, [r2, #28]
 8002e02:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e20:	2307      	movs	r3, #7
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4824      	ldr	r0, [pc, #144]	; (8002ebc <HAL_UART_MspInit+0x100>)
 8002e2c:	f000 ff66 	bl	8003cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	2025      	movs	r0, #37	; 0x25
 8002e36:	f000 fece 	bl	8003bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e3a:	2025      	movs	r0, #37	; 0x25
 8002e3c:	f000 fee7 	bl	8003c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e40:	e034      	b.n	8002eac <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_UART_MspInit+0x104>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d12f      	bne.n	8002eac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e56:	6253      	str	r3, [r2, #36]	; 0x24
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	61d3      	str	r3, [r2, #28]
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_UART_MspInit+0xfc>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	4809      	ldr	r0, [pc, #36]	; (8002ebc <HAL_UART_MspInit+0x100>)
 8002e98:	f000 ff30 	bl	8003cfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2026      	movs	r0, #38	; 0x26
 8002ea2:	f000 fe98 	bl	8003bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ea6:	2026      	movs	r0, #38	; 0x26
 8002ea8:	f000 feb1 	bl	8003c0e <HAL_NVIC_EnableIRQ>
}
 8002eac:	bf00      	nop
 8002eae:	3730      	adds	r7, #48	; 0x30
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40004400 	.word	0x40004400

08002ec4 <commandMode>:
#include "usart.h"



void commandMode()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"\nPasser en mode Commande\n\n", 27);
 8002eca:	221b      	movs	r2, #27
 8002ecc:	4918      	ldr	r1, [pc, #96]	; (8002f30 <commandMode+0x6c>)
 8002ece:	4819      	ldr	r0, [pc, #100]	; (8002f34 <commandMode+0x70>)
 8002ed0:	f004 ffea 	bl	8007ea8 <HAL_UART_Transmit_IT>

	//Go into Command mode
		char CMD_MODE[4] = {'$','$','$'};
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <commandMode+0x74>)
 8002ed6:	60fb      	str	r3, [r7, #12]
		uint8_t ok[5] = {0};
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	2300      	movs	r3, #0
 8002ede:	723b      	strb	r3, [r7, #8]

		HAL_Delay(250);
 8002ee0:	20fa      	movs	r0, #250	; 0xfa
 8002ee2:	f000 f95d 	bl	80031a0 <HAL_Delay>

		do{
			HAL_UART_Transmit(&huart1, (uint8_t *)CMD_MODE, strlen(CMD_MODE), 5000);
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd f948 	bl	8000180 <strlen>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	f107 010c 	add.w	r1, r7, #12
 8002ef8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002efc:	480f      	ldr	r0, [pc, #60]	; (8002f3c <commandMode+0x78>)
 8002efe:	f004 fe94 	bl	8007c2a <HAL_UART_Transmit>
		 	HAL_UART_Receive(&huart1, (uint8_t *)ok, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME);
 8002f02:	1d39      	adds	r1, r7, #4
 8002f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f08:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f0c:	480b      	ldr	r0, [pc, #44]	; (8002f3c <commandMode+0x78>)
 8002f0e:	f004 ff25 	bl	8007d5c <HAL_UART_Receive>
		  }while (strstr((char *) ok, "CMD")==NULL);
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	490a      	ldr	r1, [pc, #40]	; (8002f40 <commandMode+0x7c>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f006 fa6e 	bl	80093f8 <strstr>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0e1      	beq.n	8002ee6 <commandMode+0x22>
		HAL_Delay(250);
 8002f22:	20fa      	movs	r0, #250	; 0xfa
 8002f24:	f000 f93c 	bl	80031a0 <HAL_Delay>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	0800d238 	.word	0x0800d238
 8002f34:	2000035c 	.word	0x2000035c
 8002f38:	00242424 	.word	0x00242424
 8002f3c:	2000031c 	.word	0x2000031c
 8002f40:	0800d254 	.word	0x0800d254

08002f44 <sendCommand>:


//void sendCommand(char * CMD, char * ACK,uint8_t timeout , uint8_t * ANS)
void sendCommand(char * CMD, char * ACK, int * ANS)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
	int i =0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
	int k = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
	//uint8_t TIME_Delay;

	if(strstr(CMD, "scan")==NULL)
 8002f58:	4922      	ldr	r1, [pc, #136]	; (8002fe4 <sendCommand+0xa0>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f006 fa4c 	bl	80093f8 <strstr>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <sendCommand+0x28>
		k = 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e001      	b.n	8002f70 <sendCommand+0x2c>
	else
		k = 10;
 8002f6c:	230a      	movs	r3, #10
 8002f6e:	613b      	str	r3, [r7, #16]

	memset(ANS,0,MAX_RCP_LEN);
 8002f70:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f74:	2100      	movs	r1, #0
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f005 fb6c 	bl	8008654 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		 i++;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
	 		 HAL_Delay(200);
 8002f82:	20c8      	movs	r0, #200	; 0xc8
 8002f84:	f000 f90c 	bl	80031a0 <HAL_Delay>

	 		 HAL_UART_Transmit_IT(&huart1,  (uint8_t *)CMD, strlen(CMD));
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7fd f8f9 	bl	8000180 <strlen>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <sendCommand+0xa4>)
 8002f98:	f004 ff86 	bl	8007ea8 <HAL_UART_Transmit_IT>
	 		 HAL_UART_Receive(&huart1,  (uint8_t *)ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*k);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	480e      	ldr	r0, [pc, #56]	; (8002fe8 <sendCommand+0xa4>)
 8002fae:	f004 fed5 	bl	8007d5c <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)ANS, strlen(ANS));
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd f8e4 	bl	8000180 <strlen>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	480a      	ldr	r0, [pc, #40]	; (8002fec <sendCommand+0xa8>)
 8002fc2:	f004 ff71 	bl	8007ea8 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <2);
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f006 fa15 	bl	80093f8 <strstr>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <sendCommand+0x96>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	ddd0      	ble.n	8002f7c <sendCommand+0x38>

 }
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	0800d258 	.word	0x0800d258
 8002fe8:	2000031c 	.word	0x2000031c
 8002fec:	2000035c 	.word	0x2000035c

08002ff0 <sendData>:

void sendData(char * DATA, char * ACK, int * ANS)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
	int i =0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

	memset(ANS,0,MAX_RCP_LEN);
 8003000:	f242 7210 	movw	r2, #10000	; 0x2710
 8003004:	2100      	movs	r1, #0
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f005 fb24 	bl	8008654 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		i++;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
	 		HAL_Delay(200);
 8003012:	20c8      	movs	r0, #200	; 0xc8
 8003014:	f000 f8c4 	bl	80031a0 <HAL_Delay>
	 		 HAL_UART_Transmit(&huart1,  (uint8_t *)DATA, strlen(DATA), DEFAULT_WAIT_RESPONSE_TIME*10);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7fd f8b1 	bl	8000180 <strlen>
 800301e:	4603      	mov	r3, r0
 8003020:	b29a      	uxth	r2, r3
 8003022:	f242 7310 	movw	r3, #10000	; 0x2710
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	4811      	ldr	r0, [pc, #68]	; (8003070 <sendData+0x80>)
 800302a:	f004 fdfe 	bl	8007c2a <HAL_UART_Transmit>
	 		 HAL_UART_Receive(&huart1,  (uint8_t *)ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*10);
 800302e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003032:	f242 7210 	movw	r2, #10000	; 0x2710
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	480d      	ldr	r0, [pc, #52]	; (8003070 <sendData+0x80>)
 800303a:	f004 fe8f 	bl	8007d5c <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)ANS, strlen((char *)ANS));
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd f89e 	bl	8000180 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	b29b      	uxth	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4809      	ldr	r0, [pc, #36]	; (8003074 <sendData+0x84>)
 800304e:	f004 ff2b 	bl	8007ea8 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <2);
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f006 f9cf 	bl	80093f8 <strstr>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <sendData+0x76>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	ddd2      	ble.n	800300c <sendData+0x1c>

 }
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000031c 	.word	0x2000031c
 8003074:	2000035c 	.word	0x2000035c

08003078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003078:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800307a:	e003      	b.n	8003084 <LoopCopyDataInit>

0800307c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800307e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003080:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003082:	3104      	adds	r1, #4

08003084 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003084:	480a      	ldr	r0, [pc, #40]	; (80030b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003088:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800308a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800308c:	d3f6      	bcc.n	800307c <CopyDataInit>
  ldr r2, =_sbss
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003090:	e002      	b.n	8003098 <LoopFillZerobss>

08003092 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003094:	f842 3b04 	str.w	r3, [r2], #4

08003098 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800309a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800309c:	d3f9      	bcc.n	8003092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800309e:	f7ff fc25 	bl	80028ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a2:	f005 fab3 	bl	800860c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030a6:	f7fe fed3 	bl	8001e50 <main>
  bx lr
 80030aa:	4770      	bx	lr
  ldr r3, =_sidata
 80030ac:	0800d80c 	.word	0x0800d80c
  ldr r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80030b8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80030bc:	200003b0 	.word	0x200003b0

080030c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030c0:	e7fe      	b.n	80030c0 <ADC1_IRQHandler>

080030c2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 fd77 	bl	8003bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030d2:	2000      	movs	r0, #0
 80030d4:	f000 f80e 	bl	80030f4 <HAL_InitTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	e001      	b.n	80030e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030e4:	f7ff fab2 	bl	800264c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030e8:	79fb      	ldrb	r3, [r7, #7]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_InitTick+0x68>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d022      	beq.n	800314e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <HAL_InitTick+0x6c>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_InitTick+0x68>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003114:	fbb1 f3f3 	udiv	r3, r1, r3
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fd92 	bl	8003c46 <HAL_SYSTICK_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10f      	bne.n	8003148 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d809      	bhi.n	8003142 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800312e:	2200      	movs	r2, #0
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	f000 fd4e 	bl	8003bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_InitTick+0x70>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e007      	b.n	8003152 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e004      	b.n	8003152 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e001      	b.n	8003152 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000008 	.word	0x20000008
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_IncTick+0x1c>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_IncTick+0x20>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4413      	add	r3, r2
 8003176:	4a03      	ldr	r2, [pc, #12]	; (8003184 <HAL_IncTick+0x1c>)
 8003178:	6013      	str	r3, [r2, #0]
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	2000039c 	.word	0x2000039c
 8003188:	20000008 	.word	0x20000008

0800318c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return uwTick;
 8003190:	4b02      	ldr	r3, [pc, #8]	; (800319c <HAL_GetTick+0x10>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	2000039c 	.word	0x2000039c

080031a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff fff0 	bl	800318c <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d004      	beq.n	80031c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_Delay+0x40>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4413      	add	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031c4:	bf00      	nop
 80031c6:	f7ff ffe1 	bl	800318c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d8f7      	bhi.n	80031c6 <HAL_Delay+0x26>
  {
  }
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000008 	.word	0x20000008

080031e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e127      	b.n	8003454 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d115      	bne.n	800323e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003220:	4b8e      	ldr	r3, [pc, #568]	; (800345c <HAL_ADC_Init+0x278>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a8d      	ldr	r2, [pc, #564]	; (800345c <HAL_ADC_Init+0x278>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	4b8b      	ldr	r3, [pc, #556]	; (800345c <HAL_ADC_Init+0x278>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fe fb33 	bl	80018a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 80ff 	bne.w	800344a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003254:	f023 0302 	bic.w	r3, r3, #2
 8003258:	f043 0202 	orr.w	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8003260:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <HAL_ADC_Init+0x27c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	497c      	ldr	r1, [pc, #496]	; (8003460 <HAL_ADC_Init+0x27c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800327a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	4619      	mov	r1, r3
 8003284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003288:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800329e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80032a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ac:	4619      	mov	r1, r3
 80032ae:	2302      	movs	r3, #2
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80032c6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80032c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ca:	4313      	orrs	r3, r2
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80032de:	4313      	orrs	r3, r2
 80032e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e2:	4313      	orrs	r3, r2
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d04f      	beq.n	8003394 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fa:	4313      	orrs	r3, r2
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8003306:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6912      	ldr	r2, [r2, #16]
 800330c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003310:	d003      	beq.n	800331a <HAL_ADC_Init+0x136>
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6912      	ldr	r2, [r2, #16]
 8003316:	2a01      	cmp	r2, #1
 8003318:	d102      	bne.n	8003320 <HAL_ADC_Init+0x13c>
 800331a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800331e:	e000      	b.n	8003322 <HAL_ADC_Init+0x13e>
 8003320:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8003322:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8003324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003326:	4313      	orrs	r3, r2
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d125      	bne.n	8003380 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d114      	bne.n	8003368 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	3b01      	subs	r3, #1
 8003344:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003348:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	fa92 f2a2 	rbit	r2, r2
 8003350:	617a      	str	r2, [r7, #20]
  return result;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	fab2 f282 	clz	r2, r2
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	4093      	lsls	r3, r2
 800335c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	4313      	orrs	r3, r2
 8003364:	633b      	str	r3, [r7, #48]	; 0x30
 8003366:	e00b      	b.n	8003380 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_ADC_Init+0x280>)
 8003388:	4013      	ands	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003390:	430b      	orrs	r3, r1
 8003392:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_ADC_Init+0x284>)
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b0:	d003      	beq.n	80033ba <HAL_ADC_Init+0x1d6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d119      	bne.n	80033ee <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80033ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	fa92 f2a2 	rbit	r2, r2
 80033d6:	60fa      	str	r2, [r7, #12]
  return result;
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	fab2 f282 	clz	r2, r2
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	fa03 f202 	lsl.w	r2, r3, r2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
 80033ec:	e007      	b.n	80033fe <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_ADC_Init+0x288>)
 8003406:	4013      	ands	r3, r2
 8003408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340a:	429a      	cmp	r2, r3
 800340c:	d10b      	bne.n	8003426 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	f023 0303 	bic.w	r3, r3, #3
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	64da      	str	r2, [r3, #76]	; 0x4c
 8003424:	e014      	b.n	8003450 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	f023 0312 	bic.w	r3, r3, #18
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003448:	e002      	b.n	8003450 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003450:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003454:	4618      	mov	r0, r3
 8003456:	3738      	adds	r7, #56	; 0x38
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	40012700 	.word	0x40012700
 8003464:	fcfc16ff 	.word	0xfcfc16ff
 8003468:	c0fff189 	.word	0xc0fff189
 800346c:	bf80fffe 	.word	0xbf80fffe

08003470 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_ADC_Start+0x1a>
 8003486:	2302      	movs	r3, #2
 8003488:	e04e      	b.n	8003528 <HAL_ADC_Start+0xb8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa4e 	bl	8003934 <ADC_Enable>
 8003498:	4603      	mov	r3, r0
 800349a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d141      	bne.n	8003526 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d106      	bne.n	80034f0 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	f023 0206 	bic.w	r2, r3, #6
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003506:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d107      	bne.n	8003526 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003524:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d113      	bne.n	8003576 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	d10b      	bne.n	8003576 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e061      	b.n	800363a <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003576:	f7ff fe09 	bl	800318c <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800357c:	e01a      	b.n	80035b4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d016      	beq.n	80035b4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_ADC_PollForConversion+0x6c>
 800358c:	f7ff fdfe 	bl	800318c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d20b      	bcs.n	80035b4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e042      	b.n	800363a <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0dd      	beq.n	800357e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0212 	mvn.w	r2, #18
 80035d2:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d124      	bne.n	8003638 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11f      	bne.n	8003638 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003610:	2b00      	cmp	r3, #0
 8003612:	d111      	bne.n	8003638 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x20>
 8003678:	2302      	movs	r3, #2
 800367a:	e14f      	b.n	800391c <HAL_ADC_ConfigChannel+0x2c0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b06      	cmp	r3, #6
 800368a:	d81c      	bhi.n	80036c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3b05      	subs	r3, #5
 800369e:	221f      	movs	r2, #31
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	4019      	ands	r1, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	3b05      	subs	r3, #5
 80036b8:	fa00 f203 	lsl.w	r2, r0, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
 80036c4:	e07e      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d81c      	bhi.n	8003708 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	3b23      	subs	r3, #35	; 0x23
 80036e0:	221f      	movs	r2, #31
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	4019      	ands	r1, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	3b23      	subs	r3, #35	; 0x23
 80036fa:	fa00 f203 	lsl.w	r2, r0, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c
 8003706:	e05d      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b12      	cmp	r3, #18
 800370e:	d81c      	bhi.n	800374a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	3b41      	subs	r3, #65	; 0x41
 8003722:	221f      	movs	r2, #31
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	4019      	ands	r1, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	3b41      	subs	r3, #65	; 0x41
 800373c:	fa00 f203 	lsl.w	r2, r0, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
 8003748:	e03c      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b18      	cmp	r3, #24
 8003750:	d81c      	bhi.n	800378c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	3b5f      	subs	r3, #95	; 0x5f
 8003764:	221f      	movs	r2, #31
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	4019      	ands	r1, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	3b5f      	subs	r3, #95	; 0x5f
 800377e:	fa00 f203 	lsl.w	r2, r0, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	635a      	str	r2, [r3, #52]	; 0x34
 800378a:	e01b      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	3b7d      	subs	r3, #125	; 0x7d
 800379e:	221f      	movs	r2, #31
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	4019      	ands	r1, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	3b7d      	subs	r3, #125	; 0x7d
 80037b8:	fa00 f203 	lsl.w	r2, r0, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d81a      	bhi.n	8003802 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6959      	ldr	r1, [r3, #20]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	2207      	movs	r2, #7
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	4019      	ands	r1, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6898      	ldr	r0, [r3, #8]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	fa00 f203 	lsl.w	r2, r0, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	e05d      	b.n	80038be <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b13      	cmp	r3, #19
 8003808:	d81c      	bhi.n	8003844 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6919      	ldr	r1, [r3, #16]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	3b1e      	subs	r3, #30
 800381c:	2207      	movs	r2, #7
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	4019      	ands	r1, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6898      	ldr	r0, [r3, #8]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	3b1e      	subs	r3, #30
 8003836:	fa00 f203 	lsl.w	r2, r0, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	611a      	str	r2, [r3, #16]
 8003842:	e03c      	b.n	80038be <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b1d      	cmp	r3, #29
 800384a:	d81c      	bhi.n	8003886 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68d9      	ldr	r1, [r3, #12]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	3b3c      	subs	r3, #60	; 0x3c
 800385e:	2207      	movs	r2, #7
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	4019      	ands	r1, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6898      	ldr	r0, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	3b3c      	subs	r3, #60	; 0x3c
 8003878:	fa00 f203 	lsl.w	r2, r0, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	e01b      	b.n	80038be <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	3b5a      	subs	r3, #90	; 0x5a
 8003898:	2207      	movs	r2, #7
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	4019      	ands	r1, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6898      	ldr	r0, [r3, #8]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4413      	add	r3, r2
 80038b0:	3b5a      	subs	r3, #90	; 0x5a
 80038b2:	fa00 f203 	lsl.w	r2, r0, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d003      	beq.n	80038ce <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80038ca:	2b11      	cmp	r3, #17
 80038cc:	d121      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_ADC_ConfigChannel+0x2cc>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11b      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_ADC_ConfigChannel+0x2cc>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <HAL_ADC_ConfigChannel+0x2cc>)
 80038e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038e4:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d111      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <HAL_ADC_ConfigChannel+0x2d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a0f      	ldr	r2, [pc, #60]	; (8003930 <HAL_ADC_ConfigChannel+0x2d4>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	0c9a      	lsrs	r2, r3, #18
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003904:	e002      	b.n	800390c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3b01      	subs	r3, #1
 800390a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f9      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40012700 	.word	0x40012700
 800392c:	20000000 	.word	0x20000000
 8003930:	431bde83 	.word	0x431bde83

08003934 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d03c      	beq.n	80039cc <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <ADC_Enable+0xa4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <ADC_Enable+0xa8>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	0c9a      	lsrs	r2, r3, #18
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003976:	e002      	b.n	800397e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3b01      	subs	r3, #1
 800397c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f9      	bne.n	8003978 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8003984:	f7ff fc02 	bl	800318c <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800398a:	e018      	b.n	80039be <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800398c:	f7ff fbfe 	bl	800318c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d911      	bls.n	80039be <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e007      	b.n	80039ce <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d1df      	bne.n	800398c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000000 	.word	0x20000000
 80039dc:	431bde83 	.word	0x431bde83

080039e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039fc:	4013      	ands	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a12:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	60d3      	str	r3, [r2, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <__NVIC_GetPriorityGrouping+0x18>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	f003 0307 	and.w	r3, r3, #7
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	db0b      	blt.n	8003a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	4906      	ldr	r1, [pc, #24]	; (8003a78 <__NVIC_EnableIRQ+0x34>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2001      	movs	r0, #1
 8003a66:	fa00 f202 	lsl.w	r2, r0, r2
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100

08003a7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	db12      	blt.n	8003ab4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	490a      	ldr	r1, [pc, #40]	; (8003ac0 <__NVIC_DisableIRQ+0x44>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa2:	3320      	adds	r3, #32
 8003aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aa8:	f3bf 8f4f 	dsb	sy
}
 8003aac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003aae:	f3bf 8f6f 	isb	sy
}
 8003ab2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e100 	.word	0xe000e100

08003ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db0a      	blt.n	8003aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	490c      	ldr	r1, [pc, #48]	; (8003b10 <__NVIC_SetPriority+0x4c>)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aec:	e00a      	b.n	8003b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4908      	ldr	r1, [pc, #32]	; (8003b14 <__NVIC_SetPriority+0x50>)
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3b04      	subs	r3, #4
 8003afc:	0112      	lsls	r2, r2, #4
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	761a      	strb	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000e100 	.word	0xe000e100
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f1c3 0307 	rsb	r3, r3, #7
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf28      	it	cs
 8003b36:	2304      	movcs	r3, #4
 8003b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d902      	bls.n	8003b48 <NVIC_EncodePriority+0x30>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3b03      	subs	r3, #3
 8003b46:	e000      	b.n	8003b4a <NVIC_EncodePriority+0x32>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b60:	f04f 31ff 	mov.w	r1, #4294967295
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	4313      	orrs	r3, r2
         );
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b8c:	d301      	bcc.n	8003b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00f      	b.n	8003bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <SysTick_Config+0x40>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b9a:	210f      	movs	r1, #15
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	f7ff ff90 	bl	8003ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <SysTick_Config+0x40>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003baa:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <SysTick_Config+0x40>)
 8003bac:	2207      	movs	r2, #7
 8003bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	e000e010 	.word	0xe000e010

08003bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff09 	bl	80039e0 <__NVIC_SetPriorityGrouping>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	4603      	mov	r3, r0
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be8:	f7ff ff1e 	bl	8003a28 <__NVIC_GetPriorityGrouping>
 8003bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff ff90 	bl	8003b18 <NVIC_EncodePriority>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff5f 	bl	8003ac4 <__NVIC_SetPriority>
}
 8003c06:	bf00      	nop
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	4603      	mov	r3, r0
 8003c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff11 	bl	8003a44 <__NVIC_EnableIRQ>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4603      	mov	r3, r0
 8003c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff1f 	bl	8003a7c <__NVIC_DisableIRQ>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ff94 	bl	8003b7c <SysTick_Config>
 8003c54:	4603      	mov	r3, r0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d005      	beq.n	8003c82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e029      	b.n	8003cd6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 020e 	bic.w	r2, r2, #14
 8003c90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f003 021c 	and.w	r2, r3, #28
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
    }
  }
  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cee:	b2db      	uxtb	r3, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d12:	e160      	b.n	8003fd6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8152 	beq.w	8003fd0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d00b      	beq.n	8003d4c <HAL_GPIO_Init+0x50>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d007      	beq.n	8003d4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d40:	2b11      	cmp	r3, #17
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b12      	cmp	r3, #18
 8003d4a:	d130      	bne.n	8003dae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003d82:	2201      	movs	r2, #1
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0201 	and.w	r2, r3, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0xf2>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b12      	cmp	r3, #18
 8003dec:	d123      	bne.n	8003e36 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	6939      	ldr	r1, [r7, #16]
 8003e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0203 	and.w	r2, r3, #3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80ac 	beq.w	8003fd0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e78:	4b5e      	ldr	r3, [pc, #376]	; (8003ff4 <HAL_GPIO_Init+0x2f8>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	4a5d      	ldr	r2, [pc, #372]	; (8003ff4 <HAL_GPIO_Init+0x2f8>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6213      	str	r3, [r2, #32]
 8003e84:	4b5b      	ldr	r3, [pc, #364]	; (8003ff4 <HAL_GPIO_Init+0x2f8>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e90:	4a59      	ldr	r2, [pc, #356]	; (8003ff8 <HAL_GPIO_Init+0x2fc>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a51      	ldr	r2, [pc, #324]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d025      	beq.n	8003f08 <HAL_GPIO_Init+0x20c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a50      	ldr	r2, [pc, #320]	; (8004000 <HAL_GPIO_Init+0x304>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01f      	beq.n	8003f04 <HAL_GPIO_Init+0x208>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a4f      	ldr	r2, [pc, #316]	; (8004004 <HAL_GPIO_Init+0x308>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d019      	beq.n	8003f00 <HAL_GPIO_Init+0x204>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a4e      	ldr	r2, [pc, #312]	; (8004008 <HAL_GPIO_Init+0x30c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_GPIO_Init+0x200>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a4d      	ldr	r2, [pc, #308]	; (800400c <HAL_GPIO_Init+0x310>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00d      	beq.n	8003ef8 <HAL_GPIO_Init+0x1fc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a4c      	ldr	r2, [pc, #304]	; (8004010 <HAL_GPIO_Init+0x314>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d007      	beq.n	8003ef4 <HAL_GPIO_Init+0x1f8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a4b      	ldr	r2, [pc, #300]	; (8004014 <HAL_GPIO_Init+0x318>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <HAL_GPIO_Init+0x1f4>
 8003eec:	2306      	movs	r3, #6
 8003eee:	e00c      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003ef0:	2307      	movs	r3, #7
 8003ef2:	e00a      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003ef4:	2305      	movs	r3, #5
 8003ef6:	e008      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	e006      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003efc:	2303      	movs	r3, #3
 8003efe:	e004      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e002      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	f002 0203 	and.w	r2, r2, #3
 8003f10:	0092      	lsls	r2, r2, #2
 8003f12:	4093      	lsls	r3, r2
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f1a:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <HAL_GPIO_Init+0x2fc>)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	3302      	adds	r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f28:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f4c:	4a32      	ldr	r2, [pc, #200]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f52:	4b31      	ldr	r3, [pc, #196]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f76:	4a28      	ldr	r2, [pc, #160]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f7c:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_GPIO_Init+0x31c>)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f ae97 	bne.w	8003d14 <HAL_GPIO_Init+0x18>
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40020000 	.word	0x40020000
 8004000:	40020400 	.word	0x40020400
 8004004:	40020800 	.word	0x40020800
 8004008:	40020c00 	.word	0x40020c00
 800400c:	40021000 	.word	0x40021000
 8004010:	40021400 	.word	0x40021400
 8004014:	40021800 	.word	0x40021800
 8004018:	40010400 	.word	0x40010400

0800401c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800402c:	787b      	ldrb	r3, [r7, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004038:	e003      	b.n	8004042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	041a      	lsls	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	619a      	str	r2, [r3, #24]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fb56 	bl	800171c <HAL_GPIO_EXTI_Callback>
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e12b      	b.n	80042e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fcfc 	bl	8001aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040e0:	f003 fa6e 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 80040e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4a81      	ldr	r2, [pc, #516]	; (80042f0 <HAL_I2C_Init+0x274>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d807      	bhi.n	8004100 <HAL_I2C_Init+0x84>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a80      	ldr	r2, [pc, #512]	; (80042f4 <HAL_I2C_Init+0x278>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	bf94      	ite	ls
 80040f8:	2301      	movls	r3, #1
 80040fa:	2300      	movhi	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e006      	b.n	800410e <HAL_I2C_Init+0x92>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a7d      	ldr	r2, [pc, #500]	; (80042f8 <HAL_I2C_Init+0x27c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	bf94      	ite	ls
 8004108:	2301      	movls	r3, #1
 800410a:	2300      	movhi	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0e7      	b.n	80042e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a78      	ldr	r2, [pc, #480]	; (80042fc <HAL_I2C_Init+0x280>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0c9b      	lsrs	r3, r3, #18
 8004120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a6a      	ldr	r2, [pc, #424]	; (80042f0 <HAL_I2C_Init+0x274>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d802      	bhi.n	8004150 <HAL_I2C_Init+0xd4>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3301      	adds	r3, #1
 800414e:	e009      	b.n	8004164 <HAL_I2C_Init+0xe8>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	4a69      	ldr	r2, [pc, #420]	; (8004300 <HAL_I2C_Init+0x284>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	3301      	adds	r3, #1
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	495c      	ldr	r1, [pc, #368]	; (80042f0 <HAL_I2C_Init+0x274>)
 8004180:	428b      	cmp	r3, r1
 8004182:	d819      	bhi.n	80041b8 <HAL_I2C_Init+0x13c>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e59      	subs	r1, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004198:	400b      	ands	r3, r1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_I2C_Init+0x138>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e59      	subs	r1, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b2:	e051      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 80041b4:	2304      	movs	r3, #4
 80041b6:	e04f      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d111      	bne.n	80041e4 <HAL_I2C_Init+0x168>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1e58      	subs	r0, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6859      	ldr	r1, [r3, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	440b      	add	r3, r1
 80041ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e012      	b.n	800420a <HAL_I2C_Init+0x18e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e58      	subs	r0, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	0099      	lsls	r1, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fa:	3301      	adds	r3, #1
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Init+0x196>
 800420e:	2301      	movs	r3, #1
 8004210:	e022      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10e      	bne.n	8004238 <HAL_I2C_Init+0x1bc>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1e58      	subs	r0, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6859      	ldr	r1, [r3, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	440b      	add	r3, r1
 8004228:	fbb0 f3f3 	udiv	r3, r0, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004236:	e00f      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1e58      	subs	r0, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	0099      	lsls	r1, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	fbb0 f3f3 	udiv	r3, r0, r3
 800424e:	3301      	adds	r3, #1
 8004250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	6809      	ldr	r1, [r1, #0]
 800425c:	4313      	orrs	r3, r2
 800425e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6911      	ldr	r1, [r2, #16]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68d2      	ldr	r2, [r2, #12]
 8004292:	4311      	orrs	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	430b      	orrs	r3, r1
 800429a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	000186a0 	.word	0x000186a0
 80042f4:	001e847f 	.word	0x001e847f
 80042f8:	003d08ff 	.word	0x003d08ff
 80042fc:	431bde83 	.word	0x431bde83
 8004300:	10624dd3 	.word	0x10624dd3

08004304 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	460b      	mov	r3, r1
 8004312:	817b      	strh	r3, [r7, #10]
 8004314:	4613      	mov	r3, r2
 8004316:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7fe ff38 	bl	800318c <HAL_GetTick>
 800431c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	f040 80e0 	bne.w	80044ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2319      	movs	r3, #25
 8004332:	2201      	movs	r2, #1
 8004334:	4970      	ldr	r1, [pc, #448]	; (80044f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f002 f9de 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	e0d3      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_I2C_Master_Transmit+0x50>
 8004350:	2302      	movs	r3, #2
 8004352:	e0cc      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d007      	beq.n	800437a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2221      	movs	r2, #33	; 0x21
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2210      	movs	r2, #16
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	893a      	ldrh	r2, [r7, #8]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a50      	ldr	r2, [pc, #320]	; (80044fc <HAL_I2C_Master_Transmit+0x1f8>)
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043bc:	8979      	ldrh	r1, [r7, #10]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f001 ffa0 	bl	8006308 <I2C_MasterRequestWrite>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e08d      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043e8:	e066      	b.n	80044b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	6a39      	ldr	r1, [r7, #32]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f002 fa58 	bl	80068a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d107      	bne.n	8004412 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06b      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d11b      	bne.n	800448c <HAL_I2C_Master_Transmit+0x188>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d017      	beq.n	800448c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	6a39      	ldr	r1, [r7, #32]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f002 fa48 	bl	8006926 <I2C_WaitOnBTFFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d107      	bne.n	80044b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e01a      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d194      	bne.n	80043ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	00100002 	.word	0x00100002
 80044fc:	ffff0000 	.word	0xffff0000

08004500 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	; 0x30
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	461a      	mov	r2, r3
 800450c:	460b      	mov	r3, r1
 800450e:	817b      	strh	r3, [r7, #10]
 8004510:	4613      	mov	r3, r2
 8004512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004514:	f7fe fe3a 	bl	800318c <HAL_GetTick>
 8004518:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b20      	cmp	r3, #32
 8004524:	f040 820b 	bne.w	800493e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2319      	movs	r3, #25
 800452e:	2201      	movs	r2, #1
 8004530:	497c      	ldr	r1, [pc, #496]	; (8004724 <HAL_I2C_Master_Receive+0x224>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f002 f8e0 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	e1fe      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_I2C_Master_Receive+0x50>
 800454c:	2302      	movs	r3, #2
 800454e:	e1f7      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d007      	beq.n	8004576 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2222      	movs	r2, #34	; 0x22
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2210      	movs	r2, #16
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	893a      	ldrh	r2, [r7, #8]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4a5c      	ldr	r2, [pc, #368]	; (8004728 <HAL_I2C_Master_Receive+0x228>)
 80045b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045b8:	8979      	ldrh	r1, [r7, #10]
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f001 ff24 	bl	800640c <I2C_MasterRequestRead>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e1b8      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d113      	bne.n	80045fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e18c      	b.n	8004918 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	2b01      	cmp	r3, #1
 8004604:	d11b      	bne.n	800463e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e16c      	b.n	8004918 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	2b02      	cmp	r3, #2
 8004644:	d11b      	bne.n	800467e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004654:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	e14c      	b.n	8004918 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800468c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046a4:	e138      	b.n	8004918 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	f200 80f1 	bhi.w	8004892 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d123      	bne.n	8004700 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f002 f9a5 	bl	8006a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e139      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046fe:	e10b      	b.n	8004918 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	2b02      	cmp	r3, #2
 8004706:	d14e      	bne.n	80047a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	2200      	movs	r2, #0
 8004710:	4906      	ldr	r1, [pc, #24]	; (800472c <HAL_I2C_Master_Receive+0x22c>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f001 fff0 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d008      	beq.n	8004730 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e10e      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
 8004722:	bf00      	nop
 8004724:	00100002 	.word	0x00100002
 8004728:	ffff0000 	.word	0xffff0000
 800472c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a4:	e0b8      	b.n	8004918 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	2200      	movs	r2, #0
 80047ae:	4966      	ldr	r1, [pc, #408]	; (8004948 <HAL_I2C_Master_Receive+0x448>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f001 ffa1 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0bf      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2200      	movs	r2, #0
 800480a:	494f      	ldr	r1, [pc, #316]	; (8004948 <HAL_I2C_Master_Receive+0x448>)
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f001 ff73 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e091      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004890:	e042      	b.n	8004918 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f002 f8b8 	bl	8006a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e04c      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d118      	bne.n	8004918 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	f47f aec2 	bne.w	80046a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	; 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	00010004 	.word	0x00010004

0800494c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	460b      	mov	r3, r1
 800495a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800495c:	f7fe fc16 	bl	800318c <HAL_GetTick>
 8004960:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004962:	2301      	movs	r3, #1
 8004964:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b20      	cmp	r3, #32
 8004970:	f040 8111 	bne.w	8004b96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2319      	movs	r3, #25
 800497a:	2201      	movs	r2, #1
 800497c:	4988      	ldr	r1, [pc, #544]	; (8004ba0 <HAL_I2C_IsDeviceReady+0x254>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f001 feba 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
 800498c:	e104      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_I2C_IsDeviceReady+0x50>
 8004998:	2302      	movs	r3, #2
 800499a:	e0fd      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x24c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d007      	beq.n	80049c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2224      	movs	r2, #36	; 0x24
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a70      	ldr	r2, [pc, #448]	; (8004ba4 <HAL_I2C_IsDeviceReady+0x258>)
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f001 fe78 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1c:	d103      	bne.n	8004a26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e0b6      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a3a:	f7fe fba7 	bl	800318c <HAL_GetTick>
 8004a3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a64:	bf0c      	ite	eq
 8004a66:	2301      	moveq	r3, #1
 8004a68:	2300      	movne	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a6e:	e025      	b.n	8004abc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a70:	f7fe fb8c 	bl	800318c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <HAL_I2C_IsDeviceReady+0x13a>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	22a0      	movs	r2, #160	; 0xa0
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2ba0      	cmp	r3, #160	; 0xa0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_I2C_IsDeviceReady+0x188>
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_I2C_IsDeviceReady+0x188>
 8004ace:	7dbb      	ldrb	r3, [r7, #22]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0cd      	beq.n	8004a70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d129      	bne.n	8004b3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2319      	movs	r3, #25
 8004b16:	2201      	movs	r2, #1
 8004b18:	4921      	ldr	r1, [pc, #132]	; (8004ba0 <HAL_I2C_IsDeviceReady+0x254>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f001 fdec 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e036      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e02c      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2319      	movs	r3, #25
 8004b5e:	2201      	movs	r2, #1
 8004b60:	490f      	ldr	r1, [pc, #60]	; (8004ba0 <HAL_I2C_IsDeviceReady+0x254>)
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f001 fdc8 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e012      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	f4ff af32 	bcc.w	80049e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	00100002 	.word	0x00100002
 8004ba4:	ffff0000 	.word	0xffff0000

08004ba8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d003      	beq.n	8004be0 <HAL_I2C_EV_IRQHandler+0x38>
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	f040 80bd 	bne.w	8004d5a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <HAL_I2C_EV_IRQHandler+0x6e>
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c00:	d003      	beq.n	8004c0a <HAL_I2C_EV_IRQHandler+0x62>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c08:	d101      	bne.n	8004c0e <HAL_I2C_EV_IRQHandler+0x66>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_I2C_EV_IRQHandler+0x68>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f000 812e 	beq.w	8004e72 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00c      	beq.n	8004c3a <HAL_I2C_EV_IRQHandler+0x92>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	0a5b      	lsrs	r3, r3, #9
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d006      	beq.n	8004c3a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f001 ff71 	bl	8006b14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fd58 	bl	80056e8 <I2C_Master_SB>
 8004c38:	e08e      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	08db      	lsrs	r3, r3, #3
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_I2C_EV_IRQHandler+0xb2>
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fdcd 	bl	80057f2 <I2C_Master_ADD10>
 8004c58:	e07e      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <HAL_I2C_EV_IRQHandler+0xd2>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	0a5b      	lsrs	r3, r3, #9
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fde6 	bl	8005844 <I2C_Master_ADDR>
 8004c78:	e06e      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d037      	beq.n	8004cf6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c94:	f000 80ef 	beq.w	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	09db      	lsrs	r3, r3, #7
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00f      	beq.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f9e5 	bl	800508c <I2C_MasterTransmit_TXE>
 8004cc2:	e049      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80d2 	beq.w	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	0a5b      	lsrs	r3, r3, #9
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80cb 	beq.w	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d103      	bne.n	8004cee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa6c 	bl	80051c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cec:	e0c3      	b.n	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fad0 	bl	8005294 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cf4:	e0bf      	b.n	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d04:	f000 80b7 	beq.w	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00f      	beq.n	8004d34 <HAL_I2C_EV_IRQHandler+0x18c>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	0a9b      	lsrs	r3, r3, #10
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <HAL_I2C_EV_IRQHandler+0x18c>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb40 	bl	80053b2 <I2C_MasterReceive_RXNE>
 8004d32:	e011      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	089b      	lsrs	r3, r3, #2
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 809a 	beq.w	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	0a5b      	lsrs	r3, r3, #9
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8093 	beq.w	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fbdf 	bl	8005514 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d56:	e08e      	b.n	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004d58:	e08d      	b.n	8004e76 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	e007      	b.n	8004d7c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d012      	beq.n	8004dae <HAL_I2C_EV_IRQHandler+0x206>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	0a5b      	lsrs	r3, r3, #9
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 ff98 	bl	8005cdc <I2C_Slave_ADDR>
 8004dac:	e066      	b.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x226>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	0a5b      	lsrs	r3, r3, #9
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 ffcc 	bl	8005d64 <I2C_Slave_STOPF>
 8004dcc:	e056      	b.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dce:	7bbb      	ldrb	r3, [r7, #14]
 8004dd0:	2b21      	cmp	r3, #33	; 0x21
 8004dd2:	d002      	beq.n	8004dda <HAL_I2C_EV_IRQHandler+0x232>
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	2b29      	cmp	r3, #41	; 0x29
 8004dd8:	d125      	bne.n	8004e26 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00f      	beq.n	8004e06 <HAL_I2C_EV_IRQHandler+0x25e>
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	0a9b      	lsrs	r3, r3, #10
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <HAL_I2C_EV_IRQHandler+0x25e>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	089b      	lsrs	r3, r3, #2
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 feb0 	bl	8005b64 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e04:	e039      	b.n	8004e7a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d033      	beq.n	8004e7a <HAL_I2C_EV_IRQHandler+0x2d2>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	0a5b      	lsrs	r3, r3, #9
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02d      	beq.n	8004e7a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fedd 	bl	8005bde <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e24:	e029      	b.n	8004e7a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00f      	beq.n	8004e52 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	0a9b      	lsrs	r3, r3, #10
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fee7 	bl	8005c1e <I2C_SlaveReceive_RXNE>
 8004e50:	e014      	b.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	089b      	lsrs	r3, r3, #2
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00e      	beq.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	0a5b      	lsrs	r3, r3, #9
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 ff15 	bl	8005c9a <I2C_SlaveReceive_BTF>
 8004e70:	e004      	b.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e7a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b08a      	sub	sp, #40	; 0x28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ece:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	0a5b      	lsrs	r3, r3, #9
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <HAL_I2C_ER_IRQHandler+0x78>
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	f043 0302 	orr.w	r3, r3, #2
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004ef8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	0a9b      	lsrs	r3, r3, #10
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03f      	beq.n	8004f86 <HAL_I2C_ER_IRQHandler+0x104>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d039      	beq.n	8004f86 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004f12:	7efb      	ldrb	r3, [r7, #27]
 8004f14:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004f2c:	7ebb      	ldrb	r3, [r7, #26]
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d112      	bne.n	8004f58 <HAL_I2C_ER_IRQHandler+0xd6>
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10f      	bne.n	8004f58 <HAL_I2C_ER_IRQHandler+0xd6>
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b21      	cmp	r3, #33	; 0x21
 8004f3c:	d008      	beq.n	8004f50 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	2b29      	cmp	r3, #41	; 0x29
 8004f42:	d005      	beq.n	8004f50 <HAL_I2C_ER_IRQHandler+0xce>
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	2b28      	cmp	r3, #40	; 0x28
 8004f48:	d106      	bne.n	8004f58 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b21      	cmp	r3, #33	; 0x21
 8004f4e:	d103      	bne.n	8004f58 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 f837 	bl	8005fc4 <I2C_Slave_AF>
 8004f56:	e016      	b.n	8004f86 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f60:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	f043 0304 	orr.w	r3, r3, #4
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f6a:	7efb      	ldrb	r3, [r7, #27]
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d002      	beq.n	8004f76 <HAL_I2C_ER_IRQHandler+0xf4>
 8004f70:	7efb      	ldrb	r3, [r7, #27]
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d107      	bne.n	8004f86 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	0adb      	lsrs	r3, r3, #11
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <HAL_I2C_ER_IRQHandler+0x12e>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	f043 0308 	orr.w	r3, r3, #8
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004fae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 f86e 	bl	80060a4 <I2C_ITError>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr

08005006 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
 8005024:	4613      	mov	r3, r2
 8005026:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d150      	bne.n	8005154 <I2C_MasterTransmit_TXE+0xc8>
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b21      	cmp	r3, #33	; 0x21
 80050b6:	d14d      	bne.n	8005154 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d01d      	beq.n	80050fa <I2C_MasterTransmit_TXE+0x6e>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d01a      	beq.n	80050fa <I2C_MasterTransmit_TXE+0x6e>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ca:	d016      	beq.n	80050fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2211      	movs	r2, #17
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff6c 	bl	8004fd0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050f8:	e060      	b.n	80051bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005108:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005118:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d107      	bne.n	8005144 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff ff81 	bl	8005044 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005142:	e03b      	b.n	80051bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff3f 	bl	8004fd0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005152:	e033      	b.n	80051bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b21      	cmp	r3, #33	; 0x21
 8005158:	d005      	beq.n	8005166 <I2C_MasterTransmit_TXE+0xda>
 800515a:	7bbb      	ldrb	r3, [r7, #14]
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d12d      	bne.n	80051bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b22      	cmp	r3, #34	; 0x22
 8005164:	d12a      	bne.n	80051bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d108      	bne.n	8005182 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005180:	e01c      	b.n	80051bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d103      	bne.n	8005196 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f880 	bl	8005294 <I2C_MemoryTransmit_TXE_BTF>
}
 8005194:	e012      	b.n	80051bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051ba:	e7ff      	b.n	80051bc <I2C_MasterTransmit_TXE+0x130>
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b21      	cmp	r3, #33	; 0x21
 80051dc:	d156      	bne.n	800528c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d012      	beq.n	800520e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800520c:	e03e      	b.n	800528c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d01d      	beq.n	8005250 <I2C_MasterTransmit_BTF+0x8c>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b20      	cmp	r3, #32
 8005218:	d01a      	beq.n	8005250 <I2C_MasterTransmit_BTF+0x8c>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005220:	d016      	beq.n	8005250 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005230:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2211      	movs	r2, #17
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fec1 	bl	8004fd0 <HAL_I2C_MasterTxCpltCallback>
}
 800524e:	e01d      	b.n	800528c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800525e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fea2 	bl	8004fd0 <HAL_I2C_MasterTxCpltCallback>
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11d      	bne.n	80052e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10b      	bne.n	80052cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80052ca:	e06e      	b.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	121b      	asrs	r3, r3, #8
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052e6:	e060      	b.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10b      	bne.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005306:	e050      	b.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	2b02      	cmp	r3, #2
 800530e:	d14c      	bne.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b22      	cmp	r3, #34	; 0x22
 8005314:	d108      	bne.n	8005328 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	e040      	b.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	2b21      	cmp	r3, #33	; 0x21
 8005336:	d112      	bne.n	800535e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	781a      	ldrb	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800535c:	e025      	b.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d120      	bne.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b21      	cmp	r3, #33	; 0x21
 800536c:	d11d      	bne.n	80053aa <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800537c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fe4d 	bl	8005044 <HAL_I2C_MemTxCpltCallback>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b22      	cmp	r3, #34	; 0x22
 80053c4:	f040 80a2 	bne.w	800550c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d921      	bls.n	800541a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b03      	cmp	r3, #3
 8005404:	f040 8082 	bne.w	800550c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005418:	e078      	b.n	800550c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	2b02      	cmp	r3, #2
 8005420:	d074      	beq.n	800550c <I2C_MasterReceive_RXNE+0x15a>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d002      	beq.n	800542e <I2C_MasterReceive_RXNE+0x7c>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d16e      	bne.n	800550c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 faba 	bl	80069a8 <I2C_WaitOnSTOPRequestThroughIT>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d142      	bne.n	80054c0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005458:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d10a      	bne.n	80054aa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fdd7 	bl	8005056 <HAL_I2C_MemRxCpltCallback>
}
 80054a8:	e030      	b.n	800550c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2212      	movs	r2, #18
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fd92 	bl	8004fe2 <HAL_I2C_MasterRxCpltCallback>
}
 80054be:	e025      	b.n	800550c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fdae 	bl	8005068 <HAL_I2C_ErrorCallback>
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b04      	cmp	r3, #4
 800552a:	d11b      	bne.n	8005564 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005562:	e0bd      	b.n	80056e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d129      	bne.n	80055c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b04      	cmp	r3, #4
 8005582:	d00a      	beq.n	800559a <I2C_MasterReceive_BTF+0x86>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d007      	beq.n	800559a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055c0:	e08e      	b.n	80056e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d176      	bne.n	80056ba <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d002      	beq.n	80055d8 <I2C_MasterReceive_BTF+0xc4>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d108      	bne.n	80055ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e019      	b.n	800561e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d002      	beq.n	80055f6 <I2C_MasterReceive_BTF+0xe2>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d108      	bne.n	8005608 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e00a      	b.n	800561e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b10      	cmp	r3, #16
 800560c:	d007      	beq.n	800561e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005678:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d10a      	bne.n	80056a4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fcda 	bl	8005056 <HAL_I2C_MemRxCpltCallback>
}
 80056a2:	e01d      	b.n	80056e0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2212      	movs	r2, #18
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fc95 	bl	8004fe2 <HAL_I2C_MasterRxCpltCallback>
}
 80056b8:	e012      	b.n	80056e0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d117      	bne.n	800572c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005714:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005716:	e067      	b.n	80057e8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	b2da      	uxtb	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	611a      	str	r2, [r3, #16]
}
 800572a:	e05d      	b.n	80057e8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005734:	d133      	bne.n	800579e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b21      	cmp	r3, #33	; 0x21
 8005740:	d109      	bne.n	8005756 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	b2db      	uxtb	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005752:	611a      	str	r2, [r3, #16]
 8005754:	e008      	b.n	8005768 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	b2da      	uxtb	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <I2C_Master_SB+0x92>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	2b00      	cmp	r3, #0
 8005780:	d032      	beq.n	80057e8 <I2C_Master_SB+0x100>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02d      	beq.n	80057e8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579a:	605a      	str	r2, [r3, #4]
}
 800579c:	e024      	b.n	80057e8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10e      	bne.n	80057c4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	11db      	asrs	r3, r3, #7
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 0306 	and.w	r3, r3, #6
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	f063 030f 	orn	r3, r3, #15
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	611a      	str	r2, [r3, #16]
}
 80057c2:	e011      	b.n	80057e8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d10d      	bne.n	80057e8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	11db      	asrs	r3, r3, #7
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 0306 	and.w	r3, r3, #6
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f063 030e 	orn	r3, r3, #14
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <I2C_Master_ADD10+0x24>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	2b00      	cmp	r3, #0
 8005814:	d011      	beq.n	800583a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <I2C_Master_ADD10+0x38>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005838:	605a      	str	r2, [r3, #4]
    }
  }
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005844:	b480      	push	{r7}
 8005846:	b091      	sub	sp, #68	; 0x44
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b22      	cmp	r3, #34	; 0x22
 800586c:	f040 8169 	bne.w	8005b42 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10f      	bne.n	8005898 <I2C_Master_ADDR+0x54>
 8005878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d10b      	bne.n	8005898 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	633b      	str	r3, [r7, #48]	; 0x30
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	633b      	str	r3, [r7, #48]	; 0x30
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	e160      	b.n	8005b5a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11d      	bne.n	80058dc <I2C_Master_ADDR+0x98>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058a8:	d118      	bne.n	80058dc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058aa:	2300      	movs	r3, #0
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ce:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50
 80058da:	e13e      	b.n	8005b5a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d113      	bne.n	800590e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058e6:	2300      	movs	r3, #0
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e115      	b.n	8005b3a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 808a 	bne.w	8005a2e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005920:	d137      	bne.n	8005992 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005930:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005940:	d113      	bne.n	800596a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005950:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	e0e7      	b.n	8005b3a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596a:	2300      	movs	r3, #0
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e0d3      	b.n	8005b3a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2b08      	cmp	r3, #8
 8005996:	d02e      	beq.n	80059f6 <I2C_Master_ADDR+0x1b2>
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	2b20      	cmp	r3, #32
 800599c:	d02b      	beq.n	80059f6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	2b12      	cmp	r3, #18
 80059a2:	d102      	bne.n	80059aa <I2C_Master_ADDR+0x166>
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d125      	bne.n	80059f6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d00e      	beq.n	80059ce <I2C_Master_ADDR+0x18a>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d00b      	beq.n	80059ce <I2C_Master_ADDR+0x18a>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d008      	beq.n	80059ce <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e007      	b.n	80059de <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	e0a1      	b.n	8005b3a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a04:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e085      	b.n	8005b3a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d14d      	bne.n	8005ad4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d016      	beq.n	8005a6c <I2C_Master_ADDR+0x228>
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d013      	beq.n	8005a6c <I2C_Master_ADDR+0x228>
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d010      	beq.n	8005a6c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a58:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e007      	b.n	8005a7c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a7a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8a:	d117      	bne.n	8005abc <I2C_Master_ADDR+0x278>
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a92:	d00b      	beq.n	8005aac <I2C_Master_ADDR+0x268>
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d008      	beq.n	8005aac <I2C_Master_ADDR+0x268>
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d005      	beq.n	8005aac <I2C_Master_ADDR+0x268>
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d002      	beq.n	8005aac <I2C_Master_ADDR+0x268>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d107      	bne.n	8005abc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005aba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	e032      	b.n	8005b3a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ae2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af2:	d117      	bne.n	8005b24 <I2C_Master_ADDR+0x2e0>
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005afa:	d00b      	beq.n	8005b14 <I2C_Master_ADDR+0x2d0>
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d008      	beq.n	8005b14 <I2C_Master_ADDR+0x2d0>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d005      	beq.n	8005b14 <I2C_Master_ADDR+0x2d0>
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d002      	beq.n	8005b14 <I2C_Master_ADDR+0x2d0>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d107      	bne.n	8005b24 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b40:	e00b      	b.n	8005b5a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
}
 8005b58:	e7ff      	b.n	8005b5a <I2C_Master_ADDR+0x316>
 8005b5a:	bf00      	nop
 8005b5c:	3744      	adds	r7, #68	; 0x44
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d02b      	beq.n	8005bd6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d114      	bne.n	8005bd6 <I2C_SlaveTransmit_TXE+0x72>
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b29      	cmp	r3, #41	; 0x29
 8005bb0:	d111      	bne.n	8005bd6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2221      	movs	r2, #33	; 0x21
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2228      	movs	r2, #40	; 0x28
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fa0f 	bl	8004ff4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d011      	beq.n	8005c14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d02c      	beq.n	8005c92 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d114      	bne.n	8005c92 <I2C_SlaveReceive_RXNE+0x74>
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6c:	d111      	bne.n	8005c92 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2222      	movs	r2, #34	; 0x22
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2228      	movs	r2, #40	; 0x28
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff f9ba 	bl	8005006 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d012      	beq.n	8005cd2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cf6:	2b28      	cmp	r3, #40	; 0x28
 8005cf8:	d127      	bne.n	8005d4a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d08:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	089b      	lsrs	r3, r3, #2
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	09db      	lsrs	r3, r3, #7
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	81bb      	strh	r3, [r7, #12]
 8005d2c:	e002      	b.n	8005d34 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d3c:	89ba      	ldrh	r2, [r7, #12]
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff f968 	bl	8005018 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d48:	e008      	b.n	8005d5c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f06f 0202 	mvn.w	r2, #2
 8005d52:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005d84:	2300      	movs	r3, #0
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc0:	d172      	bne.n	8005ea8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b22      	cmp	r3, #34	; 0x22
 8005dc6:	d002      	beq.n	8005dce <I2C_Slave_STOPF+0x6a>
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b2a      	cmp	r3, #42	; 0x2a
 8005dcc:	d135      	bne.n	8005e3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0204 	orr.w	r2, r3, #4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fd ff6a 	bl	8003ce0 <HAL_DMA_GetState>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d049      	beq.n	8005ea6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	4a69      	ldr	r2, [pc, #420]	; (8005fbc <I2C_Slave_STOPF+0x258>)
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fd ff1d 	bl	8003c5e <HAL_DMA_Abort_IT>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03d      	beq.n	8005ea6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e38:	e035      	b.n	8005ea6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f043 0204 	orr.w	r2, r3, #4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fd ff34 	bl	8003ce0 <HAL_DMA_GetState>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d014      	beq.n	8005ea8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	4a4e      	ldr	r2, [pc, #312]	; (8005fbc <I2C_Slave_STOPF+0x258>)
 8005e84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fd fee7 	bl	8003c5e <HAL_DMA_Abort_IT>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
 8005ea4:	e000      	b.n	8005ea8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ea6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d03e      	beq.n	8005f30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d112      	bne.n	8005ee6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d112      	bne.n	8005f1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f043 0204 	orr.w	r2, r3, #4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f8b3 	bl	80060a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f3e:	e039      	b.n	8005fb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b2a      	cmp	r3, #42	; 0x2a
 8005f44:	d109      	bne.n	8005f5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2228      	movs	r2, #40	; 0x28
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff f856 	bl	8005006 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b28      	cmp	r3, #40	; 0x28
 8005f64:	d111      	bne.n	8005f8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <I2C_Slave_STOPF+0x25c>)
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff f855 	bl	8005032 <HAL_I2C_ListenCpltCallback>
}
 8005f88:	e014      	b.n	8005fb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	2b22      	cmp	r3, #34	; 0x22
 8005f90:	d002      	beq.n	8005f98 <I2C_Slave_STOPF+0x234>
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b22      	cmp	r3, #34	; 0x22
 8005f96:	d10d      	bne.n	8005fb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff f829 	bl	8005006 <HAL_I2C_SlaveRxCpltCallback>
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	080065a9 	.word	0x080065a9
 8005fc0:	ffff0000 	.word	0xffff0000

08005fc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d002      	beq.n	8005fe6 <I2C_Slave_AF+0x22>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d129      	bne.n	800603a <I2C_Slave_AF+0x76>
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b28      	cmp	r3, #40	; 0x28
 8005fea:	d126      	bne.n	800603a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <I2C_Slave_AF+0xdc>)
 8005ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006000:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800600a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fe fffd 	bl	8005032 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006038:	e02e      	b.n	8006098 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b21      	cmp	r3, #33	; 0x21
 800603e:	d126      	bne.n	800608e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a17      	ldr	r2, [pc, #92]	; (80060a0 <I2C_Slave_AF+0xdc>)
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2221      	movs	r2, #33	; 0x21
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800606a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006074:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fe ffb4 	bl	8004ff4 <HAL_I2C_SlaveTxCpltCallback>
}
 800608c:	e004      	b.n	8006098 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006096:	615a      	str	r2, [r3, #20]
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	ffff0000 	.word	0xffff0000

080060a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d002      	beq.n	80060c8 <I2C_ITError+0x24>
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d10a      	bne.n	80060de <I2C_ITError+0x3a>
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b22      	cmp	r3, #34	; 0x22
 80060cc:	d107      	bne.n	80060de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060e4:	2b28      	cmp	r3, #40	; 0x28
 80060e6:	d107      	bne.n	80060f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2228      	movs	r2, #40	; 0x28
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060f6:	e015      	b.n	8006124 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006106:	d00a      	beq.n	800611e <I2C_ITError+0x7a>
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b60      	cmp	r3, #96	; 0x60
 800610c:	d007      	beq.n	800611e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006132:	d162      	bne.n	80061fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006142:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d020      	beq.n	8006194 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	4a6a      	ldr	r2, [pc, #424]	; (8006300 <I2C_ITError+0x25c>)
 8006158:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	4618      	mov	r0, r3
 8006160:	f7fd fd7d 	bl	8003c5e <HAL_DMA_Abort_IT>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8089 	beq.w	800627e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800618e:	4610      	mov	r0, r2
 8006190:	4798      	blx	r3
 8006192:	e074      	b.n	800627e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	4a59      	ldr	r2, [pc, #356]	; (8006300 <I2C_ITError+0x25c>)
 800619a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd fd5c 	bl	8003c5e <HAL_DMA_Abort_IT>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d068      	beq.n	800627e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d10b      	bne.n	80061d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
 80061f8:	e041      	b.n	800627e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b60      	cmp	r3, #96	; 0x60
 8006204:	d125      	bne.n	8006252 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d10b      	bne.n	800623a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fe ff15 	bl	800507a <HAL_I2C_AbortCpltCallback>
 8006250:	e015      	b.n	800627e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d10b      	bne.n	8006278 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fe fef5 	bl	8005068 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10e      	bne.n	80062ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d113      	bne.n	80062f8 <I2C_ITError+0x254>
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b28      	cmp	r3, #40	; 0x28
 80062d4:	d110      	bne.n	80062f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a0a      	ldr	r2, [pc, #40]	; (8006304 <I2C_ITError+0x260>)
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fe fe9d 	bl	8005032 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	080065a9 	.word	0x080065a9
 8006304:	ffff0000 	.word	0xffff0000

08006308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	460b      	mov	r3, r1
 8006316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b08      	cmp	r3, #8
 8006322:	d006      	beq.n	8006332 <I2C_MasterRequestWrite+0x2a>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d003      	beq.n	8006332 <I2C_MasterRequestWrite+0x2a>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006330:	d108      	bne.n	8006344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e00b      	b.n	800635c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	2b12      	cmp	r3, #18
 800634a:	d107      	bne.n	800635c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800635a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f9c5 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d103      	bne.n	800638c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800638a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e035      	b.n	80063fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006398:	d108      	bne.n	80063ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800639a:	897b      	ldrh	r3, [r7, #10]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	461a      	mov	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063a8:	611a      	str	r2, [r3, #16]
 80063aa:	e01b      	b.n	80063e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063ac:	897b      	ldrh	r3, [r7, #10]
 80063ae:	11db      	asrs	r3, r3, #7
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0306 	and.w	r3, r3, #6
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f063 030f 	orn	r3, r3, #15
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	490e      	ldr	r1, [pc, #56]	; (8006404 <I2C_MasterRequestWrite+0xfc>)
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f9eb 	bl	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e010      	b.n	80063fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063da:	897b      	ldrh	r3, [r7, #10]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4907      	ldr	r1, [pc, #28]	; (8006408 <I2C_MasterRequestWrite+0x100>)
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f9db 	bl	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	00010008 	.word	0x00010008
 8006408:	00010002 	.word	0x00010002

0800640c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	460b      	mov	r3, r1
 800641a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006430:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d006      	beq.n	8006446 <I2C_MasterRequestRead+0x3a>
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d003      	beq.n	8006446 <I2C_MasterRequestRead+0x3a>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006444:	d108      	bne.n	8006458 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e00b      	b.n	8006470 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	2b11      	cmp	r3, #17
 800645e:	d107      	bne.n	8006470 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f93b 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00d      	beq.n	80064a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006496:	d103      	bne.n	80064a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e079      	b.n	8006598 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ac:	d108      	bne.n	80064c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064ae:	897b      	ldrh	r3, [r7, #10]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	611a      	str	r2, [r3, #16]
 80064be:	e05f      	b.n	8006580 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064c0:	897b      	ldrh	r3, [r7, #10]
 80064c2:	11db      	asrs	r3, r3, #7
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f003 0306 	and.w	r3, r3, #6
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f063 030f 	orn	r3, r3, #15
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4930      	ldr	r1, [pc, #192]	; (80065a0 <I2C_MasterRequestRead+0x194>)
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f961 	bl	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e054      	b.n	8006598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064ee:	897b      	ldrh	r3, [r7, #10]
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4929      	ldr	r1, [pc, #164]	; (80065a4 <I2C_MasterRequestRead+0x198>)
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f951 	bl	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e044      	b.n	8006598 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006532:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f8d9 	bl	80066f8 <I2C_WaitOnFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655a:	d103      	bne.n	8006564 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006562:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e017      	b.n	8006598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006568:	897b      	ldrh	r3, [r7, #10]
 800656a:	11db      	asrs	r3, r3, #7
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0306 	and.w	r3, r3, #6
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f063 030e 	orn	r3, r3, #14
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4907      	ldr	r1, [pc, #28]	; (80065a4 <I2C_MasterRequestRead+0x198>)
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f90d 	bl	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	00010008 	.word	0x00010008
 80065a4:	00010002 	.word	0x00010002

080065a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80065c2:	4b4b      	ldr	r3, [pc, #300]	; (80066f0 <I2C_DMAAbort+0x148>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	4a4a      	ldr	r2, [pc, #296]	; (80066f4 <I2C_DMAAbort+0x14c>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	0a1a      	lsrs	r2, r3, #8
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	00da      	lsls	r2, r3, #3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f043 0220 	orr.w	r2, r3, #32
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80065ee:	e00a      	b.n	8006606 <I2C_DMAAbort+0x5e>
    }
    count--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006604:	d0ea      	beq.n	80065dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	2200      	movs	r2, #0
 8006614:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	2200      	movs	r2, #0
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006634:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2200      	movs	r2, #0
 800663a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	2200      	movs	r2, #0
 800664a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	2200      	movs	r2, #0
 800665a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b60      	cmp	r3, #96	; 0x60
 8006676:	d10e      	bne.n	8006696 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2200      	movs	r2, #0
 800668c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800668e:	6978      	ldr	r0, [r7, #20]
 8006690:	f7fe fcf3 	bl	800507a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006694:	e027      	b.n	80066e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006696:	7cfb      	ldrb	r3, [r7, #19]
 8006698:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800669c:	2b28      	cmp	r3, #40	; 0x28
 800669e:	d117      	bne.n	80066d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2200      	movs	r2, #0
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2228      	movs	r2, #40	; 0x28
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066ce:	e007      	b.n	80066e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f7fe fcc1 	bl	8005068 <HAL_I2C_ErrorCallback>
}
 80066e6:	bf00      	nop
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000000 	.word	0x20000000
 80066f4:	14f8b589 	.word	0x14f8b589

080066f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	4613      	mov	r3, r2
 8006706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006708:	e025      	b.n	8006756 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d021      	beq.n	8006756 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006712:	f7fc fd3b 	bl	800318c <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d302      	bcc.n	8006728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d116      	bne.n	8006756 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f043 0220 	orr.w	r2, r3, #32
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e023      	b.n	800679e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	0c1b      	lsrs	r3, r3, #16
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d10d      	bne.n	800677c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	43da      	mvns	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4013      	ands	r3, r2
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	bf0c      	ite	eq
 8006772:	2301      	moveq	r3, #1
 8006774:	2300      	movne	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	e00c      	b.n	8006796 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	43da      	mvns	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	429a      	cmp	r2, r3
 800679a:	d0b6      	beq.n	800670a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067b4:	e051      	b.n	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c4:	d123      	bne.n	800680e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f043 0204 	orr.w	r2, r3, #4
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e046      	b.n	800689c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d021      	beq.n	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fc fcb9 	bl	800318c <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d116      	bne.n	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0220 	orr.w	r2, r3, #32
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e020      	b.n	800689c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	d10c      	bne.n	800687e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	43da      	mvns	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4013      	ands	r3, r2
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	bf14      	ite	ne
 8006876:	2301      	movne	r3, #1
 8006878:	2300      	moveq	r3, #0
 800687a:	b2db      	uxtb	r3, r3
 800687c:	e00b      	b.n	8006896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	43da      	mvns	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4013      	ands	r3, r2
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d18d      	bne.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068b0:	e02d      	b.n	800690e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f900 	bl	8006ab8 <I2C_IsAcknowledgeFailed>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e02d      	b.n	800691e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d021      	beq.n	800690e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fc fc5f 	bl	800318c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d116      	bne.n	800690e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e007      	b.n	800691e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d1ca      	bne.n	80068b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006932:	e02d      	b.n	8006990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f8bf 	bl	8006ab8 <I2C_IsAcknowledgeFailed>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e02d      	b.n	80069a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d021      	beq.n	8006990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694c:	f7fc fc1e 	bl	800318c <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	429a      	cmp	r2, r3
 800695a:	d302      	bcc.n	8006962 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d116      	bne.n	8006990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	f043 0220 	orr.w	r2, r3, #32
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e007      	b.n	80069a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b04      	cmp	r3, #4
 800699c:	d1ca      	bne.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80069b4:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	08db      	lsrs	r3, r3, #3
 80069ba:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	0a1a      	lsrs	r2, r3, #8
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f043 0220 	orr.w	r2, r3, #32
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e008      	b.n	80069f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f4:	d0e9      	beq.n	80069ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000000 	.word	0x20000000
 8006a08:	14f8b589 	.word	0x14f8b589

08006a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a18:	e042      	b.n	8006aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d119      	bne.n	8006a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0210 	mvn.w	r2, #16
 8006a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e029      	b.n	8006ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5c:	f7fc fb96 	bl	800318c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d302      	bcc.n	8006a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d116      	bne.n	8006aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e007      	b.n	8006ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d1b5      	bne.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ace:	d11b      	bne.n	8006b08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ad8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f043 0204 	orr.w	r2, r3, #4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b24:	d103      	bne.n	8006b2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b2c:	e007      	b.n	8006b3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b36:	d102      	bne.n	8006b3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e31d      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b5a:	4b94      	ldr	r3, [pc, #592]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b64:	4b91      	ldr	r3, [pc, #580]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d07b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d006      	beq.n	8006b8e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b0c      	cmp	r3, #12
 8006b84:	d10f      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x5e>
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8c:	d10b      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8e:	4b87      	ldr	r3, [pc, #540]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d06a      	beq.n	8006c70 <HAL_RCC_OscConfig+0x128>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d166      	bne.n	8006c70 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e2f7      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d106      	bne.n	8006bbc <HAL_RCC_OscConfig+0x74>
 8006bae:	4b7f      	ldr	r3, [pc, #508]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a7e      	ldr	r2, [pc, #504]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	e02d      	b.n	8006c18 <HAL_RCC_OscConfig+0xd0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10c      	bne.n	8006bde <HAL_RCC_OscConfig+0x96>
 8006bc4:	4b79      	ldr	r3, [pc, #484]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a78      	ldr	r2, [pc, #480]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	4b76      	ldr	r3, [pc, #472]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a75      	ldr	r2, [pc, #468]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e01c      	b.n	8006c18 <HAL_RCC_OscConfig+0xd0>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCC_OscConfig+0xb8>
 8006be6:	4b71      	ldr	r3, [pc, #452]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a70      	ldr	r2, [pc, #448]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b6e      	ldr	r3, [pc, #440]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e00b      	b.n	8006c18 <HAL_RCC_OscConfig+0xd0>
 8006c00:	4b6a      	ldr	r3, [pc, #424]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a69      	ldr	r2, [pc, #420]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	4b67      	ldr	r3, [pc, #412]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a66      	ldr	r2, [pc, #408]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d013      	beq.n	8006c48 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c20:	f7fc fab4 	bl	800318c <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c28:	f7fc fab0 	bl	800318c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b64      	cmp	r3, #100	; 0x64
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e2ad      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c3a:	4b5c      	ldr	r3, [pc, #368]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0xe0>
 8006c46:	e014      	b.n	8006c72 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c48:	f7fc faa0 	bl	800318c <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c50:	f7fc fa9c 	bl	800318c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b64      	cmp	r3, #100	; 0x64
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e299      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c62:	4b52      	ldr	r3, [pc, #328]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f0      	bne.n	8006c50 <HAL_RCC_OscConfig+0x108>
 8006c6e:	e000      	b.n	8006c72 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d05a      	beq.n	8006d34 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d005      	beq.n	8006c90 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b0c      	cmp	r3, #12
 8006c88:	d119      	bne.n	8006cbe <HAL_RCC_OscConfig+0x176>
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d116      	bne.n	8006cbe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c90:	4b46      	ldr	r3, [pc, #280]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x160>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d001      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e276      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca8:	4b40      	ldr	r3, [pc, #256]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	493d      	ldr	r1, [pc, #244]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cbc:	e03a      	b.n	8006d34 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d020      	beq.n	8006d08 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cc6:	4b3a      	ldr	r3, [pc, #232]	; (8006db0 <HAL_RCC_OscConfig+0x268>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ccc:	f7fc fa5e 	bl	800318c <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cd4:	f7fc fa5a 	bl	800318c <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e257      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ce6:	4b31      	ldr	r3, [pc, #196]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0f0      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	492a      	ldr	r1, [pc, #168]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	604b      	str	r3, [r1, #4]
 8006d06:	e015      	b.n	8006d34 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d08:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <HAL_RCC_OscConfig+0x268>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0e:	f7fc fa3d 	bl	800318c <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d14:	e008      	b.n	8006d28 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d16:	f7fc fa39 	bl	800318c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e236      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d28:	4b20      	ldr	r3, [pc, #128]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1f0      	bne.n	8006d16 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80b8 	beq.w	8006eb2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d170      	bne.n	8006e2a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d48:	4b18      	ldr	r3, [pc, #96]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_RCC_OscConfig+0x218>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e21a      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	4b11      	ldr	r3, [pc, #68]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d921      	bls.n	8006db4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fc4b 	bl	8007610 <RCC_SetFlashLatencyFromMSIRange>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e208      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	4906      	ldr	r1, [pc, #24]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	061b      	lsls	r3, r3, #24
 8006da4:	4901      	ldr	r1, [pc, #4]	; (8006dac <HAL_RCC_OscConfig+0x264>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	604b      	str	r3, [r1, #4]
 8006daa:	e020      	b.n	8006dee <HAL_RCC_OscConfig+0x2a6>
 8006dac:	40023800 	.word	0x40023800
 8006db0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006db4:	4ba4      	ldr	r3, [pc, #656]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	49a1      	ldr	r1, [pc, #644]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006dc6:	4ba0      	ldr	r3, [pc, #640]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	061b      	lsls	r3, r3, #24
 8006dd4:	499c      	ldr	r1, [pc, #624]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fc16 	bl	8007610 <RCC_SetFlashLatencyFromMSIRange>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e1d3      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	0b5b      	lsrs	r3, r3, #13
 8006df4:	3301      	adds	r3, #1
 8006df6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006dfa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006dfe:	4a92      	ldr	r2, [pc, #584]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006e00:	6892      	ldr	r2, [r2, #8]
 8006e02:	0912      	lsrs	r2, r2, #4
 8006e04:	f002 020f 	and.w	r2, r2, #15
 8006e08:	4990      	ldr	r1, [pc, #576]	; (800704c <HAL_RCC_OscConfig+0x504>)
 8006e0a:	5c8a      	ldrb	r2, [r1, r2]
 8006e0c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006e0e:	4a90      	ldr	r2, [pc, #576]	; (8007050 <HAL_RCC_OscConfig+0x508>)
 8006e10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006e12:	4b90      	ldr	r3, [pc, #576]	; (8007054 <HAL_RCC_OscConfig+0x50c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fc f96c 	bl	80030f4 <HAL_InitTick>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d045      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	e1b5      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d029      	beq.n	8006e86 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e32:	4b89      	ldr	r3, [pc, #548]	; (8007058 <HAL_RCC_OscConfig+0x510>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e38:	f7fc f9a8 	bl	800318c <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e40:	f7fc f9a4 	bl	800318c <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e1a1      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e52:	4b7d      	ldr	r3, [pc, #500]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f0      	beq.n	8006e40 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e5e:	4b7a      	ldr	r3, [pc, #488]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	4977      	ldr	r1, [pc, #476]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e70:	4b75      	ldr	r3, [pc, #468]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	4972      	ldr	r1, [pc, #456]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	604b      	str	r3, [r1, #4]
 8006e84:	e015      	b.n	8006eb2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e86:	4b74      	ldr	r3, [pc, #464]	; (8007058 <HAL_RCC_OscConfig+0x510>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fc f97e 	bl	800318c <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e94:	f7fc f97a 	bl	800318c <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e177      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006ea6:	4b68      	ldr	r3, [pc, #416]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d030      	beq.n	8006f20 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ec6:	4b65      	ldr	r3, [pc, #404]	; (800705c <HAL_RCC_OscConfig+0x514>)
 8006ec8:	2201      	movs	r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ecc:	f7fc f95e 	bl	800318c <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ed4:	f7fc f95a 	bl	800318c <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e157      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ee6:	4b58      	ldr	r3, [pc, #352]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0f0      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x38c>
 8006ef2:	e015      	b.n	8006f20 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ef4:	4b59      	ldr	r3, [pc, #356]	; (800705c <HAL_RCC_OscConfig+0x514>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006efa:	f7fc f947 	bl	800318c <HAL_GetTick>
 8006efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f02:	f7fc f943 	bl	800318c <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e140      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f14:	4b4c      	ldr	r3, [pc, #304]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f0      	bne.n	8006f02 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80b5 	beq.w	8007098 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f32:	4b45      	ldr	r3, [pc, #276]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10d      	bne.n	8006f5a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f3e:	4b42      	ldr	r3, [pc, #264]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	4a41      	ldr	r2, [pc, #260]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f48:	6253      	str	r3, [r2, #36]	; 0x24
 8006f4a:	4b3f      	ldr	r3, [pc, #252]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f52:	60bb      	str	r3, [r7, #8]
 8006f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f56:	2301      	movs	r3, #1
 8006f58:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5a:	4b41      	ldr	r3, [pc, #260]	; (8007060 <HAL_RCC_OscConfig+0x518>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d118      	bne.n	8006f98 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f66:	4b3e      	ldr	r3, [pc, #248]	; (8007060 <HAL_RCC_OscConfig+0x518>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a3d      	ldr	r2, [pc, #244]	; (8007060 <HAL_RCC_OscConfig+0x518>)
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f72:	f7fc f90b 	bl	800318c <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f7a:	f7fc f907 	bl	800318c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b64      	cmp	r3, #100	; 0x64
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e104      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f8c:	4b34      	ldr	r3, [pc, #208]	; (8007060 <HAL_RCC_OscConfig+0x518>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f0      	beq.n	8006f7a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d106      	bne.n	8006fae <HAL_RCC_OscConfig+0x466>
 8006fa0:	4b29      	ldr	r3, [pc, #164]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	4a28      	ldr	r2, [pc, #160]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006faa:	6353      	str	r3, [r2, #52]	; 0x34
 8006fac:	e02d      	b.n	800700a <HAL_RCC_OscConfig+0x4c2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x488>
 8006fb6:	4b24      	ldr	r3, [pc, #144]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fba:	4a23      	ldr	r2, [pc, #140]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc0:	6353      	str	r3, [r2, #52]	; 0x34
 8006fc2:	4b21      	ldr	r3, [pc, #132]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc6:	4a20      	ldr	r2, [pc, #128]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fcc:	6353      	str	r3, [r2, #52]	; 0x34
 8006fce:	e01c      	b.n	800700a <HAL_RCC_OscConfig+0x4c2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b05      	cmp	r3, #5
 8006fd6:	d10c      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x4aa>
 8006fd8:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fdc:	4a1a      	ldr	r2, [pc, #104]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fe2:	6353      	str	r3, [r2, #52]	; 0x34
 8006fe4:	4b18      	ldr	r3, [pc, #96]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe8:	4a17      	ldr	r2, [pc, #92]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fee:	6353      	str	r3, [r2, #52]	; 0x34
 8006ff0:	e00b      	b.n	800700a <HAL_RCC_OscConfig+0x4c2>
 8006ff2:	4b15      	ldr	r3, [pc, #84]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	4a14      	ldr	r2, [pc, #80]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8006ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ffc:	6353      	str	r3, [r2, #52]	; 0x34
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	4a11      	ldr	r2, [pc, #68]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8007004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007008:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d015      	beq.n	800703e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007012:	f7fc f8bb 	bl	800318c <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007018:	e00a      	b.n	8007030 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800701a:	f7fc f8b7 	bl	800318c <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	f241 3288 	movw	r2, #5000	; 0x1388
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e0b2      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <HAL_RCC_OscConfig+0x500>)
 8007032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0ee      	beq.n	800701a <HAL_RCC_OscConfig+0x4d2>
 800703c:	e023      	b.n	8007086 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800703e:	f7fc f8a5 	bl	800318c <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007044:	e019      	b.n	800707a <HAL_RCC_OscConfig+0x532>
 8007046:	bf00      	nop
 8007048:	40023800 	.word	0x40023800
 800704c:	0800d32c 	.word	0x0800d32c
 8007050:	20000000 	.word	0x20000000
 8007054:	20000004 	.word	0x20000004
 8007058:	42470020 	.word	0x42470020
 800705c:	42470680 	.word	0x42470680
 8007060:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007064:	f7fc f892 	bl	800318c <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e08d      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800707a:	4b49      	ldr	r3, [pc, #292]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1ee      	bne.n	8007064 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007086:	7ffb      	ldrb	r3, [r7, #31]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d105      	bne.n	8007098 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800708c:	4b44      	ldr	r3, [pc, #272]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	4a43      	ldr	r2, [pc, #268]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 8007092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007096:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	d079      	beq.n	8007194 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b0c      	cmp	r3, #12
 80070a4:	d056      	beq.n	8007154 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d13b      	bne.n	8007126 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ae:	4b3d      	ldr	r3, [pc, #244]	; (80071a4 <HAL_RCC_OscConfig+0x65c>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b4:	f7fc f86a 	bl	800318c <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070bc:	f7fc f866 	bl	800318c <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e063      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ce:	4b34      	ldr	r3, [pc, #208]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070da:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	4319      	orrs	r1, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	430b      	orrs	r3, r1
 80070f2:	492b      	ldr	r1, [pc, #172]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070f8:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <HAL_RCC_OscConfig+0x65c>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070fe:	f7fc f845 	bl	800318c <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007104:	e008      	b.n	8007118 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007106:	f7fc f841 	bl	800318c <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e03e      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007118:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0f0      	beq.n	8007106 <HAL_RCC_OscConfig+0x5be>
 8007124:	e036      	b.n	8007194 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007126:	4b1f      	ldr	r3, [pc, #124]	; (80071a4 <HAL_RCC_OscConfig+0x65c>)
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800712c:	f7fc f82e 	bl	800318c <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007134:	f7fc f82a 	bl	800318c <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e027      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007146:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f0      	bne.n	8007134 <HAL_RCC_OscConfig+0x5ec>
 8007152:	e01f      	b.n	8007194 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e01a      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <HAL_RCC_OscConfig+0x658>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	429a      	cmp	r2, r3
 8007172:	d10d      	bne.n	8007190 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800717e:	429a      	cmp	r2, r3
 8007180:	d106      	bne.n	8007190 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800718c:	429a      	cmp	r2, r3
 800718e:	d001      	beq.n	8007194 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40023800 	.word	0x40023800
 80071a4:	42470060 	.word	0x42470060

080071a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e11a      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071bc:	4b8f      	ldr	r3, [pc, #572]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d919      	bls.n	80071fe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d105      	bne.n	80071dc <HAL_RCC_ClockConfig+0x34>
 80071d0:	4b8a      	ldr	r3, [pc, #552]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a89      	ldr	r2, [pc, #548]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 80071d6:	f043 0304 	orr.w	r3, r3, #4
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	4b87      	ldr	r3, [pc, #540]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f023 0201 	bic.w	r2, r3, #1
 80071e4:	4985      	ldr	r1, [pc, #532]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ec:	4b83      	ldr	r3, [pc, #524]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d001      	beq.n	80071fe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e0f9      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d008      	beq.n	800721c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800720a:	4b7d      	ldr	r3, [pc, #500]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	497a      	ldr	r1, [pc, #488]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007218:	4313      	orrs	r3, r2
 800721a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 808e 	beq.w	8007346 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d107      	bne.n	8007242 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007232:	4b73      	ldr	r3, [pc, #460]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d121      	bne.n	8007282 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e0d7      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b03      	cmp	r3, #3
 8007248:	d107      	bne.n	800725a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800724a:	4b6d      	ldr	r3, [pc, #436]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d115      	bne.n	8007282 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e0cb      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d107      	bne.n	8007272 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007262:	4b67      	ldr	r3, [pc, #412]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e0bf      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007272:	4b63      	ldr	r3, [pc, #396]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e0b7      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007282:	4b5f      	ldr	r3, [pc, #380]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f023 0203 	bic.w	r2, r3, #3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	495c      	ldr	r1, [pc, #368]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007290:	4313      	orrs	r3, r2
 8007292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007294:	f7fb ff7a 	bl	800318c <HAL_GetTick>
 8007298:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d112      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80072a2:	e00a      	b.n	80072ba <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a4:	f7fb ff72 	bl	800318c <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e09b      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80072ba:	4b51      	ldr	r3, [pc, #324]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 030c 	and.w	r3, r3, #12
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d1ee      	bne.n	80072a4 <HAL_RCC_ClockConfig+0xfc>
 80072c6:	e03e      	b.n	8007346 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d112      	bne.n	80072f6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d2:	f7fb ff5b 	bl	800318c <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e084      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072e8:	4b45      	ldr	r3, [pc, #276]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 030c 	and.w	r3, r3, #12
 80072f0:	2b0c      	cmp	r3, #12
 80072f2:	d1ee      	bne.n	80072d2 <HAL_RCC_ClockConfig+0x12a>
 80072f4:	e027      	b.n	8007346 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d11d      	bne.n	800733a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072fe:	e00a      	b.n	8007316 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007300:	f7fb ff44 	bl	800318c <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	f241 3288 	movw	r2, #5000	; 0x1388
 800730e:	4293      	cmp	r3, r2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e06d      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007316:	4b3a      	ldr	r3, [pc, #232]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
 800731e:	2b04      	cmp	r3, #4
 8007320:	d1ee      	bne.n	8007300 <HAL_RCC_ClockConfig+0x158>
 8007322:	e010      	b.n	8007346 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007324:	f7fb ff32 	bl	800318c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007332:	4293      	cmp	r3, r2
 8007334:	d901      	bls.n	800733a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e05b      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800733a:	4b31      	ldr	r3, [pc, #196]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 030c 	and.w	r3, r3, #12
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1ee      	bne.n	8007324 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007346:	4b2d      	ldr	r3, [pc, #180]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d219      	bcs.n	8007388 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d105      	bne.n	8007366 <HAL_RCC_ClockConfig+0x1be>
 800735a:	4b28      	ldr	r3, [pc, #160]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a27      	ldr	r2, [pc, #156]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 8007360:	f043 0304 	orr.w	r3, r3, #4
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	4b25      	ldr	r3, [pc, #148]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 0201 	bic.w	r2, r3, #1
 800736e:	4923      	ldr	r1, [pc, #140]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	4313      	orrs	r3, r2
 8007374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007376:	4b21      	ldr	r3, [pc, #132]	; (80073fc <HAL_RCC_ClockConfig+0x254>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d001      	beq.n	8007388 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e034      	b.n	80073f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007394:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	4917      	ldr	r1, [pc, #92]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073b2:	4b13      	ldr	r3, [pc, #76]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	490f      	ldr	r1, [pc, #60]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073c6:	f000 f823 	bl	8007410 <HAL_RCC_GetSysClockFreq>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <HAL_RCC_ClockConfig+0x258>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	091b      	lsrs	r3, r3, #4
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	490b      	ldr	r1, [pc, #44]	; (8007404 <HAL_RCC_ClockConfig+0x25c>)
 80073d8:	5ccb      	ldrb	r3, [r1, r3]
 80073da:	fa22 f303 	lsr.w	r3, r2, r3
 80073de:	4a0a      	ldr	r2, [pc, #40]	; (8007408 <HAL_RCC_ClockConfig+0x260>)
 80073e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073e2:	4b0a      	ldr	r3, [pc, #40]	; (800740c <HAL_RCC_ClockConfig+0x264>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fb fe84 	bl	80030f4 <HAL_InitTick>
 80073ec:	4603      	mov	r3, r0
 80073ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40023c00 	.word	0x40023c00
 8007400:	40023800 	.word	0x40023800
 8007404:	0800d32c 	.word	0x0800d32c
 8007408:	20000000 	.word	0x20000000
 800740c:	20000004 	.word	0x20000004

08007410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007410:	b5b0      	push	{r4, r5, r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8007416:	4b61      	ldr	r3, [pc, #388]	; (800759c <HAL_RCC_GetSysClockFreq+0x18c>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f003 030c 	and.w	r3, r3, #12
 8007422:	2b0c      	cmp	r3, #12
 8007424:	d00d      	beq.n	8007442 <HAL_RCC_GetSysClockFreq+0x32>
 8007426:	2b0c      	cmp	r3, #12
 8007428:	f200 80a4 	bhi.w	8007574 <HAL_RCC_GetSysClockFreq+0x164>
 800742c:	2b04      	cmp	r3, #4
 800742e:	d002      	beq.n	8007436 <HAL_RCC_GetSysClockFreq+0x26>
 8007430:	2b08      	cmp	r3, #8
 8007432:	d003      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0x2c>
 8007434:	e09e      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007436:	4b5a      	ldr	r3, [pc, #360]	; (80075a0 <HAL_RCC_GetSysClockFreq+0x190>)
 8007438:	613b      	str	r3, [r7, #16]
      break;
 800743a:	e0a9      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800743c:	4b59      	ldr	r3, [pc, #356]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x194>)
 800743e:	613b      	str	r3, [r7, #16]
      break;
 8007440:	e0a6      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	0c9b      	lsrs	r3, r3, #18
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	4a57      	ldr	r2, [pc, #348]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x198>)
 800744c:	5cd3      	ldrb	r3, [r2, r3]
 800744e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	0d9b      	lsrs	r3, r3, #22
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	3301      	adds	r3, #1
 800745a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800745c:	4b4f      	ldr	r3, [pc, #316]	; (800759c <HAL_RCC_GetSysClockFreq+0x18c>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d041      	beq.n	80074ec <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	461c      	mov	r4, r3
 800746c:	f04f 0500 	mov.w	r5, #0
 8007470:	4620      	mov	r0, r4
 8007472:	4629      	mov	r1, r5
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	014b      	lsls	r3, r1, #5
 800747e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007482:	0142      	lsls	r2, r0, #5
 8007484:	4610      	mov	r0, r2
 8007486:	4619      	mov	r1, r3
 8007488:	1b00      	subs	r0, r0, r4
 800748a:	eb61 0105 	sbc.w	r1, r1, r5
 800748e:	f04f 0200 	mov.w	r2, #0
 8007492:	f04f 0300 	mov.w	r3, #0
 8007496:	018b      	lsls	r3, r1, #6
 8007498:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800749c:	0182      	lsls	r2, r0, #6
 800749e:	1a12      	subs	r2, r2, r0
 80074a0:	eb63 0301 	sbc.w	r3, r3, r1
 80074a4:	f04f 0000 	mov.w	r0, #0
 80074a8:	f04f 0100 	mov.w	r1, #0
 80074ac:	00d9      	lsls	r1, r3, #3
 80074ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074b2:	00d0      	lsls	r0, r2, #3
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	1912      	adds	r2, r2, r4
 80074ba:	eb45 0303 	adc.w	r3, r5, r3
 80074be:	f04f 0000 	mov.w	r0, #0
 80074c2:	f04f 0100 	mov.w	r1, #0
 80074c6:	0259      	lsls	r1, r3, #9
 80074c8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80074cc:	0250      	lsls	r0, r2, #9
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4610      	mov	r0, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	461a      	mov	r2, r3
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	f7f9 fddf 	bl	80010a0 <__aeabi_uldivmod>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4613      	mov	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e040      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	461c      	mov	r4, r3
 80074f0:	f04f 0500 	mov.w	r5, #0
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	014b      	lsls	r3, r1, #5
 8007502:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007506:	0142      	lsls	r2, r0, #5
 8007508:	4610      	mov	r0, r2
 800750a:	4619      	mov	r1, r3
 800750c:	1b00      	subs	r0, r0, r4
 800750e:	eb61 0105 	sbc.w	r1, r1, r5
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	018b      	lsls	r3, r1, #6
 800751c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007520:	0182      	lsls	r2, r0, #6
 8007522:	1a12      	subs	r2, r2, r0
 8007524:	eb63 0301 	sbc.w	r3, r3, r1
 8007528:	f04f 0000 	mov.w	r0, #0
 800752c:	f04f 0100 	mov.w	r1, #0
 8007530:	00d9      	lsls	r1, r3, #3
 8007532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007536:	00d0      	lsls	r0, r2, #3
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	1912      	adds	r2, r2, r4
 800753e:	eb45 0303 	adc.w	r3, r5, r3
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f04f 0100 	mov.w	r1, #0
 800754a:	0299      	lsls	r1, r3, #10
 800754c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007550:	0290      	lsls	r0, r2, #10
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4610      	mov	r0, r2
 8007558:	4619      	mov	r1, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	461a      	mov	r2, r3
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	f7f9 fd9d 	bl	80010a0 <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4613      	mov	r3, r2
 800756c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	613b      	str	r3, [r7, #16]
      break;
 8007572:	e00d      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007574:	4b09      	ldr	r3, [pc, #36]	; (800759c <HAL_RCC_GetSysClockFreq+0x18c>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	0b5b      	lsrs	r3, r3, #13
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	613b      	str	r3, [r7, #16]
      break;
 800758e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007590:	693b      	ldr	r3, [r7, #16]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bdb0      	pop	{r4, r5, r7, pc}
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800
 80075a0:	00f42400 	.word	0x00f42400
 80075a4:	007a1200 	.word	0x007a1200
 80075a8:	0800d320 	.word	0x0800d320

080075ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075b0:	4b02      	ldr	r3, [pc, #8]	; (80075bc <HAL_RCC_GetHCLKFreq+0x10>)
 80075b2:	681b      	ldr	r3, [r3, #0]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr
 80075bc:	20000000 	.word	0x20000000

080075c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075c4:	f7ff fff2 	bl	80075ac <HAL_RCC_GetHCLKFreq>
 80075c8:	4602      	mov	r2, r0
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4903      	ldr	r1, [pc, #12]	; (80075e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075d6:	5ccb      	ldrb	r3, [r1, r3]
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40023800 	.word	0x40023800
 80075e4:	0800d33c 	.word	0x0800d33c

080075e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075ec:	f7ff ffde 	bl	80075ac <HAL_RCC_GetHCLKFreq>
 80075f0:	4602      	mov	r2, r0
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	0adb      	lsrs	r3, r3, #11
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	4903      	ldr	r1, [pc, #12]	; (800760c <HAL_RCC_GetPCLK2Freq+0x24>)
 80075fe:	5ccb      	ldrb	r3, [r1, r3]
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007604:	4618      	mov	r0, r3
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40023800 	.word	0x40023800
 800760c:	0800d33c 	.word	0x0800d33c

08007610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800761c:	4b29      	ldr	r3, [pc, #164]	; (80076c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d12c      	bne.n	8007682 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007628:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007634:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	e016      	b.n	800766e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007640:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800764a:	6253      	str	r3, [r2, #36]	; 0x24
 800764c:	4b1d      	ldr	r3, [pc, #116]	; (80076c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007658:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007660:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007662:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800766c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007674:	d105      	bne.n	8007682 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800767c:	d101      	bne.n	8007682 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800767e:	2301      	movs	r3, #1
 8007680:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d105      	bne.n	8007694 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a0f      	ldr	r2, [pc, #60]	; (80076cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800768e:	f043 0304 	orr.w	r3, r3, #4
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f023 0201 	bic.w	r2, r3, #1
 800769c:	490b      	ldr	r1, [pc, #44]	; (80076cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d001      	beq.n	80076b6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40007000 	.word	0x40007000
 80076cc:	40023c00 	.word	0x40023c00

080076d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e031      	b.n	8007746 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fb fae6 	bl	8002cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f000 f970 	bl	80079f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d001      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e03a      	b.n	80077de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007788:	d00e      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x58>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a16      	ldr	r2, [pc, #88]	; (80077e8 <HAL_TIM_Base_Start_IT+0x98>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x58>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <HAL_TIM_Base_Start_IT+0x9c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x58>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d111      	bne.n	80077cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b06      	cmp	r3, #6
 80077b8:	d010      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	e007      	b.n	80077dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr
 80077e8:	40000400 	.word	0x40000400
 80077ec:	40000800 	.word	0x40000800
 80077f0:	40010800 	.word	0x40010800

080077f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b02      	cmp	r3, #2
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0202 	mvn.w	r2, #2
 8007820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8c1 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8b4 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f8c3 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b04      	cmp	r3, #4
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b04      	cmp	r3, #4
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0204 	mvn.w	r2, #4
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f897 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f88a 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f899 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0208 	mvn.w	r2, #8
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2204      	movs	r2, #4
 80078ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f86d 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f860 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f86f 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b10      	cmp	r3, #16
 8007904:	d122      	bne.n	800794c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b10      	cmp	r3, #16
 8007912:	d11b      	bne.n	800794c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0210 	mvn.w	r2, #16
 800791c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2208      	movs	r2, #8
 8007922:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f843 	bl	80079be <HAL_TIM_IC_CaptureCallback>
 8007938:	e005      	b.n	8007946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f836 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f845 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d10e      	bne.n	8007978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d107      	bne.n	8007978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0201 	mvn.w	r2, #1
 8007970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7f9 feb8 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d10e      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f81f 	bl	80079e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bc80      	pop	{r7}
 80079ce:	4770      	bx	lr

080079d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0a:	d00f      	beq.n	8007a2c <TIM_Base_SetConfig+0x38>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a2b      	ldr	r2, [pc, #172]	; (8007abc <TIM_Base_SetConfig+0xc8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00b      	beq.n	8007a2c <TIM_Base_SetConfig+0x38>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <TIM_Base_SetConfig+0xcc>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d007      	beq.n	8007a2c <TIM_Base_SetConfig+0x38>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a29      	ldr	r2, [pc, #164]	; (8007ac4 <TIM_Base_SetConfig+0xd0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_Base_SetConfig+0x38>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a28      	ldr	r2, [pc, #160]	; (8007ac8 <TIM_Base_SetConfig+0xd4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d108      	bne.n	8007a3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a44:	d017      	beq.n	8007a76 <TIM_Base_SetConfig+0x82>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <TIM_Base_SetConfig+0xc8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <TIM_Base_SetConfig+0x82>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <TIM_Base_SetConfig+0xcc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_Base_SetConfig+0x82>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <TIM_Base_SetConfig+0xd0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_Base_SetConfig+0x82>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <TIM_Base_SetConfig+0xd4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_Base_SetConfig+0x82>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a18      	ldr	r2, [pc, #96]	; (8007acc <TIM_Base_SetConfig+0xd8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_Base_SetConfig+0x82>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <TIM_Base_SetConfig+0xdc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d108      	bne.n	8007a88 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	615a      	str	r2, [r3, #20]
}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40010800 	.word	0x40010800
 8007acc:	40010c00 	.word	0x40010c00
 8007ad0:	40011000 	.word	0x40011000

08007ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e046      	b.n	8007b7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2e:	d00e      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d009      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a12      	ldr	r2, [pc, #72]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d004      	beq.n	8007b4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a10      	ldr	r2, [pc, #64]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d10c      	bne.n	8007b68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bc80      	pop	{r7}
 8007b82:	4770      	bx	lr
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40010800 	.word	0x40010800

08007b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e03f      	b.n	8007c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fb f900 	bl	8002dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2224      	movs	r2, #36	; 0x24
 8007bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fc2f 	bl	8008438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b088      	sub	sp, #32
 8007c2e:	af02      	add	r7, sp, #8
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	f040 8083 	bne.w	8007d52 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_UART_Transmit+0x2e>
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e07b      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_UART_Transmit+0x40>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e074      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2221      	movs	r2, #33	; 0x21
 8007c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007c80:	f7fb fa84 	bl	800318c <HAL_GetTick>
 8007c84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007c9a:	e042      	b.n	8007d22 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb2:	d122      	bne.n	8007cfa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2180      	movs	r1, #128	; 0x80
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fa51 	bl	8008166 <UART_WaitOnFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e042      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ce0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d103      	bne.n	8007cf2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3302      	adds	r3, #2
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	e017      	b.n	8007d22 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	60bb      	str	r3, [r7, #8]
 8007cf8:	e013      	b.n	8007d22 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2200      	movs	r2, #0
 8007d02:	2180      	movs	r1, #128	; 0x80
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fa2e 	bl	8008166 <UART_WaitOnFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e01f      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	60ba      	str	r2, [r7, #8]
 8007d1a:	781a      	ldrb	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1b7      	bne.n	8007c9c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2200      	movs	r2, #0
 8007d34:	2140      	movs	r1, #64	; 0x40
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fa15 	bl	8008166 <UART_WaitOnFlagUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e006      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e000      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007d52:	2302      	movs	r3, #2
  }
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	f040 8090 	bne.w	8007e9e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_UART_Receive+0x2e>
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e088      	b.n	8007ea0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_UART_Receive+0x40>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e081      	b.n	8007ea0 <HAL_UART_Receive+0x144>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2222      	movs	r2, #34	; 0x22
 8007dae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007db2:	f7fb f9eb 	bl	800318c <HAL_GetTick>
 8007db6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007dcc:	e05c      	b.n	8007e88 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de4:	d12b      	bne.n	8007e3e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2200      	movs	r2, #0
 8007dee:	2120      	movs	r1, #32
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f9b8 	bl	8008166 <UART_WaitOnFlagUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e04f      	b.n	8007ea0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10c      	bne.n	8007e26 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3302      	adds	r3, #2
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	e030      	b.n	8007e88 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	60bb      	str	r3, [r7, #8]
 8007e3c:	e024      	b.n	8007e88 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2120      	movs	r1, #32
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f98c 	bl	8008166 <UART_WaitOnFlagUntilTimeout>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e023      	b.n	8007ea0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d108      	bne.n	8007e72 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6859      	ldr	r1, [r3, #4]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	60ba      	str	r2, [r7, #8]
 8007e6c:	b2ca      	uxtb	r2, r1
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	e00a      	b.n	8007e88 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	1c59      	adds	r1, r3, #1
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d19d      	bne.n	8007dce <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e000      	b.n	8007ea0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007e9e:	2302      	movs	r3, #2
  }
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d130      	bne.n	8007f24 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <HAL_UART_Transmit_IT+0x26>
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e029      	b.n	8007f26 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_UART_Transmit_IT+0x38>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e022      	b.n	8007f26 <HAL_UART_Transmit_IT+0x7e>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2221      	movs	r2, #33	; 0x21
 8007f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f1e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	e000      	b.n	8007f26 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
  }
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr

08007f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10d      	bne.n	8007f82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_UART_IRQHandler+0x52>
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	f003 0320 	and.w	r3, r3, #32
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9db 	bl	8008336 <UART_Receive_IT>
      return;
 8007f80:	e0d0      	b.n	8008124 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80b0 	beq.w	80080ea <HAL_UART_IRQHandler+0x1ba>
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <HAL_UART_IRQHandler+0x70>
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 80a5 	beq.w	80080ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <HAL_UART_IRQHandler+0x90>
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	f043 0201 	orr.w	r2, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xb0>
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	f043 0202 	orr.w	r2, r3, #2
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <HAL_UART_IRQHandler+0xd0>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	f043 0204 	orr.w	r2, r3, #4
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00f      	beq.n	800802a <HAL_UART_IRQHandler+0xfa>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <HAL_UART_IRQHandler+0xee>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	f043 0208 	orr.w	r2, r3, #8
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d077      	beq.n	8008122 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d007      	beq.n	800804c <HAL_UART_IRQHandler+0x11c>
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f975 	bl	8008336 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	bf0c      	ite	eq
 800805a:	2301      	moveq	r3, #1
 800805c:	2300      	movne	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d102      	bne.n	8008074 <HAL_UART_IRQHandler+0x144>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d031      	beq.n	80080d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f8c0 	bl	80081fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008084:	2b40      	cmp	r3, #64	; 0x40
 8008086:	d123      	bne.n	80080d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695a      	ldr	r2, [r3, #20]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008096:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809c:	2b00      	cmp	r3, #0
 800809e:	d013      	beq.n	80080c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a4:	4a21      	ldr	r2, [pc, #132]	; (800812c <HAL_UART_IRQHandler+0x1fc>)
 80080a6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fb fdd6 	bl	8003c5e <HAL_DMA_Abort_IT>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d016      	beq.n	80080e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080c2:	4610      	mov	r0, r2
 80080c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c6:	e00e      	b.n	80080e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f843 	bl	8008154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ce:	e00a      	b.n	80080e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f83f 	bl	8008154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d6:	e006      	b.n	80080e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f83b 	bl	8008154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80080e4:	e01d      	b.n	8008122 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e6:	bf00      	nop
    return;
 80080e8:	e01b      	b.n	8008122 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <HAL_UART_IRQHandler+0x1d6>
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f8ac 	bl	800825c <UART_Transmit_IT>
    return;
 8008104:	e00e      	b.n	8008124 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <HAL_UART_IRQHandler+0x1f4>
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8f3 	bl	8008306 <UART_EndTransmit_IT>
    return;
 8008120:	e000      	b.n	8008124 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008122:	bf00      	nop
  }
}
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	08008235 	.word	0x08008235

08008130 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr

08008142 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr

08008154 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr

08008166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	603b      	str	r3, [r7, #0]
 8008172:	4613      	mov	r3, r2
 8008174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008176:	e02c      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817e:	d028      	beq.n	80081d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <UART_WaitOnFlagUntilTimeout+0x30>
 8008186:	f7fb f801 	bl	800318c <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	429a      	cmp	r2, r3
 8008194:	d21d      	bcs.n	80081d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	695a      	ldr	r2, [r3, #20]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0201 	bic.w	r2, r2, #1
 80081b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e00f      	b.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4013      	ands	r3, r2
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	429a      	cmp	r2, r3
 80081e0:	bf0c      	ite	eq
 80081e2:	2301      	moveq	r3, #1
 80081e4:	2300      	movne	r3, #0
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	461a      	mov	r2, r3
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d0c3      	beq.n	8008178 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008210:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	695a      	ldr	r2, [r3, #20]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0201 	bic.w	r2, r2, #1
 8008220:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr

08008234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ff80 	bl	8008154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b21      	cmp	r3, #33	; 0x21
 800826e:	d144      	bne.n	80082fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008278:	d11a      	bne.n	80082b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800828e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	1c9a      	adds	r2, r3, #2
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	621a      	str	r2, [r3, #32]
 80082a2:	e00e      	b.n	80082c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	621a      	str	r2, [r3, #32]
 80082ae:	e008      	b.n	80082c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	1c59      	adds	r1, r3, #1
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6211      	str	r1, [r2, #32]
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	4619      	mov	r1, r3
 80082d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10f      	bne.n	80082f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e000      	b.n	80082fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082fa:	2302      	movs	r3, #2
  }
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800831c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff ff02 	bl	8008130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b22      	cmp	r3, #34	; 0x22
 8008348:	d171      	bne.n	800842e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	d123      	bne.n	800839c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10e      	bne.n	8008380 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	1c9a      	adds	r2, r3, #2
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	629a      	str	r2, [r3, #40]	; 0x28
 800837e:	e029      	b.n	80083d4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	b29b      	uxth	r3, r3
 8008388:	b2db      	uxtb	r3, r3
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	629a      	str	r2, [r3, #40]	; 0x28
 800839a:	e01b      	b.n	80083d4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6858      	ldr	r0, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	6291      	str	r1, [r2, #40]	; 0x28
 80083b4:	b2c2      	uxtb	r2, r0
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e00c      	b.n	80083d4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c6:	1c58      	adds	r0, r3, #1
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	6288      	str	r0, [r1, #40]	; 0x28
 80083cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29b      	uxth	r3, r3
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4619      	mov	r1, r3
 80083e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d120      	bne.n	800842a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0220 	bic.w	r2, r2, #32
 80083f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0201 	bic.w	r2, r2, #1
 8008416:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2220      	movs	r2, #32
 800841c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff fe8e 	bl	8008142 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	e002      	b.n	8008430 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	e000      	b.n	8008430 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800842e:	2302      	movs	r3, #2
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	4313      	orrs	r3, r2
 800846c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008478:	f023 030c 	bic.w	r3, r3, #12
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	430b      	orrs	r3, r1
 8008484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	699a      	ldr	r2, [r3, #24]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a55      	ldr	r2, [pc, #340]	; (80085f8 <UART_SetConfig+0x1c0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d103      	bne.n	80084ae <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084a6:	f7ff f89f 	bl	80075e8 <HAL_RCC_GetPCLK2Freq>
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	e002      	b.n	80084b4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084ae:	f7ff f887 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 80084b2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084bc:	d14c      	bne.n	8008558 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009a      	lsls	r2, r3, #2
 80084c8:	441a      	add	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d4:	4a49      	ldr	r2, [pc, #292]	; (80085fc <UART_SetConfig+0x1c4>)
 80084d6:	fba2 2303 	umull	r2, r3, r2, r3
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	0119      	lsls	r1, r3, #4
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009a      	lsls	r2, r3, #2
 80084e8:	441a      	add	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80084f4:	4b41      	ldr	r3, [pc, #260]	; (80085fc <UART_SetConfig+0x1c4>)
 80084f6:	fba3 0302 	umull	r0, r3, r3, r2
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	2064      	movs	r0, #100	; 0x64
 80084fe:	fb00 f303 	mul.w	r3, r0, r3
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	3332      	adds	r3, #50	; 0x32
 8008508:	4a3c      	ldr	r2, [pc, #240]	; (80085fc <UART_SetConfig+0x1c4>)
 800850a:	fba2 2303 	umull	r2, r3, r2, r3
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008516:	4419      	add	r1, r3
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009a      	lsls	r2, r3, #2
 8008522:	441a      	add	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	fbb2 f2f3 	udiv	r2, r2, r3
 800852e:	4b33      	ldr	r3, [pc, #204]	; (80085fc <UART_SetConfig+0x1c4>)
 8008530:	fba3 0302 	umull	r0, r3, r3, r2
 8008534:	095b      	lsrs	r3, r3, #5
 8008536:	2064      	movs	r0, #100	; 0x64
 8008538:	fb00 f303 	mul.w	r3, r0, r3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	3332      	adds	r3, #50	; 0x32
 8008542:	4a2e      	ldr	r2, [pc, #184]	; (80085fc <UART_SetConfig+0x1c4>)
 8008544:	fba2 2303 	umull	r2, r3, r2, r3
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	f003 0207 	and.w	r2, r3, #7
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	440a      	add	r2, r1
 8008554:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008556:	e04a      	b.n	80085ee <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009a      	lsls	r2, r3, #2
 8008562:	441a      	add	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	fbb2 f3f3 	udiv	r3, r2, r3
 800856e:	4a23      	ldr	r2, [pc, #140]	; (80085fc <UART_SetConfig+0x1c4>)
 8008570:	fba2 2303 	umull	r2, r3, r2, r3
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	0119      	lsls	r1, r3, #4
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009a      	lsls	r2, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	fbb2 f2f3 	udiv	r2, r2, r3
 800858e:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <UART_SetConfig+0x1c4>)
 8008590:	fba3 0302 	umull	r0, r3, r3, r2
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	2064      	movs	r0, #100	; 0x64
 8008598:	fb00 f303 	mul.w	r3, r0, r3
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	3332      	adds	r3, #50	; 0x32
 80085a2:	4a16      	ldr	r2, [pc, #88]	; (80085fc <UART_SetConfig+0x1c4>)
 80085a4:	fba2 2303 	umull	r2, r3, r2, r3
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085ae:	4419      	add	r1, r3
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009a      	lsls	r2, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80085c6:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <UART_SetConfig+0x1c4>)
 80085c8:	fba3 0302 	umull	r0, r3, r3, r2
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	2064      	movs	r0, #100	; 0x64
 80085d0:	fb00 f303 	mul.w	r3, r0, r3
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	3332      	adds	r3, #50	; 0x32
 80085da:	4a08      	ldr	r2, [pc, #32]	; (80085fc <UART_SetConfig+0x1c4>)
 80085dc:	fba2 2303 	umull	r2, r3, r2, r3
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	f003 020f 	and.w	r2, r3, #15
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	440a      	add	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]
}
 80085ee:	bf00      	nop
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	40013800 	.word	0x40013800
 80085fc:	51eb851f 	.word	0x51eb851f

08008600 <__errno>:
 8008600:	4b01      	ldr	r3, [pc, #4]	; (8008608 <__errno+0x8>)
 8008602:	6818      	ldr	r0, [r3, #0]
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	2000000c 	.word	0x2000000c

0800860c <__libc_init_array>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	2600      	movs	r6, #0
 8008610:	4d0c      	ldr	r5, [pc, #48]	; (8008644 <__libc_init_array+0x38>)
 8008612:	4c0d      	ldr	r4, [pc, #52]	; (8008648 <__libc_init_array+0x3c>)
 8008614:	1b64      	subs	r4, r4, r5
 8008616:	10a4      	asrs	r4, r4, #2
 8008618:	42a6      	cmp	r6, r4
 800861a:	d109      	bne.n	8008630 <__libc_init_array+0x24>
 800861c:	f004 fc72 	bl	800cf04 <_init>
 8008620:	2600      	movs	r6, #0
 8008622:	4d0a      	ldr	r5, [pc, #40]	; (800864c <__libc_init_array+0x40>)
 8008624:	4c0a      	ldr	r4, [pc, #40]	; (8008650 <__libc_init_array+0x44>)
 8008626:	1b64      	subs	r4, r4, r5
 8008628:	10a4      	asrs	r4, r4, #2
 800862a:	42a6      	cmp	r6, r4
 800862c:	d105      	bne.n	800863a <__libc_init_array+0x2e>
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	f855 3b04 	ldr.w	r3, [r5], #4
 8008634:	4798      	blx	r3
 8008636:	3601      	adds	r6, #1
 8008638:	e7ee      	b.n	8008618 <__libc_init_array+0xc>
 800863a:	f855 3b04 	ldr.w	r3, [r5], #4
 800863e:	4798      	blx	r3
 8008640:	3601      	adds	r6, #1
 8008642:	e7f2      	b.n	800862a <__libc_init_array+0x1e>
 8008644:	0800d804 	.word	0x0800d804
 8008648:	0800d804 	.word	0x0800d804
 800864c:	0800d804 	.word	0x0800d804
 8008650:	0800d808 	.word	0x0800d808

08008654 <memset>:
 8008654:	4603      	mov	r3, r0
 8008656:	4402      	add	r2, r0
 8008658:	4293      	cmp	r3, r2
 800865a:	d100      	bne.n	800865e <memset+0xa>
 800865c:	4770      	bx	lr
 800865e:	f803 1b01 	strb.w	r1, [r3], #1
 8008662:	e7f9      	b.n	8008658 <memset+0x4>

08008664 <__cvt>:
 8008664:	2b00      	cmp	r3, #0
 8008666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866a:	461f      	mov	r7, r3
 800866c:	bfbb      	ittet	lt
 800866e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008672:	461f      	movlt	r7, r3
 8008674:	2300      	movge	r3, #0
 8008676:	232d      	movlt	r3, #45	; 0x2d
 8008678:	b088      	sub	sp, #32
 800867a:	4614      	mov	r4, r2
 800867c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800867e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008680:	7013      	strb	r3, [r2, #0]
 8008682:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008684:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008688:	f023 0820 	bic.w	r8, r3, #32
 800868c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008690:	d005      	beq.n	800869e <__cvt+0x3a>
 8008692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008696:	d100      	bne.n	800869a <__cvt+0x36>
 8008698:	3501      	adds	r5, #1
 800869a:	2302      	movs	r3, #2
 800869c:	e000      	b.n	80086a0 <__cvt+0x3c>
 800869e:	2303      	movs	r3, #3
 80086a0:	aa07      	add	r2, sp, #28
 80086a2:	9204      	str	r2, [sp, #16]
 80086a4:	aa06      	add	r2, sp, #24
 80086a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80086aa:	e9cd 3500 	strd	r3, r5, [sp]
 80086ae:	4622      	mov	r2, r4
 80086b0:	463b      	mov	r3, r7
 80086b2:	f001 fde9 	bl	800a288 <_dtoa_r>
 80086b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086ba:	4606      	mov	r6, r0
 80086bc:	d102      	bne.n	80086c4 <__cvt+0x60>
 80086be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086c0:	07db      	lsls	r3, r3, #31
 80086c2:	d522      	bpl.n	800870a <__cvt+0xa6>
 80086c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086c8:	eb06 0905 	add.w	r9, r6, r5
 80086cc:	d110      	bne.n	80086f0 <__cvt+0x8c>
 80086ce:	7833      	ldrb	r3, [r6, #0]
 80086d0:	2b30      	cmp	r3, #48	; 0x30
 80086d2:	d10a      	bne.n	80086ea <__cvt+0x86>
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	4620      	mov	r0, r4
 80086da:	4639      	mov	r1, r7
 80086dc:	f7f8 f97c 	bl	80009d8 <__aeabi_dcmpeq>
 80086e0:	b918      	cbnz	r0, 80086ea <__cvt+0x86>
 80086e2:	f1c5 0501 	rsb	r5, r5, #1
 80086e6:	f8ca 5000 	str.w	r5, [sl]
 80086ea:	f8da 3000 	ldr.w	r3, [sl]
 80086ee:	4499      	add	r9, r3
 80086f0:	2200      	movs	r2, #0
 80086f2:	2300      	movs	r3, #0
 80086f4:	4620      	mov	r0, r4
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f8 f96e 	bl	80009d8 <__aeabi_dcmpeq>
 80086fc:	b108      	cbz	r0, 8008702 <__cvt+0x9e>
 80086fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8008702:	2230      	movs	r2, #48	; 0x30
 8008704:	9b07      	ldr	r3, [sp, #28]
 8008706:	454b      	cmp	r3, r9
 8008708:	d307      	bcc.n	800871a <__cvt+0xb6>
 800870a:	4630      	mov	r0, r6
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008710:	1b9b      	subs	r3, r3, r6
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	b008      	add	sp, #32
 8008716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871a:	1c59      	adds	r1, r3, #1
 800871c:	9107      	str	r1, [sp, #28]
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	e7f0      	b.n	8008704 <__cvt+0xa0>

08008722 <__exponent>:
 8008722:	4603      	mov	r3, r0
 8008724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008726:	2900      	cmp	r1, #0
 8008728:	f803 2b02 	strb.w	r2, [r3], #2
 800872c:	bfb6      	itet	lt
 800872e:	222d      	movlt	r2, #45	; 0x2d
 8008730:	222b      	movge	r2, #43	; 0x2b
 8008732:	4249      	neglt	r1, r1
 8008734:	2909      	cmp	r1, #9
 8008736:	7042      	strb	r2, [r0, #1]
 8008738:	dd2b      	ble.n	8008792 <__exponent+0x70>
 800873a:	f10d 0407 	add.w	r4, sp, #7
 800873e:	46a4      	mov	ip, r4
 8008740:	270a      	movs	r7, #10
 8008742:	fb91 f6f7 	sdiv	r6, r1, r7
 8008746:	460a      	mov	r2, r1
 8008748:	46a6      	mov	lr, r4
 800874a:	fb07 1516 	mls	r5, r7, r6, r1
 800874e:	2a63      	cmp	r2, #99	; 0x63
 8008750:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008754:	4631      	mov	r1, r6
 8008756:	f104 34ff 	add.w	r4, r4, #4294967295
 800875a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800875e:	dcf0      	bgt.n	8008742 <__exponent+0x20>
 8008760:	3130      	adds	r1, #48	; 0x30
 8008762:	f1ae 0502 	sub.w	r5, lr, #2
 8008766:	f804 1c01 	strb.w	r1, [r4, #-1]
 800876a:	4629      	mov	r1, r5
 800876c:	1c44      	adds	r4, r0, #1
 800876e:	4561      	cmp	r1, ip
 8008770:	d30a      	bcc.n	8008788 <__exponent+0x66>
 8008772:	f10d 0209 	add.w	r2, sp, #9
 8008776:	eba2 020e 	sub.w	r2, r2, lr
 800877a:	4565      	cmp	r5, ip
 800877c:	bf88      	it	hi
 800877e:	2200      	movhi	r2, #0
 8008780:	4413      	add	r3, r2
 8008782:	1a18      	subs	r0, r3, r0
 8008784:	b003      	add	sp, #12
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008788:	f811 2b01 	ldrb.w	r2, [r1], #1
 800878c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008790:	e7ed      	b.n	800876e <__exponent+0x4c>
 8008792:	2330      	movs	r3, #48	; 0x30
 8008794:	3130      	adds	r1, #48	; 0x30
 8008796:	7083      	strb	r3, [r0, #2]
 8008798:	70c1      	strb	r1, [r0, #3]
 800879a:	1d03      	adds	r3, r0, #4
 800879c:	e7f1      	b.n	8008782 <__exponent+0x60>
	...

080087a0 <_printf_float>:
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	b091      	sub	sp, #68	; 0x44
 80087a6:	460c      	mov	r4, r1
 80087a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80087ac:	4616      	mov	r6, r2
 80087ae:	461f      	mov	r7, r3
 80087b0:	4605      	mov	r5, r0
 80087b2:	f002 febd 	bl	800b530 <_localeconv_r>
 80087b6:	6803      	ldr	r3, [r0, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	9309      	str	r3, [sp, #36]	; 0x24
 80087bc:	f7f7 fce0 	bl	8000180 <strlen>
 80087c0:	2300      	movs	r3, #0
 80087c2:	930e      	str	r3, [sp, #56]	; 0x38
 80087c4:	f8d8 3000 	ldr.w	r3, [r8]
 80087c8:	900a      	str	r0, [sp, #40]	; 0x28
 80087ca:	3307      	adds	r3, #7
 80087cc:	f023 0307 	bic.w	r3, r3, #7
 80087d0:	f103 0208 	add.w	r2, r3, #8
 80087d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80087d8:	f8d4 b000 	ldr.w	fp, [r4]
 80087dc:	f8c8 2000 	str.w	r2, [r8]
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80087ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80087f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f2:	f04f 32ff 	mov.w	r2, #4294967295
 80087f6:	4640      	mov	r0, r8
 80087f8:	4b9c      	ldr	r3, [pc, #624]	; (8008a6c <_printf_float+0x2cc>)
 80087fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087fc:	f7f8 f91e 	bl	8000a3c <__aeabi_dcmpun>
 8008800:	bb70      	cbnz	r0, 8008860 <_printf_float+0xc0>
 8008802:	f04f 32ff 	mov.w	r2, #4294967295
 8008806:	4640      	mov	r0, r8
 8008808:	4b98      	ldr	r3, [pc, #608]	; (8008a6c <_printf_float+0x2cc>)
 800880a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800880c:	f7f8 f8f8 	bl	8000a00 <__aeabi_dcmple>
 8008810:	bb30      	cbnz	r0, 8008860 <_printf_float+0xc0>
 8008812:	2200      	movs	r2, #0
 8008814:	2300      	movs	r3, #0
 8008816:	4640      	mov	r0, r8
 8008818:	4651      	mov	r1, sl
 800881a:	f7f8 f8e7 	bl	80009ec <__aeabi_dcmplt>
 800881e:	b110      	cbz	r0, 8008826 <_printf_float+0x86>
 8008820:	232d      	movs	r3, #45	; 0x2d
 8008822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008826:	4b92      	ldr	r3, [pc, #584]	; (8008a70 <_printf_float+0x2d0>)
 8008828:	4892      	ldr	r0, [pc, #584]	; (8008a74 <_printf_float+0x2d4>)
 800882a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800882e:	bf94      	ite	ls
 8008830:	4698      	movls	r8, r3
 8008832:	4680      	movhi	r8, r0
 8008834:	2303      	movs	r3, #3
 8008836:	f04f 0a00 	mov.w	sl, #0
 800883a:	6123      	str	r3, [r4, #16]
 800883c:	f02b 0304 	bic.w	r3, fp, #4
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	4633      	mov	r3, r6
 8008844:	4621      	mov	r1, r4
 8008846:	4628      	mov	r0, r5
 8008848:	9700      	str	r7, [sp, #0]
 800884a:	aa0f      	add	r2, sp, #60	; 0x3c
 800884c:	f000 f9d4 	bl	8008bf8 <_printf_common>
 8008850:	3001      	adds	r0, #1
 8008852:	f040 8090 	bne.w	8008976 <_printf_float+0x1d6>
 8008856:	f04f 30ff 	mov.w	r0, #4294967295
 800885a:	b011      	add	sp, #68	; 0x44
 800885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008860:	4642      	mov	r2, r8
 8008862:	4653      	mov	r3, sl
 8008864:	4640      	mov	r0, r8
 8008866:	4651      	mov	r1, sl
 8008868:	f7f8 f8e8 	bl	8000a3c <__aeabi_dcmpun>
 800886c:	b148      	cbz	r0, 8008882 <_printf_float+0xe2>
 800886e:	f1ba 0f00 	cmp.w	sl, #0
 8008872:	bfb8      	it	lt
 8008874:	232d      	movlt	r3, #45	; 0x2d
 8008876:	4880      	ldr	r0, [pc, #512]	; (8008a78 <_printf_float+0x2d8>)
 8008878:	bfb8      	it	lt
 800887a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800887e:	4b7f      	ldr	r3, [pc, #508]	; (8008a7c <_printf_float+0x2dc>)
 8008880:	e7d3      	b.n	800882a <_printf_float+0x8a>
 8008882:	6863      	ldr	r3, [r4, #4]
 8008884:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	d142      	bne.n	8008912 <_printf_float+0x172>
 800888c:	2306      	movs	r3, #6
 800888e:	6063      	str	r3, [r4, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	9206      	str	r2, [sp, #24]
 8008894:	aa0e      	add	r2, sp, #56	; 0x38
 8008896:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800889a:	aa0d      	add	r2, sp, #52	; 0x34
 800889c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80088a0:	9203      	str	r2, [sp, #12]
 80088a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80088a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	4642      	mov	r2, r8
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	4628      	mov	r0, r5
 80088b4:	4653      	mov	r3, sl
 80088b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80088b8:	f7ff fed4 	bl	8008664 <__cvt>
 80088bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088be:	4680      	mov	r8, r0
 80088c0:	2947      	cmp	r1, #71	; 0x47
 80088c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088c4:	d108      	bne.n	80088d8 <_printf_float+0x138>
 80088c6:	1cc8      	adds	r0, r1, #3
 80088c8:	db02      	blt.n	80088d0 <_printf_float+0x130>
 80088ca:	6863      	ldr	r3, [r4, #4]
 80088cc:	4299      	cmp	r1, r3
 80088ce:	dd40      	ble.n	8008952 <_printf_float+0x1b2>
 80088d0:	f1a9 0902 	sub.w	r9, r9, #2
 80088d4:	fa5f f989 	uxtb.w	r9, r9
 80088d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80088dc:	d81f      	bhi.n	800891e <_printf_float+0x17e>
 80088de:	464a      	mov	r2, r9
 80088e0:	3901      	subs	r1, #1
 80088e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088e6:	910d      	str	r1, [sp, #52]	; 0x34
 80088e8:	f7ff ff1b 	bl	8008722 <__exponent>
 80088ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088ee:	4682      	mov	sl, r0
 80088f0:	1813      	adds	r3, r2, r0
 80088f2:	2a01      	cmp	r2, #1
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	dc02      	bgt.n	80088fe <_printf_float+0x15e>
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	07d2      	lsls	r2, r2, #31
 80088fc:	d501      	bpl.n	8008902 <_printf_float+0x162>
 80088fe:	3301      	adds	r3, #1
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008906:	2b00      	cmp	r3, #0
 8008908:	d09b      	beq.n	8008842 <_printf_float+0xa2>
 800890a:	232d      	movs	r3, #45	; 0x2d
 800890c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008910:	e797      	b.n	8008842 <_printf_float+0xa2>
 8008912:	2947      	cmp	r1, #71	; 0x47
 8008914:	d1bc      	bne.n	8008890 <_printf_float+0xf0>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1ba      	bne.n	8008890 <_printf_float+0xf0>
 800891a:	2301      	movs	r3, #1
 800891c:	e7b7      	b.n	800888e <_printf_float+0xee>
 800891e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008922:	d118      	bne.n	8008956 <_printf_float+0x1b6>
 8008924:	2900      	cmp	r1, #0
 8008926:	6863      	ldr	r3, [r4, #4]
 8008928:	dd0b      	ble.n	8008942 <_printf_float+0x1a2>
 800892a:	6121      	str	r1, [r4, #16]
 800892c:	b913      	cbnz	r3, 8008934 <_printf_float+0x194>
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	07d0      	lsls	r0, r2, #31
 8008932:	d502      	bpl.n	800893a <_printf_float+0x19a>
 8008934:	3301      	adds	r3, #1
 8008936:	440b      	add	r3, r1
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	f04f 0a00 	mov.w	sl, #0
 800893e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008940:	e7df      	b.n	8008902 <_printf_float+0x162>
 8008942:	b913      	cbnz	r3, 800894a <_printf_float+0x1aa>
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	07d2      	lsls	r2, r2, #31
 8008948:	d501      	bpl.n	800894e <_printf_float+0x1ae>
 800894a:	3302      	adds	r3, #2
 800894c:	e7f4      	b.n	8008938 <_printf_float+0x198>
 800894e:	2301      	movs	r3, #1
 8008950:	e7f2      	b.n	8008938 <_printf_float+0x198>
 8008952:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008958:	4299      	cmp	r1, r3
 800895a:	db05      	blt.n	8008968 <_printf_float+0x1c8>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	6121      	str	r1, [r4, #16]
 8008960:	07d8      	lsls	r0, r3, #31
 8008962:	d5ea      	bpl.n	800893a <_printf_float+0x19a>
 8008964:	1c4b      	adds	r3, r1, #1
 8008966:	e7e7      	b.n	8008938 <_printf_float+0x198>
 8008968:	2900      	cmp	r1, #0
 800896a:	bfcc      	ite	gt
 800896c:	2201      	movgt	r2, #1
 800896e:	f1c1 0202 	rsble	r2, r1, #2
 8008972:	4413      	add	r3, r2
 8008974:	e7e0      	b.n	8008938 <_printf_float+0x198>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	055a      	lsls	r2, r3, #21
 800897a:	d407      	bmi.n	800898c <_printf_float+0x1ec>
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	4642      	mov	r2, r8
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	47b8      	blx	r7
 8008986:	3001      	adds	r0, #1
 8008988:	d12b      	bne.n	80089e2 <_printf_float+0x242>
 800898a:	e764      	b.n	8008856 <_printf_float+0xb6>
 800898c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008990:	f240 80dd 	bls.w	8008b4e <_printf_float+0x3ae>
 8008994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008998:	2200      	movs	r2, #0
 800899a:	2300      	movs	r3, #0
 800899c:	f7f8 f81c 	bl	80009d8 <__aeabi_dcmpeq>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d033      	beq.n	8008a0c <_printf_float+0x26c>
 80089a4:	2301      	movs	r3, #1
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	4a35      	ldr	r2, [pc, #212]	; (8008a80 <_printf_float+0x2e0>)
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f af51 	beq.w	8008856 <_printf_float+0xb6>
 80089b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089b8:	429a      	cmp	r2, r3
 80089ba:	db02      	blt.n	80089c2 <_printf_float+0x222>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	07d8      	lsls	r0, r3, #31
 80089c0:	d50f      	bpl.n	80089e2 <_printf_float+0x242>
 80089c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	f43f af42 	beq.w	8008856 <_printf_float+0xb6>
 80089d2:	f04f 0800 	mov.w	r8, #0
 80089d6:	f104 091a 	add.w	r9, r4, #26
 80089da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089dc:	3b01      	subs	r3, #1
 80089de:	4543      	cmp	r3, r8
 80089e0:	dc09      	bgt.n	80089f6 <_printf_float+0x256>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	079b      	lsls	r3, r3, #30
 80089e6:	f100 8102 	bmi.w	8008bee <_printf_float+0x44e>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ee:	4298      	cmp	r0, r3
 80089f0:	bfb8      	it	lt
 80089f2:	4618      	movlt	r0, r3
 80089f4:	e731      	b.n	800885a <_printf_float+0xba>
 80089f6:	2301      	movs	r3, #1
 80089f8:	464a      	mov	r2, r9
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	f43f af28 	beq.w	8008856 <_printf_float+0xb6>
 8008a06:	f108 0801 	add.w	r8, r8, #1
 8008a0a:	e7e6      	b.n	80089da <_printf_float+0x23a>
 8008a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dc38      	bgt.n	8008a84 <_printf_float+0x2e4>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	4a19      	ldr	r2, [pc, #100]	; (8008a80 <_printf_float+0x2e0>)
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f af1a 	beq.w	8008856 <_printf_float+0xb6>
 8008a22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a26:	4313      	orrs	r3, r2
 8008a28:	d102      	bne.n	8008a30 <_printf_float+0x290>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	07d9      	lsls	r1, r3, #31
 8008a2e:	d5d8      	bpl.n	80089e2 <_printf_float+0x242>
 8008a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f af0b 	beq.w	8008856 <_printf_float+0xb6>
 8008a40:	f04f 0900 	mov.w	r9, #0
 8008a44:	f104 0a1a 	add.w	sl, r4, #26
 8008a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a4a:	425b      	negs	r3, r3
 8008a4c:	454b      	cmp	r3, r9
 8008a4e:	dc01      	bgt.n	8008a54 <_printf_float+0x2b4>
 8008a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a52:	e794      	b.n	800897e <_printf_float+0x1de>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4652      	mov	r2, sl
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b8      	blx	r7
 8008a5e:	3001      	adds	r0, #1
 8008a60:	f43f aef9 	beq.w	8008856 <_printf_float+0xb6>
 8008a64:	f109 0901 	add.w	r9, r9, #1
 8008a68:	e7ee      	b.n	8008a48 <_printf_float+0x2a8>
 8008a6a:	bf00      	nop
 8008a6c:	7fefffff 	.word	0x7fefffff
 8008a70:	0800d348 	.word	0x0800d348
 8008a74:	0800d34c 	.word	0x0800d34c
 8008a78:	0800d354 	.word	0x0800d354
 8008a7c:	0800d350 	.word	0x0800d350
 8008a80:	0800d358 	.word	0x0800d358
 8008a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	bfa8      	it	ge
 8008a8c:	461a      	movge	r2, r3
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	4691      	mov	r9, r2
 8008a92:	dc37      	bgt.n	8008b04 <_printf_float+0x364>
 8008a94:	f04f 0b00 	mov.w	fp, #0
 8008a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a9c:	f104 021a 	add.w	r2, r4, #26
 8008aa0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008aa4:	ebaa 0309 	sub.w	r3, sl, r9
 8008aa8:	455b      	cmp	r3, fp
 8008aaa:	dc33      	bgt.n	8008b14 <_printf_float+0x374>
 8008aac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	db3b      	blt.n	8008b2c <_printf_float+0x38c>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07da      	lsls	r2, r3, #31
 8008ab8:	d438      	bmi.n	8008b2c <_printf_float+0x38c>
 8008aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008abc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008abe:	eba2 030a 	sub.w	r3, r2, sl
 8008ac2:	eba2 0901 	sub.w	r9, r2, r1
 8008ac6:	4599      	cmp	r9, r3
 8008ac8:	bfa8      	it	ge
 8008aca:	4699      	movge	r9, r3
 8008acc:	f1b9 0f00 	cmp.w	r9, #0
 8008ad0:	dc34      	bgt.n	8008b3c <_printf_float+0x39c>
 8008ad2:	f04f 0800 	mov.w	r8, #0
 8008ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ada:	f104 0a1a 	add.w	sl, r4, #26
 8008ade:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	eba3 0309 	sub.w	r3, r3, r9
 8008ae8:	4543      	cmp	r3, r8
 8008aea:	f77f af7a 	ble.w	80089e2 <_printf_float+0x242>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4652      	mov	r2, sl
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	f43f aeac 	beq.w	8008856 <_printf_float+0xb6>
 8008afe:	f108 0801 	add.w	r8, r8, #1
 8008b02:	e7ec      	b.n	8008ade <_printf_float+0x33e>
 8008b04:	4613      	mov	r3, r2
 8008b06:	4631      	mov	r1, r6
 8008b08:	4642      	mov	r2, r8
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d1c0      	bne.n	8008a94 <_printf_float+0x2f4>
 8008b12:	e6a0      	b.n	8008856 <_printf_float+0xb6>
 8008b14:	2301      	movs	r3, #1
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b1c:	47b8      	blx	r7
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f43f ae99 	beq.w	8008856 <_printf_float+0xb6>
 8008b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b26:	f10b 0b01 	add.w	fp, fp, #1
 8008b2a:	e7b9      	b.n	8008aa0 <_printf_float+0x300>
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	d1bf      	bne.n	8008aba <_printf_float+0x31a>
 8008b3a:	e68c      	b.n	8008856 <_printf_float+0xb6>
 8008b3c:	464b      	mov	r3, r9
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	eb08 020a 	add.w	r2, r8, sl
 8008b46:	47b8      	blx	r7
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d1c2      	bne.n	8008ad2 <_printf_float+0x332>
 8008b4c:	e683      	b.n	8008856 <_printf_float+0xb6>
 8008b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b50:	2a01      	cmp	r2, #1
 8008b52:	dc01      	bgt.n	8008b58 <_printf_float+0x3b8>
 8008b54:	07db      	lsls	r3, r3, #31
 8008b56:	d537      	bpl.n	8008bc8 <_printf_float+0x428>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4642      	mov	r2, r8
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	f43f ae77 	beq.w	8008856 <_printf_float+0xb6>
 8008b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f ae6f 	beq.w	8008856 <_printf_float+0xb6>
 8008b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f7f7 ff2a 	bl	80009d8 <__aeabi_dcmpeq>
 8008b84:	b9d8      	cbnz	r0, 8008bbe <_printf_float+0x41e>
 8008b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b88:	f108 0201 	add.w	r2, r8, #1
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	d10e      	bne.n	8008bb6 <_printf_float+0x416>
 8008b98:	e65d      	b.n	8008856 <_printf_float+0xb6>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	464a      	mov	r2, r9
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f ae56 	beq.w	8008856 <_printf_float+0xb6>
 8008baa:	f108 0801 	add.w	r8, r8, #1
 8008bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	4543      	cmp	r3, r8
 8008bb4:	dcf1      	bgt.n	8008b9a <_printf_float+0x3fa>
 8008bb6:	4653      	mov	r3, sl
 8008bb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bbc:	e6e0      	b.n	8008980 <_printf_float+0x1e0>
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	f104 091a 	add.w	r9, r4, #26
 8008bc6:	e7f2      	b.n	8008bae <_printf_float+0x40e>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	4642      	mov	r2, r8
 8008bcc:	e7df      	b.n	8008b8e <_printf_float+0x3ee>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	464a      	mov	r2, r9
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f43f ae3c 	beq.w	8008856 <_printf_float+0xb6>
 8008bde:	f108 0801 	add.w	r8, r8, #1
 8008be2:	68e3      	ldr	r3, [r4, #12]
 8008be4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008be6:	1a5b      	subs	r3, r3, r1
 8008be8:	4543      	cmp	r3, r8
 8008bea:	dcf0      	bgt.n	8008bce <_printf_float+0x42e>
 8008bec:	e6fd      	b.n	80089ea <_printf_float+0x24a>
 8008bee:	f04f 0800 	mov.w	r8, #0
 8008bf2:	f104 0919 	add.w	r9, r4, #25
 8008bf6:	e7f4      	b.n	8008be2 <_printf_float+0x442>

08008bf8 <_printf_common>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	4616      	mov	r6, r2
 8008bfe:	4699      	mov	r9, r3
 8008c00:	688a      	ldr	r2, [r1, #8]
 8008c02:	690b      	ldr	r3, [r1, #16]
 8008c04:	4607      	mov	r7, r0
 8008c06:	4293      	cmp	r3, r2
 8008c08:	bfb8      	it	lt
 8008c0a:	4613      	movlt	r3, r2
 8008c0c:	6033      	str	r3, [r6, #0]
 8008c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c12:	460c      	mov	r4, r1
 8008c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c18:	b10a      	cbz	r2, 8008c1e <_printf_common+0x26>
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	0699      	lsls	r1, r3, #26
 8008c22:	bf42      	ittt	mi
 8008c24:	6833      	ldrmi	r3, [r6, #0]
 8008c26:	3302      	addmi	r3, #2
 8008c28:	6033      	strmi	r3, [r6, #0]
 8008c2a:	6825      	ldr	r5, [r4, #0]
 8008c2c:	f015 0506 	ands.w	r5, r5, #6
 8008c30:	d106      	bne.n	8008c40 <_printf_common+0x48>
 8008c32:	f104 0a19 	add.w	sl, r4, #25
 8008c36:	68e3      	ldr	r3, [r4, #12]
 8008c38:	6832      	ldr	r2, [r6, #0]
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	dc28      	bgt.n	8008c92 <_printf_common+0x9a>
 8008c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c44:	1e13      	subs	r3, r2, #0
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	bf18      	it	ne
 8008c4a:	2301      	movne	r3, #1
 8008c4c:	0692      	lsls	r2, r2, #26
 8008c4e:	d42d      	bmi.n	8008cac <_printf_common+0xb4>
 8008c50:	4649      	mov	r1, r9
 8008c52:	4638      	mov	r0, r7
 8008c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c58:	47c0      	blx	r8
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	d020      	beq.n	8008ca0 <_printf_common+0xa8>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	68e5      	ldr	r5, [r4, #12]
 8008c62:	f003 0306 	and.w	r3, r3, #6
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	bf18      	it	ne
 8008c6a:	2500      	movne	r5, #0
 8008c6c:	6832      	ldr	r2, [r6, #0]
 8008c6e:	f04f 0600 	mov.w	r6, #0
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	bf08      	it	eq
 8008c76:	1aad      	subeq	r5, r5, r2
 8008c78:	6922      	ldr	r2, [r4, #16]
 8008c7a:	bf08      	it	eq
 8008c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c80:	4293      	cmp	r3, r2
 8008c82:	bfc4      	itt	gt
 8008c84:	1a9b      	subgt	r3, r3, r2
 8008c86:	18ed      	addgt	r5, r5, r3
 8008c88:	341a      	adds	r4, #26
 8008c8a:	42b5      	cmp	r5, r6
 8008c8c:	d11a      	bne.n	8008cc4 <_printf_common+0xcc>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e008      	b.n	8008ca4 <_printf_common+0xac>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4652      	mov	r2, sl
 8008c96:	4649      	mov	r1, r9
 8008c98:	4638      	mov	r0, r7
 8008c9a:	47c0      	blx	r8
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d103      	bne.n	8008ca8 <_printf_common+0xb0>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca8:	3501      	adds	r5, #1
 8008caa:	e7c4      	b.n	8008c36 <_printf_common+0x3e>
 8008cac:	2030      	movs	r0, #48	; 0x30
 8008cae:	18e1      	adds	r1, r4, r3
 8008cb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cba:	4422      	add	r2, r4
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cc2:	e7c5      	b.n	8008c50 <_printf_common+0x58>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	4649      	mov	r1, r9
 8008cca:	4638      	mov	r0, r7
 8008ccc:	47c0      	blx	r8
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d0e6      	beq.n	8008ca0 <_printf_common+0xa8>
 8008cd2:	3601      	adds	r6, #1
 8008cd4:	e7d9      	b.n	8008c8a <_printf_common+0x92>
	...

08008cd8 <_printf_i>:
 8008cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cdc:	460c      	mov	r4, r1
 8008cde:	7e27      	ldrb	r7, [r4, #24]
 8008ce0:	4691      	mov	r9, r2
 8008ce2:	2f78      	cmp	r7, #120	; 0x78
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	469a      	mov	sl, r3
 8008ce8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cee:	d807      	bhi.n	8008d00 <_printf_i+0x28>
 8008cf0:	2f62      	cmp	r7, #98	; 0x62
 8008cf2:	d80a      	bhi.n	8008d0a <_printf_i+0x32>
 8008cf4:	2f00      	cmp	r7, #0
 8008cf6:	f000 80d9 	beq.w	8008eac <_printf_i+0x1d4>
 8008cfa:	2f58      	cmp	r7, #88	; 0x58
 8008cfc:	f000 80a4 	beq.w	8008e48 <_printf_i+0x170>
 8008d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d08:	e03a      	b.n	8008d80 <_printf_i+0xa8>
 8008d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d0e:	2b15      	cmp	r3, #21
 8008d10:	d8f6      	bhi.n	8008d00 <_printf_i+0x28>
 8008d12:	a001      	add	r0, pc, #4	; (adr r0, 8008d18 <_printf_i+0x40>)
 8008d14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d18:	08008d71 	.word	0x08008d71
 8008d1c:	08008d85 	.word	0x08008d85
 8008d20:	08008d01 	.word	0x08008d01
 8008d24:	08008d01 	.word	0x08008d01
 8008d28:	08008d01 	.word	0x08008d01
 8008d2c:	08008d01 	.word	0x08008d01
 8008d30:	08008d85 	.word	0x08008d85
 8008d34:	08008d01 	.word	0x08008d01
 8008d38:	08008d01 	.word	0x08008d01
 8008d3c:	08008d01 	.word	0x08008d01
 8008d40:	08008d01 	.word	0x08008d01
 8008d44:	08008e93 	.word	0x08008e93
 8008d48:	08008db5 	.word	0x08008db5
 8008d4c:	08008e75 	.word	0x08008e75
 8008d50:	08008d01 	.word	0x08008d01
 8008d54:	08008d01 	.word	0x08008d01
 8008d58:	08008eb5 	.word	0x08008eb5
 8008d5c:	08008d01 	.word	0x08008d01
 8008d60:	08008db5 	.word	0x08008db5
 8008d64:	08008d01 	.word	0x08008d01
 8008d68:	08008d01 	.word	0x08008d01
 8008d6c:	08008e7d 	.word	0x08008e7d
 8008d70:	680b      	ldr	r3, [r1, #0]
 8008d72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d76:	1d1a      	adds	r2, r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	600a      	str	r2, [r1, #0]
 8008d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d80:	2301      	movs	r3, #1
 8008d82:	e0a4      	b.n	8008ece <_printf_i+0x1f6>
 8008d84:	6825      	ldr	r5, [r4, #0]
 8008d86:	6808      	ldr	r0, [r1, #0]
 8008d88:	062e      	lsls	r6, r5, #24
 8008d8a:	f100 0304 	add.w	r3, r0, #4
 8008d8e:	d50a      	bpl.n	8008da6 <_printf_i+0xce>
 8008d90:	6805      	ldr	r5, [r0, #0]
 8008d92:	600b      	str	r3, [r1, #0]
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	da03      	bge.n	8008da0 <_printf_i+0xc8>
 8008d98:	232d      	movs	r3, #45	; 0x2d
 8008d9a:	426d      	negs	r5, r5
 8008d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008da0:	230a      	movs	r3, #10
 8008da2:	485e      	ldr	r0, [pc, #376]	; (8008f1c <_printf_i+0x244>)
 8008da4:	e019      	b.n	8008dda <_printf_i+0x102>
 8008da6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008daa:	6805      	ldr	r5, [r0, #0]
 8008dac:	600b      	str	r3, [r1, #0]
 8008dae:	bf18      	it	ne
 8008db0:	b22d      	sxthne	r5, r5
 8008db2:	e7ef      	b.n	8008d94 <_printf_i+0xbc>
 8008db4:	680b      	ldr	r3, [r1, #0]
 8008db6:	6825      	ldr	r5, [r4, #0]
 8008db8:	1d18      	adds	r0, r3, #4
 8008dba:	6008      	str	r0, [r1, #0]
 8008dbc:	0628      	lsls	r0, r5, #24
 8008dbe:	d501      	bpl.n	8008dc4 <_printf_i+0xec>
 8008dc0:	681d      	ldr	r5, [r3, #0]
 8008dc2:	e002      	b.n	8008dca <_printf_i+0xf2>
 8008dc4:	0669      	lsls	r1, r5, #25
 8008dc6:	d5fb      	bpl.n	8008dc0 <_printf_i+0xe8>
 8008dc8:	881d      	ldrh	r5, [r3, #0]
 8008dca:	2f6f      	cmp	r7, #111	; 0x6f
 8008dcc:	bf0c      	ite	eq
 8008dce:	2308      	moveq	r3, #8
 8008dd0:	230a      	movne	r3, #10
 8008dd2:	4852      	ldr	r0, [pc, #328]	; (8008f1c <_printf_i+0x244>)
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dda:	6866      	ldr	r6, [r4, #4]
 8008ddc:	2e00      	cmp	r6, #0
 8008dde:	bfa8      	it	ge
 8008de0:	6821      	ldrge	r1, [r4, #0]
 8008de2:	60a6      	str	r6, [r4, #8]
 8008de4:	bfa4      	itt	ge
 8008de6:	f021 0104 	bicge.w	r1, r1, #4
 8008dea:	6021      	strge	r1, [r4, #0]
 8008dec:	b90d      	cbnz	r5, 8008df2 <_printf_i+0x11a>
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	d04d      	beq.n	8008e8e <_printf_i+0x1b6>
 8008df2:	4616      	mov	r6, r2
 8008df4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008df8:	fb03 5711 	mls	r7, r3, r1, r5
 8008dfc:	5dc7      	ldrb	r7, [r0, r7]
 8008dfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e02:	462f      	mov	r7, r5
 8008e04:	42bb      	cmp	r3, r7
 8008e06:	460d      	mov	r5, r1
 8008e08:	d9f4      	bls.n	8008df4 <_printf_i+0x11c>
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d10b      	bne.n	8008e26 <_printf_i+0x14e>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	07df      	lsls	r7, r3, #31
 8008e12:	d508      	bpl.n	8008e26 <_printf_i+0x14e>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	6861      	ldr	r1, [r4, #4]
 8008e18:	4299      	cmp	r1, r3
 8008e1a:	bfde      	ittt	le
 8008e1c:	2330      	movle	r3, #48	; 0x30
 8008e1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e26:	1b92      	subs	r2, r2, r6
 8008e28:	6122      	str	r2, [r4, #16]
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4640      	mov	r0, r8
 8008e30:	f8cd a000 	str.w	sl, [sp]
 8008e34:	aa03      	add	r2, sp, #12
 8008e36:	f7ff fedf 	bl	8008bf8 <_printf_common>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d14c      	bne.n	8008ed8 <_printf_i+0x200>
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	b004      	add	sp, #16
 8008e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e48:	4834      	ldr	r0, [pc, #208]	; (8008f1c <_printf_i+0x244>)
 8008e4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e4e:	680e      	ldr	r6, [r1, #0]
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e56:	061f      	lsls	r7, r3, #24
 8008e58:	600e      	str	r6, [r1, #0]
 8008e5a:	d514      	bpl.n	8008e86 <_printf_i+0x1ae>
 8008e5c:	07d9      	lsls	r1, r3, #31
 8008e5e:	bf44      	itt	mi
 8008e60:	f043 0320 	orrmi.w	r3, r3, #32
 8008e64:	6023      	strmi	r3, [r4, #0]
 8008e66:	b91d      	cbnz	r5, 8008e70 <_printf_i+0x198>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	f023 0320 	bic.w	r3, r3, #32
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	2310      	movs	r3, #16
 8008e72:	e7af      	b.n	8008dd4 <_printf_i+0xfc>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	f043 0320 	orr.w	r3, r3, #32
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	2378      	movs	r3, #120	; 0x78
 8008e7e:	4828      	ldr	r0, [pc, #160]	; (8008f20 <_printf_i+0x248>)
 8008e80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e84:	e7e3      	b.n	8008e4e <_printf_i+0x176>
 8008e86:	065e      	lsls	r6, r3, #25
 8008e88:	bf48      	it	mi
 8008e8a:	b2ad      	uxthmi	r5, r5
 8008e8c:	e7e6      	b.n	8008e5c <_printf_i+0x184>
 8008e8e:	4616      	mov	r6, r2
 8008e90:	e7bb      	b.n	8008e0a <_printf_i+0x132>
 8008e92:	680b      	ldr	r3, [r1, #0]
 8008e94:	6826      	ldr	r6, [r4, #0]
 8008e96:	1d1d      	adds	r5, r3, #4
 8008e98:	6960      	ldr	r0, [r4, #20]
 8008e9a:	600d      	str	r5, [r1, #0]
 8008e9c:	0635      	lsls	r5, r6, #24
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	d501      	bpl.n	8008ea6 <_printf_i+0x1ce>
 8008ea2:	6018      	str	r0, [r3, #0]
 8008ea4:	e002      	b.n	8008eac <_printf_i+0x1d4>
 8008ea6:	0671      	lsls	r1, r6, #25
 8008ea8:	d5fb      	bpl.n	8008ea2 <_printf_i+0x1ca>
 8008eaa:	8018      	strh	r0, [r3, #0]
 8008eac:	2300      	movs	r3, #0
 8008eae:	4616      	mov	r6, r2
 8008eb0:	6123      	str	r3, [r4, #16]
 8008eb2:	e7ba      	b.n	8008e2a <_printf_i+0x152>
 8008eb4:	680b      	ldr	r3, [r1, #0]
 8008eb6:	1d1a      	adds	r2, r3, #4
 8008eb8:	600a      	str	r2, [r1, #0]
 8008eba:	681e      	ldr	r6, [r3, #0]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	6862      	ldr	r2, [r4, #4]
 8008ec2:	f002 fb53 	bl	800b56c <memchr>
 8008ec6:	b108      	cbz	r0, 8008ecc <_printf_i+0x1f4>
 8008ec8:	1b80      	subs	r0, r0, r6
 8008eca:	6060      	str	r0, [r4, #4]
 8008ecc:	6863      	ldr	r3, [r4, #4]
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed6:	e7a8      	b.n	8008e2a <_printf_i+0x152>
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4649      	mov	r1, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	47d0      	blx	sl
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	d0ab      	beq.n	8008e3e <_printf_i+0x166>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	079b      	lsls	r3, r3, #30
 8008eea:	d413      	bmi.n	8008f14 <_printf_i+0x23c>
 8008eec:	68e0      	ldr	r0, [r4, #12]
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	4298      	cmp	r0, r3
 8008ef2:	bfb8      	it	lt
 8008ef4:	4618      	movlt	r0, r3
 8008ef6:	e7a4      	b.n	8008e42 <_printf_i+0x16a>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4632      	mov	r2, r6
 8008efc:	4649      	mov	r1, r9
 8008efe:	4640      	mov	r0, r8
 8008f00:	47d0      	blx	sl
 8008f02:	3001      	adds	r0, #1
 8008f04:	d09b      	beq.n	8008e3e <_printf_i+0x166>
 8008f06:	3501      	adds	r5, #1
 8008f08:	68e3      	ldr	r3, [r4, #12]
 8008f0a:	9903      	ldr	r1, [sp, #12]
 8008f0c:	1a5b      	subs	r3, r3, r1
 8008f0e:	42ab      	cmp	r3, r5
 8008f10:	dcf2      	bgt.n	8008ef8 <_printf_i+0x220>
 8008f12:	e7eb      	b.n	8008eec <_printf_i+0x214>
 8008f14:	2500      	movs	r5, #0
 8008f16:	f104 0619 	add.w	r6, r4, #25
 8008f1a:	e7f5      	b.n	8008f08 <_printf_i+0x230>
 8008f1c:	0800d35a 	.word	0x0800d35a
 8008f20:	0800d36b 	.word	0x0800d36b

08008f24 <_scanf_float>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	b087      	sub	sp, #28
 8008f2a:	9303      	str	r3, [sp, #12]
 8008f2c:	688b      	ldr	r3, [r1, #8]
 8008f2e:	4617      	mov	r7, r2
 8008f30:	1e5a      	subs	r2, r3, #1
 8008f32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f36:	bf85      	ittet	hi
 8008f38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f3c:	195b      	addhi	r3, r3, r5
 8008f3e:	2300      	movls	r3, #0
 8008f40:	9302      	strhi	r3, [sp, #8]
 8008f42:	bf88      	it	hi
 8008f44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f48:	468b      	mov	fp, r1
 8008f4a:	f04f 0500 	mov.w	r5, #0
 8008f4e:	bf8c      	ite	hi
 8008f50:	608b      	strhi	r3, [r1, #8]
 8008f52:	9302      	strls	r3, [sp, #8]
 8008f54:	680b      	ldr	r3, [r1, #0]
 8008f56:	4680      	mov	r8, r0
 8008f58:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f5c:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f60:	460c      	mov	r4, r1
 8008f62:	465e      	mov	r6, fp
 8008f64:	46aa      	mov	sl, r5
 8008f66:	46a9      	mov	r9, r5
 8008f68:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f6c:	9501      	str	r5, [sp, #4]
 8008f6e:	68a2      	ldr	r2, [r4, #8]
 8008f70:	b152      	cbz	r2, 8008f88 <_scanf_float+0x64>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b4e      	cmp	r3, #78	; 0x4e
 8008f78:	d864      	bhi.n	8009044 <_scanf_float+0x120>
 8008f7a:	2b40      	cmp	r3, #64	; 0x40
 8008f7c:	d83c      	bhi.n	8008ff8 <_scanf_float+0xd4>
 8008f7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f82:	b2c8      	uxtb	r0, r1
 8008f84:	280e      	cmp	r0, #14
 8008f86:	d93a      	bls.n	8008ffe <_scanf_float+0xda>
 8008f88:	f1b9 0f00 	cmp.w	r9, #0
 8008f8c:	d003      	beq.n	8008f96 <_scanf_float+0x72>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f9a:	f1ba 0f01 	cmp.w	sl, #1
 8008f9e:	f200 8113 	bhi.w	80091c8 <_scanf_float+0x2a4>
 8008fa2:	455e      	cmp	r6, fp
 8008fa4:	f200 8105 	bhi.w	80091b2 <_scanf_float+0x28e>
 8008fa8:	2501      	movs	r5, #1
 8008faa:	4628      	mov	r0, r5
 8008fac:	b007      	add	sp, #28
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fb6:	2a0d      	cmp	r2, #13
 8008fb8:	d8e6      	bhi.n	8008f88 <_scanf_float+0x64>
 8008fba:	a101      	add	r1, pc, #4	; (adr r1, 8008fc0 <_scanf_float+0x9c>)
 8008fbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fc0:	080090ff 	.word	0x080090ff
 8008fc4:	08008f89 	.word	0x08008f89
 8008fc8:	08008f89 	.word	0x08008f89
 8008fcc:	08008f89 	.word	0x08008f89
 8008fd0:	0800915f 	.word	0x0800915f
 8008fd4:	08009137 	.word	0x08009137
 8008fd8:	08008f89 	.word	0x08008f89
 8008fdc:	08008f89 	.word	0x08008f89
 8008fe0:	0800910d 	.word	0x0800910d
 8008fe4:	08008f89 	.word	0x08008f89
 8008fe8:	08008f89 	.word	0x08008f89
 8008fec:	08008f89 	.word	0x08008f89
 8008ff0:	08008f89 	.word	0x08008f89
 8008ff4:	080090c5 	.word	0x080090c5
 8008ff8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ffc:	e7db      	b.n	8008fb6 <_scanf_float+0x92>
 8008ffe:	290e      	cmp	r1, #14
 8009000:	d8c2      	bhi.n	8008f88 <_scanf_float+0x64>
 8009002:	a001      	add	r0, pc, #4	; (adr r0, 8009008 <_scanf_float+0xe4>)
 8009004:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009008:	080090b7 	.word	0x080090b7
 800900c:	08008f89 	.word	0x08008f89
 8009010:	080090b7 	.word	0x080090b7
 8009014:	0800914b 	.word	0x0800914b
 8009018:	08008f89 	.word	0x08008f89
 800901c:	08009065 	.word	0x08009065
 8009020:	080090a1 	.word	0x080090a1
 8009024:	080090a1 	.word	0x080090a1
 8009028:	080090a1 	.word	0x080090a1
 800902c:	080090a1 	.word	0x080090a1
 8009030:	080090a1 	.word	0x080090a1
 8009034:	080090a1 	.word	0x080090a1
 8009038:	080090a1 	.word	0x080090a1
 800903c:	080090a1 	.word	0x080090a1
 8009040:	080090a1 	.word	0x080090a1
 8009044:	2b6e      	cmp	r3, #110	; 0x6e
 8009046:	d809      	bhi.n	800905c <_scanf_float+0x138>
 8009048:	2b60      	cmp	r3, #96	; 0x60
 800904a:	d8b2      	bhi.n	8008fb2 <_scanf_float+0x8e>
 800904c:	2b54      	cmp	r3, #84	; 0x54
 800904e:	d077      	beq.n	8009140 <_scanf_float+0x21c>
 8009050:	2b59      	cmp	r3, #89	; 0x59
 8009052:	d199      	bne.n	8008f88 <_scanf_float+0x64>
 8009054:	2d07      	cmp	r5, #7
 8009056:	d197      	bne.n	8008f88 <_scanf_float+0x64>
 8009058:	2508      	movs	r5, #8
 800905a:	e029      	b.n	80090b0 <_scanf_float+0x18c>
 800905c:	2b74      	cmp	r3, #116	; 0x74
 800905e:	d06f      	beq.n	8009140 <_scanf_float+0x21c>
 8009060:	2b79      	cmp	r3, #121	; 0x79
 8009062:	e7f6      	b.n	8009052 <_scanf_float+0x12e>
 8009064:	6821      	ldr	r1, [r4, #0]
 8009066:	05c8      	lsls	r0, r1, #23
 8009068:	d51a      	bpl.n	80090a0 <_scanf_float+0x17c>
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009070:	6021      	str	r1, [r4, #0]
 8009072:	f109 0901 	add.w	r9, r9, #1
 8009076:	b11b      	cbz	r3, 8009080 <_scanf_float+0x15c>
 8009078:	3b01      	subs	r3, #1
 800907a:	3201      	adds	r2, #1
 800907c:	9302      	str	r3, [sp, #8]
 800907e:	60a2      	str	r2, [r4, #8]
 8009080:	68a3      	ldr	r3, [r4, #8]
 8009082:	3b01      	subs	r3, #1
 8009084:	60a3      	str	r3, [r4, #8]
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	3301      	adds	r3, #1
 800908a:	6123      	str	r3, [r4, #16]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3b01      	subs	r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	607b      	str	r3, [r7, #4]
 8009094:	f340 8084 	ble.w	80091a0 <_scanf_float+0x27c>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	3301      	adds	r3, #1
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	e766      	b.n	8008f6e <_scanf_float+0x4a>
 80090a0:	eb1a 0f05 	cmn.w	sl, r5
 80090a4:	f47f af70 	bne.w	8008f88 <_scanf_float+0x64>
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090ae:	6022      	str	r2, [r4, #0]
 80090b0:	f806 3b01 	strb.w	r3, [r6], #1
 80090b4:	e7e4      	b.n	8009080 <_scanf_float+0x15c>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	0610      	lsls	r0, r2, #24
 80090ba:	f57f af65 	bpl.w	8008f88 <_scanf_float+0x64>
 80090be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090c2:	e7f4      	b.n	80090ae <_scanf_float+0x18a>
 80090c4:	f1ba 0f00 	cmp.w	sl, #0
 80090c8:	d10e      	bne.n	80090e8 <_scanf_float+0x1c4>
 80090ca:	f1b9 0f00 	cmp.w	r9, #0
 80090ce:	d10e      	bne.n	80090ee <_scanf_float+0x1ca>
 80090d0:	6822      	ldr	r2, [r4, #0]
 80090d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090da:	d108      	bne.n	80090ee <_scanf_float+0x1ca>
 80090dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090e0:	f04f 0a01 	mov.w	sl, #1
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	e7e3      	b.n	80090b0 <_scanf_float+0x18c>
 80090e8:	f1ba 0f02 	cmp.w	sl, #2
 80090ec:	d055      	beq.n	800919a <_scanf_float+0x276>
 80090ee:	2d01      	cmp	r5, #1
 80090f0:	d002      	beq.n	80090f8 <_scanf_float+0x1d4>
 80090f2:	2d04      	cmp	r5, #4
 80090f4:	f47f af48 	bne.w	8008f88 <_scanf_float+0x64>
 80090f8:	3501      	adds	r5, #1
 80090fa:	b2ed      	uxtb	r5, r5
 80090fc:	e7d8      	b.n	80090b0 <_scanf_float+0x18c>
 80090fe:	f1ba 0f01 	cmp.w	sl, #1
 8009102:	f47f af41 	bne.w	8008f88 <_scanf_float+0x64>
 8009106:	f04f 0a02 	mov.w	sl, #2
 800910a:	e7d1      	b.n	80090b0 <_scanf_float+0x18c>
 800910c:	b97d      	cbnz	r5, 800912e <_scanf_float+0x20a>
 800910e:	f1b9 0f00 	cmp.w	r9, #0
 8009112:	f47f af3c 	bne.w	8008f8e <_scanf_float+0x6a>
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800911c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009120:	f47f af39 	bne.w	8008f96 <_scanf_float+0x72>
 8009124:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009128:	2501      	movs	r5, #1
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	e7c0      	b.n	80090b0 <_scanf_float+0x18c>
 800912e:	2d03      	cmp	r5, #3
 8009130:	d0e2      	beq.n	80090f8 <_scanf_float+0x1d4>
 8009132:	2d05      	cmp	r5, #5
 8009134:	e7de      	b.n	80090f4 <_scanf_float+0x1d0>
 8009136:	2d02      	cmp	r5, #2
 8009138:	f47f af26 	bne.w	8008f88 <_scanf_float+0x64>
 800913c:	2503      	movs	r5, #3
 800913e:	e7b7      	b.n	80090b0 <_scanf_float+0x18c>
 8009140:	2d06      	cmp	r5, #6
 8009142:	f47f af21 	bne.w	8008f88 <_scanf_float+0x64>
 8009146:	2507      	movs	r5, #7
 8009148:	e7b2      	b.n	80090b0 <_scanf_float+0x18c>
 800914a:	6822      	ldr	r2, [r4, #0]
 800914c:	0591      	lsls	r1, r2, #22
 800914e:	f57f af1b 	bpl.w	8008f88 <_scanf_float+0x64>
 8009152:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009156:	6022      	str	r2, [r4, #0]
 8009158:	f8cd 9004 	str.w	r9, [sp, #4]
 800915c:	e7a8      	b.n	80090b0 <_scanf_float+0x18c>
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009164:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009168:	d006      	beq.n	8009178 <_scanf_float+0x254>
 800916a:	0550      	lsls	r0, r2, #21
 800916c:	f57f af0c 	bpl.w	8008f88 <_scanf_float+0x64>
 8009170:	f1b9 0f00 	cmp.w	r9, #0
 8009174:	f43f af0f 	beq.w	8008f96 <_scanf_float+0x72>
 8009178:	0591      	lsls	r1, r2, #22
 800917a:	bf58      	it	pl
 800917c:	9901      	ldrpl	r1, [sp, #4]
 800917e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009182:	bf58      	it	pl
 8009184:	eba9 0101 	subpl.w	r1, r9, r1
 8009188:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800918c:	f04f 0900 	mov.w	r9, #0
 8009190:	bf58      	it	pl
 8009192:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009196:	6022      	str	r2, [r4, #0]
 8009198:	e78a      	b.n	80090b0 <_scanf_float+0x18c>
 800919a:	f04f 0a03 	mov.w	sl, #3
 800919e:	e787      	b.n	80090b0 <_scanf_float+0x18c>
 80091a0:	4639      	mov	r1, r7
 80091a2:	4640      	mov	r0, r8
 80091a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091a8:	4798      	blx	r3
 80091aa:	2800      	cmp	r0, #0
 80091ac:	f43f aedf 	beq.w	8008f6e <_scanf_float+0x4a>
 80091b0:	e6ea      	b.n	8008f88 <_scanf_float+0x64>
 80091b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091b6:	463a      	mov	r2, r7
 80091b8:	4640      	mov	r0, r8
 80091ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091be:	4798      	blx	r3
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	e6ec      	b.n	8008fa2 <_scanf_float+0x7e>
 80091c8:	1e6b      	subs	r3, r5, #1
 80091ca:	2b06      	cmp	r3, #6
 80091cc:	d825      	bhi.n	800921a <_scanf_float+0x2f6>
 80091ce:	2d02      	cmp	r5, #2
 80091d0:	d836      	bhi.n	8009240 <_scanf_float+0x31c>
 80091d2:	455e      	cmp	r6, fp
 80091d4:	f67f aee8 	bls.w	8008fa8 <_scanf_float+0x84>
 80091d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091dc:	463a      	mov	r2, r7
 80091de:	4640      	mov	r0, r8
 80091e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091e4:	4798      	blx	r3
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	e7f1      	b.n	80091d2 <_scanf_float+0x2ae>
 80091ee:	9802      	ldr	r0, [sp, #8]
 80091f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80091f8:	463a      	mov	r2, r7
 80091fa:	9002      	str	r0, [sp, #8]
 80091fc:	4640      	mov	r0, r8
 80091fe:	4798      	blx	r3
 8009200:	6923      	ldr	r3, [r4, #16]
 8009202:	3b01      	subs	r3, #1
 8009204:	6123      	str	r3, [r4, #16]
 8009206:	f10a 3aff 	add.w	sl, sl, #4294967295
 800920a:	fa5f fa8a 	uxtb.w	sl, sl
 800920e:	f1ba 0f02 	cmp.w	sl, #2
 8009212:	d1ec      	bne.n	80091ee <_scanf_float+0x2ca>
 8009214:	3d03      	subs	r5, #3
 8009216:	b2ed      	uxtb	r5, r5
 8009218:	1b76      	subs	r6, r6, r5
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	05da      	lsls	r2, r3, #23
 800921e:	d52f      	bpl.n	8009280 <_scanf_float+0x35c>
 8009220:	055b      	lsls	r3, r3, #21
 8009222:	d510      	bpl.n	8009246 <_scanf_float+0x322>
 8009224:	455e      	cmp	r6, fp
 8009226:	f67f aebf 	bls.w	8008fa8 <_scanf_float+0x84>
 800922a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800922e:	463a      	mov	r2, r7
 8009230:	4640      	mov	r0, r8
 8009232:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009236:	4798      	blx	r3
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	3b01      	subs	r3, #1
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	e7f1      	b.n	8009224 <_scanf_float+0x300>
 8009240:	46aa      	mov	sl, r5
 8009242:	9602      	str	r6, [sp, #8]
 8009244:	e7df      	b.n	8009206 <_scanf_float+0x2e2>
 8009246:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	2965      	cmp	r1, #101	; 0x65
 800924e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009252:	f106 35ff 	add.w	r5, r6, #4294967295
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	d00c      	beq.n	8009274 <_scanf_float+0x350>
 800925a:	2945      	cmp	r1, #69	; 0x45
 800925c:	d00a      	beq.n	8009274 <_scanf_float+0x350>
 800925e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009262:	463a      	mov	r2, r7
 8009264:	4640      	mov	r0, r8
 8009266:	4798      	blx	r3
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800926e:	3b01      	subs	r3, #1
 8009270:	1eb5      	subs	r5, r6, #2
 8009272:	6123      	str	r3, [r4, #16]
 8009274:	463a      	mov	r2, r7
 8009276:	4640      	mov	r0, r8
 8009278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800927c:	4798      	blx	r3
 800927e:	462e      	mov	r6, r5
 8009280:	6825      	ldr	r5, [r4, #0]
 8009282:	f015 0510 	ands.w	r5, r5, #16
 8009286:	d159      	bne.n	800933c <_scanf_float+0x418>
 8009288:	7035      	strb	r5, [r6, #0]
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009294:	d11c      	bne.n	80092d0 <_scanf_float+0x3ac>
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	454b      	cmp	r3, r9
 800929a:	eba3 0209 	sub.w	r2, r3, r9
 800929e:	d124      	bne.n	80092ea <_scanf_float+0x3c6>
 80092a0:	2200      	movs	r2, #0
 80092a2:	4659      	mov	r1, fp
 80092a4:	4640      	mov	r0, r8
 80092a6:	f000 fed3 	bl	800a050 <_strtod_r>
 80092aa:	f8d4 c000 	ldr.w	ip, [r4]
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	f01c 0f02 	tst.w	ip, #2
 80092b4:	4606      	mov	r6, r0
 80092b6:	460f      	mov	r7, r1
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	d021      	beq.n	8009300 <_scanf_float+0x3dc>
 80092bc:	9903      	ldr	r1, [sp, #12]
 80092be:	1d1a      	adds	r2, r3, #4
 80092c0:	600a      	str	r2, [r1, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	e9c3 6700 	strd	r6, r7, [r3]
 80092c8:	68e3      	ldr	r3, [r4, #12]
 80092ca:	3301      	adds	r3, #1
 80092cc:	60e3      	str	r3, [r4, #12]
 80092ce:	e66c      	b.n	8008faa <_scanf_float+0x86>
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0e4      	beq.n	80092a0 <_scanf_float+0x37c>
 80092d6:	9905      	ldr	r1, [sp, #20]
 80092d8:	230a      	movs	r3, #10
 80092da:	462a      	mov	r2, r5
 80092dc:	4640      	mov	r0, r8
 80092de:	3101      	adds	r1, #1
 80092e0:	f000 ff42 	bl	800a168 <_strtol_r>
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	9e05      	ldr	r6, [sp, #20]
 80092e8:	1ac2      	subs	r2, r0, r3
 80092ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092ee:	429e      	cmp	r6, r3
 80092f0:	bf28      	it	cs
 80092f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092f6:	4630      	mov	r0, r6
 80092f8:	4911      	ldr	r1, [pc, #68]	; (8009340 <_scanf_float+0x41c>)
 80092fa:	f000 f85d 	bl	80093b8 <siprintf>
 80092fe:	e7cf      	b.n	80092a0 <_scanf_float+0x37c>
 8009300:	f01c 0f04 	tst.w	ip, #4
 8009304:	f103 0e04 	add.w	lr, r3, #4
 8009308:	d003      	beq.n	8009312 <_scanf_float+0x3ee>
 800930a:	9903      	ldr	r1, [sp, #12]
 800930c:	f8c1 e000 	str.w	lr, [r1]
 8009310:	e7d7      	b.n	80092c2 <_scanf_float+0x39e>
 8009312:	9a03      	ldr	r2, [sp, #12]
 8009314:	f8c2 e000 	str.w	lr, [r2]
 8009318:	f8d3 8000 	ldr.w	r8, [r3]
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	f7f7 fb8c 	bl	8000a3c <__aeabi_dcmpun>
 8009324:	b128      	cbz	r0, 8009332 <_scanf_float+0x40e>
 8009326:	4807      	ldr	r0, [pc, #28]	; (8009344 <_scanf_float+0x420>)
 8009328:	f000 f80e 	bl	8009348 <nanf>
 800932c:	f8c8 0000 	str.w	r0, [r8]
 8009330:	e7ca      	b.n	80092c8 <_scanf_float+0x3a4>
 8009332:	4630      	mov	r0, r6
 8009334:	4639      	mov	r1, r7
 8009336:	f7f7 fbdf 	bl	8000af8 <__aeabi_d2f>
 800933a:	e7f7      	b.n	800932c <_scanf_float+0x408>
 800933c:	2500      	movs	r5, #0
 800933e:	e634      	b.n	8008faa <_scanf_float+0x86>
 8009340:	0800d37c 	.word	0x0800d37c
 8009344:	0800d798 	.word	0x0800d798

08009348 <nanf>:
 8009348:	4800      	ldr	r0, [pc, #0]	; (800934c <nanf+0x4>)
 800934a:	4770      	bx	lr
 800934c:	7fc00000 	.word	0x7fc00000

08009350 <sniprintf>:
 8009350:	b40c      	push	{r2, r3}
 8009352:	b530      	push	{r4, r5, lr}
 8009354:	4b17      	ldr	r3, [pc, #92]	; (80093b4 <sniprintf+0x64>)
 8009356:	1e0c      	subs	r4, r1, #0
 8009358:	681d      	ldr	r5, [r3, #0]
 800935a:	b09d      	sub	sp, #116	; 0x74
 800935c:	da08      	bge.n	8009370 <sniprintf+0x20>
 800935e:	238b      	movs	r3, #139	; 0x8b
 8009360:	f04f 30ff 	mov.w	r0, #4294967295
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	b01d      	add	sp, #116	; 0x74
 8009368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800936c:	b002      	add	sp, #8
 800936e:	4770      	bx	lr
 8009370:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009374:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009378:	bf0c      	ite	eq
 800937a:	4623      	moveq	r3, r4
 800937c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	9307      	str	r3, [sp, #28]
 8009384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009388:	9002      	str	r0, [sp, #8]
 800938a:	9006      	str	r0, [sp, #24]
 800938c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009390:	4628      	mov	r0, r5
 8009392:	ab21      	add	r3, sp, #132	; 0x84
 8009394:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009396:	a902      	add	r1, sp, #8
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	f002 fecb 	bl	800c134 <_svfiprintf_r>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	bfbc      	itt	lt
 80093a2:	238b      	movlt	r3, #139	; 0x8b
 80093a4:	602b      	strlt	r3, [r5, #0]
 80093a6:	2c00      	cmp	r4, #0
 80093a8:	d0dd      	beq.n	8009366 <sniprintf+0x16>
 80093aa:	2200      	movs	r2, #0
 80093ac:	9b02      	ldr	r3, [sp, #8]
 80093ae:	701a      	strb	r2, [r3, #0]
 80093b0:	e7d9      	b.n	8009366 <sniprintf+0x16>
 80093b2:	bf00      	nop
 80093b4:	2000000c 	.word	0x2000000c

080093b8 <siprintf>:
 80093b8:	b40e      	push	{r1, r2, r3}
 80093ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093be:	b500      	push	{lr}
 80093c0:	b09c      	sub	sp, #112	; 0x70
 80093c2:	ab1d      	add	r3, sp, #116	; 0x74
 80093c4:	9002      	str	r0, [sp, #8]
 80093c6:	9006      	str	r0, [sp, #24]
 80093c8:	9107      	str	r1, [sp, #28]
 80093ca:	9104      	str	r1, [sp, #16]
 80093cc:	4808      	ldr	r0, [pc, #32]	; (80093f0 <siprintf+0x38>)
 80093ce:	4909      	ldr	r1, [pc, #36]	; (80093f4 <siprintf+0x3c>)
 80093d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d4:	9105      	str	r1, [sp, #20]
 80093d6:	6800      	ldr	r0, [r0, #0]
 80093d8:	a902      	add	r1, sp, #8
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	f002 feaa 	bl	800c134 <_svfiprintf_r>
 80093e0:	2200      	movs	r2, #0
 80093e2:	9b02      	ldr	r3, [sp, #8]
 80093e4:	701a      	strb	r2, [r3, #0]
 80093e6:	b01c      	add	sp, #112	; 0x70
 80093e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ec:	b003      	add	sp, #12
 80093ee:	4770      	bx	lr
 80093f0:	2000000c 	.word	0x2000000c
 80093f4:	ffff0208 	.word	0xffff0208

080093f8 <strstr>:
 80093f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fa:	780c      	ldrb	r4, [r1, #0]
 80093fc:	b164      	cbz	r4, 8009418 <strstr+0x20>
 80093fe:	4603      	mov	r3, r0
 8009400:	781a      	ldrb	r2, [r3, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	1c5e      	adds	r6, r3, #1
 8009406:	b90a      	cbnz	r2, 800940c <strstr+0x14>
 8009408:	4610      	mov	r0, r2
 800940a:	e005      	b.n	8009418 <strstr+0x20>
 800940c:	4294      	cmp	r4, r2
 800940e:	d108      	bne.n	8009422 <strstr+0x2a>
 8009410:	460d      	mov	r5, r1
 8009412:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009416:	b902      	cbnz	r2, 800941a <strstr+0x22>
 8009418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800941e:	4297      	cmp	r7, r2
 8009420:	d0f7      	beq.n	8009412 <strstr+0x1a>
 8009422:	4633      	mov	r3, r6
 8009424:	e7ec      	b.n	8009400 <strstr+0x8>

08009426 <sulp>:
 8009426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942a:	460f      	mov	r7, r1
 800942c:	4690      	mov	r8, r2
 800942e:	f002 fc29 	bl	800bc84 <__ulp>
 8009432:	4604      	mov	r4, r0
 8009434:	460d      	mov	r5, r1
 8009436:	f1b8 0f00 	cmp.w	r8, #0
 800943a:	d011      	beq.n	8009460 <sulp+0x3a>
 800943c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009440:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009444:	2b00      	cmp	r3, #0
 8009446:	dd0b      	ble.n	8009460 <sulp+0x3a>
 8009448:	2400      	movs	r4, #0
 800944a:	051b      	lsls	r3, r3, #20
 800944c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009450:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009454:	4622      	mov	r2, r4
 8009456:	462b      	mov	r3, r5
 8009458:	f7f7 f856 	bl	8000508 <__aeabi_dmul>
 800945c:	4604      	mov	r4, r0
 800945e:	460d      	mov	r5, r1
 8009460:	4620      	mov	r0, r4
 8009462:	4629      	mov	r1, r5
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009468 <_strtod_l>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	469b      	mov	fp, r3
 800946e:	2300      	movs	r3, #0
 8009470:	b0a1      	sub	sp, #132	; 0x84
 8009472:	931c      	str	r3, [sp, #112]	; 0x70
 8009474:	4ba1      	ldr	r3, [pc, #644]	; (80096fc <_strtod_l+0x294>)
 8009476:	4682      	mov	sl, r0
 8009478:	681f      	ldr	r7, [r3, #0]
 800947a:	460e      	mov	r6, r1
 800947c:	4638      	mov	r0, r7
 800947e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009480:	f7f6 fe7e 	bl	8000180 <strlen>
 8009484:	f04f 0800 	mov.w	r8, #0
 8009488:	4604      	mov	r4, r0
 800948a:	f04f 0900 	mov.w	r9, #0
 800948e:	961b      	str	r6, [sp, #108]	; 0x6c
 8009490:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	2a2b      	cmp	r2, #43	; 0x2b
 8009496:	d04c      	beq.n	8009532 <_strtod_l+0xca>
 8009498:	d83a      	bhi.n	8009510 <_strtod_l+0xa8>
 800949a:	2a0d      	cmp	r2, #13
 800949c:	d833      	bhi.n	8009506 <_strtod_l+0x9e>
 800949e:	2a08      	cmp	r2, #8
 80094a0:	d833      	bhi.n	800950a <_strtod_l+0xa2>
 80094a2:	2a00      	cmp	r2, #0
 80094a4:	d03d      	beq.n	8009522 <_strtod_l+0xba>
 80094a6:	2300      	movs	r3, #0
 80094a8:	930c      	str	r3, [sp, #48]	; 0x30
 80094aa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80094ac:	782b      	ldrb	r3, [r5, #0]
 80094ae:	2b30      	cmp	r3, #48	; 0x30
 80094b0:	f040 80af 	bne.w	8009612 <_strtod_l+0x1aa>
 80094b4:	786b      	ldrb	r3, [r5, #1]
 80094b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094ba:	2b58      	cmp	r3, #88	; 0x58
 80094bc:	d16c      	bne.n	8009598 <_strtod_l+0x130>
 80094be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094c0:	4650      	mov	r0, sl
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	ab1c      	add	r3, sp, #112	; 0x70
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	4a8d      	ldr	r2, [pc, #564]	; (8009700 <_strtod_l+0x298>)
 80094ca:	f8cd b008 	str.w	fp, [sp, #8]
 80094ce:	ab1d      	add	r3, sp, #116	; 0x74
 80094d0:	a91b      	add	r1, sp, #108	; 0x6c
 80094d2:	f001 fd2f 	bl	800af34 <__gethex>
 80094d6:	f010 0607 	ands.w	r6, r0, #7
 80094da:	4604      	mov	r4, r0
 80094dc:	d005      	beq.n	80094ea <_strtod_l+0x82>
 80094de:	2e06      	cmp	r6, #6
 80094e0:	d129      	bne.n	8009536 <_strtod_l+0xce>
 80094e2:	2300      	movs	r3, #0
 80094e4:	3501      	adds	r5, #1
 80094e6:	951b      	str	r5, [sp, #108]	; 0x6c
 80094e8:	930c      	str	r3, [sp, #48]	; 0x30
 80094ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 8596 	bne.w	800a01e <_strtod_l+0xbb6>
 80094f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094f4:	b1d3      	cbz	r3, 800952c <_strtod_l+0xc4>
 80094f6:	4642      	mov	r2, r8
 80094f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094fc:	4610      	mov	r0, r2
 80094fe:	4619      	mov	r1, r3
 8009500:	b021      	add	sp, #132	; 0x84
 8009502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009506:	2a20      	cmp	r2, #32
 8009508:	d1cd      	bne.n	80094a6 <_strtod_l+0x3e>
 800950a:	3301      	adds	r3, #1
 800950c:	931b      	str	r3, [sp, #108]	; 0x6c
 800950e:	e7bf      	b.n	8009490 <_strtod_l+0x28>
 8009510:	2a2d      	cmp	r2, #45	; 0x2d
 8009512:	d1c8      	bne.n	80094a6 <_strtod_l+0x3e>
 8009514:	2201      	movs	r2, #1
 8009516:	920c      	str	r2, [sp, #48]	; 0x30
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	921b      	str	r2, [sp, #108]	; 0x6c
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1c3      	bne.n	80094aa <_strtod_l+0x42>
 8009522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009524:	961b      	str	r6, [sp, #108]	; 0x6c
 8009526:	2b00      	cmp	r3, #0
 8009528:	f040 8577 	bne.w	800a01a <_strtod_l+0xbb2>
 800952c:	4642      	mov	r2, r8
 800952e:	464b      	mov	r3, r9
 8009530:	e7e4      	b.n	80094fc <_strtod_l+0x94>
 8009532:	2200      	movs	r2, #0
 8009534:	e7ef      	b.n	8009516 <_strtod_l+0xae>
 8009536:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009538:	b13a      	cbz	r2, 800954a <_strtod_l+0xe2>
 800953a:	2135      	movs	r1, #53	; 0x35
 800953c:	a81e      	add	r0, sp, #120	; 0x78
 800953e:	f002 fca5 	bl	800be8c <__copybits>
 8009542:	4650      	mov	r0, sl
 8009544:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009546:	f002 f86d 	bl	800b624 <_Bfree>
 800954a:	3e01      	subs	r6, #1
 800954c:	2e05      	cmp	r6, #5
 800954e:	d807      	bhi.n	8009560 <_strtod_l+0xf8>
 8009550:	e8df f006 	tbb	[pc, r6]
 8009554:	1d180b0e 	.word	0x1d180b0e
 8009558:	030e      	.short	0x030e
 800955a:	f04f 0900 	mov.w	r9, #0
 800955e:	46c8      	mov	r8, r9
 8009560:	0721      	lsls	r1, r4, #28
 8009562:	d5c2      	bpl.n	80094ea <_strtod_l+0x82>
 8009564:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009568:	e7bf      	b.n	80094ea <_strtod_l+0x82>
 800956a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800956e:	e7f7      	b.n	8009560 <_strtod_l+0xf8>
 8009570:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009572:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009576:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800957a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800957e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009582:	e7ed      	b.n	8009560 <_strtod_l+0xf8>
 8009584:	f04f 0800 	mov.w	r8, #0
 8009588:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009704 <_strtod_l+0x29c>
 800958c:	e7e8      	b.n	8009560 <_strtod_l+0xf8>
 800958e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009592:	f04f 38ff 	mov.w	r8, #4294967295
 8009596:	e7e3      	b.n	8009560 <_strtod_l+0xf8>
 8009598:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	921b      	str	r2, [sp, #108]	; 0x6c
 800959e:	785b      	ldrb	r3, [r3, #1]
 80095a0:	2b30      	cmp	r3, #48	; 0x30
 80095a2:	d0f9      	beq.n	8009598 <_strtod_l+0x130>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d0a0      	beq.n	80094ea <_strtod_l+0x82>
 80095a8:	2301      	movs	r3, #1
 80095aa:	9307      	str	r3, [sp, #28]
 80095ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095ae:	220a      	movs	r2, #10
 80095b0:	9308      	str	r3, [sp, #32]
 80095b2:	2300      	movs	r3, #0
 80095b4:	469b      	mov	fp, r3
 80095b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80095ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80095bc:	7805      	ldrb	r5, [r0, #0]
 80095be:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80095c2:	b2d9      	uxtb	r1, r3
 80095c4:	2909      	cmp	r1, #9
 80095c6:	d926      	bls.n	8009616 <_strtod_l+0x1ae>
 80095c8:	4622      	mov	r2, r4
 80095ca:	4639      	mov	r1, r7
 80095cc:	f002 fec8 	bl	800c360 <strncmp>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d032      	beq.n	800963a <_strtod_l+0x1d2>
 80095d4:	2000      	movs	r0, #0
 80095d6:	462b      	mov	r3, r5
 80095d8:	465c      	mov	r4, fp
 80095da:	4602      	mov	r2, r0
 80095dc:	9004      	str	r0, [sp, #16]
 80095de:	2b65      	cmp	r3, #101	; 0x65
 80095e0:	d001      	beq.n	80095e6 <_strtod_l+0x17e>
 80095e2:	2b45      	cmp	r3, #69	; 0x45
 80095e4:	d113      	bne.n	800960e <_strtod_l+0x1a6>
 80095e6:	b91c      	cbnz	r4, 80095f0 <_strtod_l+0x188>
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	4303      	orrs	r3, r0
 80095ec:	d099      	beq.n	8009522 <_strtod_l+0xba>
 80095ee:	2400      	movs	r4, #0
 80095f0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80095f2:	1c73      	adds	r3, r6, #1
 80095f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80095f6:	7873      	ldrb	r3, [r6, #1]
 80095f8:	2b2b      	cmp	r3, #43	; 0x2b
 80095fa:	d078      	beq.n	80096ee <_strtod_l+0x286>
 80095fc:	2b2d      	cmp	r3, #45	; 0x2d
 80095fe:	d07b      	beq.n	80096f8 <_strtod_l+0x290>
 8009600:	2700      	movs	r7, #0
 8009602:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009606:	2909      	cmp	r1, #9
 8009608:	f240 8082 	bls.w	8009710 <_strtod_l+0x2a8>
 800960c:	961b      	str	r6, [sp, #108]	; 0x6c
 800960e:	2500      	movs	r5, #0
 8009610:	e09e      	b.n	8009750 <_strtod_l+0x2e8>
 8009612:	2300      	movs	r3, #0
 8009614:	e7c9      	b.n	80095aa <_strtod_l+0x142>
 8009616:	f1bb 0f08 	cmp.w	fp, #8
 800961a:	bfd5      	itete	le
 800961c:	9906      	ldrle	r1, [sp, #24]
 800961e:	9905      	ldrgt	r1, [sp, #20]
 8009620:	fb02 3301 	mlale	r3, r2, r1, r3
 8009624:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009628:	f100 0001 	add.w	r0, r0, #1
 800962c:	bfd4      	ite	le
 800962e:	9306      	strle	r3, [sp, #24]
 8009630:	9305      	strgt	r3, [sp, #20]
 8009632:	f10b 0b01 	add.w	fp, fp, #1
 8009636:	901b      	str	r0, [sp, #108]	; 0x6c
 8009638:	e7bf      	b.n	80095ba <_strtod_l+0x152>
 800963a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800963c:	191a      	adds	r2, r3, r4
 800963e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009640:	5d1b      	ldrb	r3, [r3, r4]
 8009642:	f1bb 0f00 	cmp.w	fp, #0
 8009646:	d036      	beq.n	80096b6 <_strtod_l+0x24e>
 8009648:	465c      	mov	r4, fp
 800964a:	9004      	str	r0, [sp, #16]
 800964c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009650:	2a09      	cmp	r2, #9
 8009652:	d912      	bls.n	800967a <_strtod_l+0x212>
 8009654:	2201      	movs	r2, #1
 8009656:	e7c2      	b.n	80095de <_strtod_l+0x176>
 8009658:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800965a:	3001      	adds	r0, #1
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009660:	785b      	ldrb	r3, [r3, #1]
 8009662:	2b30      	cmp	r3, #48	; 0x30
 8009664:	d0f8      	beq.n	8009658 <_strtod_l+0x1f0>
 8009666:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800966a:	2a08      	cmp	r2, #8
 800966c:	f200 84dc 	bhi.w	800a028 <_strtod_l+0xbc0>
 8009670:	9004      	str	r0, [sp, #16]
 8009672:	2000      	movs	r0, #0
 8009674:	4604      	mov	r4, r0
 8009676:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009678:	9208      	str	r2, [sp, #32]
 800967a:	3b30      	subs	r3, #48	; 0x30
 800967c:	f100 0201 	add.w	r2, r0, #1
 8009680:	d013      	beq.n	80096aa <_strtod_l+0x242>
 8009682:	9904      	ldr	r1, [sp, #16]
 8009684:	1905      	adds	r5, r0, r4
 8009686:	4411      	add	r1, r2
 8009688:	9104      	str	r1, [sp, #16]
 800968a:	4622      	mov	r2, r4
 800968c:	210a      	movs	r1, #10
 800968e:	42aa      	cmp	r2, r5
 8009690:	d113      	bne.n	80096ba <_strtod_l+0x252>
 8009692:	1822      	adds	r2, r4, r0
 8009694:	2a08      	cmp	r2, #8
 8009696:	f104 0401 	add.w	r4, r4, #1
 800969a:	4404      	add	r4, r0
 800969c:	dc1b      	bgt.n	80096d6 <_strtod_l+0x26e>
 800969e:	220a      	movs	r2, #10
 80096a0:	9906      	ldr	r1, [sp, #24]
 80096a2:	fb02 3301 	mla	r3, r2, r1, r3
 80096a6:	9306      	str	r3, [sp, #24]
 80096a8:	2200      	movs	r2, #0
 80096aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ac:	4610      	mov	r0, r2
 80096ae:	1c59      	adds	r1, r3, #1
 80096b0:	911b      	str	r1, [sp, #108]	; 0x6c
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	e7ca      	b.n	800964c <_strtod_l+0x1e4>
 80096b6:	4658      	mov	r0, fp
 80096b8:	e7d3      	b.n	8009662 <_strtod_l+0x1fa>
 80096ba:	2a08      	cmp	r2, #8
 80096bc:	dc04      	bgt.n	80096c8 <_strtod_l+0x260>
 80096be:	9f06      	ldr	r7, [sp, #24]
 80096c0:	434f      	muls	r7, r1
 80096c2:	9706      	str	r7, [sp, #24]
 80096c4:	3201      	adds	r2, #1
 80096c6:	e7e2      	b.n	800968e <_strtod_l+0x226>
 80096c8:	1c57      	adds	r7, r2, #1
 80096ca:	2f10      	cmp	r7, #16
 80096cc:	bfde      	ittt	le
 80096ce:	9f05      	ldrle	r7, [sp, #20]
 80096d0:	434f      	mulle	r7, r1
 80096d2:	9705      	strle	r7, [sp, #20]
 80096d4:	e7f6      	b.n	80096c4 <_strtod_l+0x25c>
 80096d6:	2c10      	cmp	r4, #16
 80096d8:	bfdf      	itttt	le
 80096da:	220a      	movle	r2, #10
 80096dc:	9905      	ldrle	r1, [sp, #20]
 80096de:	fb02 3301 	mlale	r3, r2, r1, r3
 80096e2:	9305      	strle	r3, [sp, #20]
 80096e4:	e7e0      	b.n	80096a8 <_strtod_l+0x240>
 80096e6:	2300      	movs	r3, #0
 80096e8:	2201      	movs	r2, #1
 80096ea:	9304      	str	r3, [sp, #16]
 80096ec:	e77c      	b.n	80095e8 <_strtod_l+0x180>
 80096ee:	2700      	movs	r7, #0
 80096f0:	1cb3      	adds	r3, r6, #2
 80096f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80096f4:	78b3      	ldrb	r3, [r6, #2]
 80096f6:	e784      	b.n	8009602 <_strtod_l+0x19a>
 80096f8:	2701      	movs	r7, #1
 80096fa:	e7f9      	b.n	80096f0 <_strtod_l+0x288>
 80096fc:	0800d5d8 	.word	0x0800d5d8
 8009700:	0800d384 	.word	0x0800d384
 8009704:	7ff00000 	.word	0x7ff00000
 8009708:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800970a:	1c59      	adds	r1, r3, #1
 800970c:	911b      	str	r1, [sp, #108]	; 0x6c
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b30      	cmp	r3, #48	; 0x30
 8009712:	d0f9      	beq.n	8009708 <_strtod_l+0x2a0>
 8009714:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009718:	2908      	cmp	r1, #8
 800971a:	f63f af78 	bhi.w	800960e <_strtod_l+0x1a6>
 800971e:	f04f 0e0a 	mov.w	lr, #10
 8009722:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009728:	9309      	str	r3, [sp, #36]	; 0x24
 800972a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800972c:	1c59      	adds	r1, r3, #1
 800972e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009730:	785b      	ldrb	r3, [r3, #1]
 8009732:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009736:	2d09      	cmp	r5, #9
 8009738:	d935      	bls.n	80097a6 <_strtod_l+0x33e>
 800973a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800973c:	1b49      	subs	r1, r1, r5
 800973e:	2908      	cmp	r1, #8
 8009740:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009744:	dc02      	bgt.n	800974c <_strtod_l+0x2e4>
 8009746:	4565      	cmp	r5, ip
 8009748:	bfa8      	it	ge
 800974a:	4665      	movge	r5, ip
 800974c:	b107      	cbz	r7, 8009750 <_strtod_l+0x2e8>
 800974e:	426d      	negs	r5, r5
 8009750:	2c00      	cmp	r4, #0
 8009752:	d14c      	bne.n	80097ee <_strtod_l+0x386>
 8009754:	9907      	ldr	r1, [sp, #28]
 8009756:	4301      	orrs	r1, r0
 8009758:	f47f aec7 	bne.w	80094ea <_strtod_l+0x82>
 800975c:	2a00      	cmp	r2, #0
 800975e:	f47f aee0 	bne.w	8009522 <_strtod_l+0xba>
 8009762:	2b69      	cmp	r3, #105	; 0x69
 8009764:	d026      	beq.n	80097b4 <_strtod_l+0x34c>
 8009766:	dc23      	bgt.n	80097b0 <_strtod_l+0x348>
 8009768:	2b49      	cmp	r3, #73	; 0x49
 800976a:	d023      	beq.n	80097b4 <_strtod_l+0x34c>
 800976c:	2b4e      	cmp	r3, #78	; 0x4e
 800976e:	f47f aed8 	bne.w	8009522 <_strtod_l+0xba>
 8009772:	499c      	ldr	r1, [pc, #624]	; (80099e4 <_strtod_l+0x57c>)
 8009774:	a81b      	add	r0, sp, #108	; 0x6c
 8009776:	f001 fe2b 	bl	800b3d0 <__match>
 800977a:	2800      	cmp	r0, #0
 800977c:	f43f aed1 	beq.w	8009522 <_strtod_l+0xba>
 8009780:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b28      	cmp	r3, #40	; 0x28
 8009786:	d12c      	bne.n	80097e2 <_strtod_l+0x37a>
 8009788:	4997      	ldr	r1, [pc, #604]	; (80099e8 <_strtod_l+0x580>)
 800978a:	aa1e      	add	r2, sp, #120	; 0x78
 800978c:	a81b      	add	r0, sp, #108	; 0x6c
 800978e:	f001 fe33 	bl	800b3f8 <__hexnan>
 8009792:	2805      	cmp	r0, #5
 8009794:	d125      	bne.n	80097e2 <_strtod_l+0x37a>
 8009796:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009798:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800979c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80097a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80097a4:	e6a1      	b.n	80094ea <_strtod_l+0x82>
 80097a6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80097aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80097ae:	e7bc      	b.n	800972a <_strtod_l+0x2c2>
 80097b0:	2b6e      	cmp	r3, #110	; 0x6e
 80097b2:	e7dc      	b.n	800976e <_strtod_l+0x306>
 80097b4:	498d      	ldr	r1, [pc, #564]	; (80099ec <_strtod_l+0x584>)
 80097b6:	a81b      	add	r0, sp, #108	; 0x6c
 80097b8:	f001 fe0a 	bl	800b3d0 <__match>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f43f aeb0 	beq.w	8009522 <_strtod_l+0xba>
 80097c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097c4:	498a      	ldr	r1, [pc, #552]	; (80099f0 <_strtod_l+0x588>)
 80097c6:	3b01      	subs	r3, #1
 80097c8:	a81b      	add	r0, sp, #108	; 0x6c
 80097ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80097cc:	f001 fe00 	bl	800b3d0 <__match>
 80097d0:	b910      	cbnz	r0, 80097d8 <_strtod_l+0x370>
 80097d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097d4:	3301      	adds	r3, #1
 80097d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80097d8:	f04f 0800 	mov.w	r8, #0
 80097dc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009a00 <_strtod_l+0x598>
 80097e0:	e683      	b.n	80094ea <_strtod_l+0x82>
 80097e2:	4884      	ldr	r0, [pc, #528]	; (80099f4 <_strtod_l+0x58c>)
 80097e4:	f002 fda6 	bl	800c334 <nan>
 80097e8:	4680      	mov	r8, r0
 80097ea:	4689      	mov	r9, r1
 80097ec:	e67d      	b.n	80094ea <_strtod_l+0x82>
 80097ee:	9b04      	ldr	r3, [sp, #16]
 80097f0:	f1bb 0f00 	cmp.w	fp, #0
 80097f4:	bf08      	it	eq
 80097f6:	46a3      	moveq	fp, r4
 80097f8:	1aeb      	subs	r3, r5, r3
 80097fa:	2c10      	cmp	r4, #16
 80097fc:	9806      	ldr	r0, [sp, #24]
 80097fe:	4626      	mov	r6, r4
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	bfa8      	it	ge
 8009804:	2610      	movge	r6, #16
 8009806:	f7f6 fe05 	bl	8000414 <__aeabi_ui2d>
 800980a:	2c09      	cmp	r4, #9
 800980c:	4680      	mov	r8, r0
 800980e:	4689      	mov	r9, r1
 8009810:	dd13      	ble.n	800983a <_strtod_l+0x3d2>
 8009812:	4b79      	ldr	r3, [pc, #484]	; (80099f8 <_strtod_l+0x590>)
 8009814:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009818:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800981c:	f7f6 fe74 	bl	8000508 <__aeabi_dmul>
 8009820:	4680      	mov	r8, r0
 8009822:	9805      	ldr	r0, [sp, #20]
 8009824:	4689      	mov	r9, r1
 8009826:	f7f6 fdf5 	bl	8000414 <__aeabi_ui2d>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4640      	mov	r0, r8
 8009830:	4649      	mov	r1, r9
 8009832:	f7f6 fcb3 	bl	800019c <__adddf3>
 8009836:	4680      	mov	r8, r0
 8009838:	4689      	mov	r9, r1
 800983a:	2c0f      	cmp	r4, #15
 800983c:	dc36      	bgt.n	80098ac <_strtod_l+0x444>
 800983e:	9b07      	ldr	r3, [sp, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f43f ae52 	beq.w	80094ea <_strtod_l+0x82>
 8009846:	dd22      	ble.n	800988e <_strtod_l+0x426>
 8009848:	2b16      	cmp	r3, #22
 800984a:	dc09      	bgt.n	8009860 <_strtod_l+0x3f8>
 800984c:	4c6a      	ldr	r4, [pc, #424]	; (80099f8 <_strtod_l+0x590>)
 800984e:	4642      	mov	r2, r8
 8009850:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009854:	464b      	mov	r3, r9
 8009856:	e9d4 0100 	ldrd	r0, r1, [r4]
 800985a:	f7f6 fe55 	bl	8000508 <__aeabi_dmul>
 800985e:	e7c3      	b.n	80097e8 <_strtod_l+0x380>
 8009860:	9a07      	ldr	r2, [sp, #28]
 8009862:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009866:	4293      	cmp	r3, r2
 8009868:	db20      	blt.n	80098ac <_strtod_l+0x444>
 800986a:	4d63      	ldr	r5, [pc, #396]	; (80099f8 <_strtod_l+0x590>)
 800986c:	f1c4 040f 	rsb	r4, r4, #15
 8009870:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009874:	4642      	mov	r2, r8
 8009876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987a:	464b      	mov	r3, r9
 800987c:	f7f6 fe44 	bl	8000508 <__aeabi_dmul>
 8009880:	9b07      	ldr	r3, [sp, #28]
 8009882:	1b1c      	subs	r4, r3, r4
 8009884:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009888:	e9d5 2300 	ldrd	r2, r3, [r5]
 800988c:	e7e5      	b.n	800985a <_strtod_l+0x3f2>
 800988e:	9b07      	ldr	r3, [sp, #28]
 8009890:	3316      	adds	r3, #22
 8009892:	db0b      	blt.n	80098ac <_strtod_l+0x444>
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	4a58      	ldr	r2, [pc, #352]	; (80099f8 <_strtod_l+0x590>)
 8009898:	1b5d      	subs	r5, r3, r5
 800989a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800989e:	4640      	mov	r0, r8
 80098a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098a4:	4649      	mov	r1, r9
 80098a6:	f7f6 ff59 	bl	800075c <__aeabi_ddiv>
 80098aa:	e79d      	b.n	80097e8 <_strtod_l+0x380>
 80098ac:	9b07      	ldr	r3, [sp, #28]
 80098ae:	1ba6      	subs	r6, r4, r6
 80098b0:	441e      	add	r6, r3
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	dd71      	ble.n	800999a <_strtod_l+0x532>
 80098b6:	f016 030f 	ands.w	r3, r6, #15
 80098ba:	d00a      	beq.n	80098d2 <_strtod_l+0x46a>
 80098bc:	494e      	ldr	r1, [pc, #312]	; (80099f8 <_strtod_l+0x590>)
 80098be:	4642      	mov	r2, r8
 80098c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c8:	464b      	mov	r3, r9
 80098ca:	f7f6 fe1d 	bl	8000508 <__aeabi_dmul>
 80098ce:	4680      	mov	r8, r0
 80098d0:	4689      	mov	r9, r1
 80098d2:	f036 060f 	bics.w	r6, r6, #15
 80098d6:	d050      	beq.n	800997a <_strtod_l+0x512>
 80098d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80098dc:	dd27      	ble.n	800992e <_strtod_l+0x4c6>
 80098de:	f04f 0b00 	mov.w	fp, #0
 80098e2:	f8cd b010 	str.w	fp, [sp, #16]
 80098e6:	f8cd b020 	str.w	fp, [sp, #32]
 80098ea:	f8cd b018 	str.w	fp, [sp, #24]
 80098ee:	2322      	movs	r3, #34	; 0x22
 80098f0:	f04f 0800 	mov.w	r8, #0
 80098f4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009a00 <_strtod_l+0x598>
 80098f8:	f8ca 3000 	str.w	r3, [sl]
 80098fc:	9b08      	ldr	r3, [sp, #32]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f43f adf3 	beq.w	80094ea <_strtod_l+0x82>
 8009904:	4650      	mov	r0, sl
 8009906:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009908:	f001 fe8c 	bl	800b624 <_Bfree>
 800990c:	4650      	mov	r0, sl
 800990e:	9906      	ldr	r1, [sp, #24]
 8009910:	f001 fe88 	bl	800b624 <_Bfree>
 8009914:	4650      	mov	r0, sl
 8009916:	9904      	ldr	r1, [sp, #16]
 8009918:	f001 fe84 	bl	800b624 <_Bfree>
 800991c:	4650      	mov	r0, sl
 800991e:	9908      	ldr	r1, [sp, #32]
 8009920:	f001 fe80 	bl	800b624 <_Bfree>
 8009924:	4659      	mov	r1, fp
 8009926:	4650      	mov	r0, sl
 8009928:	f001 fe7c 	bl	800b624 <_Bfree>
 800992c:	e5dd      	b.n	80094ea <_strtod_l+0x82>
 800992e:	2300      	movs	r3, #0
 8009930:	4640      	mov	r0, r8
 8009932:	4649      	mov	r1, r9
 8009934:	461f      	mov	r7, r3
 8009936:	1136      	asrs	r6, r6, #4
 8009938:	2e01      	cmp	r6, #1
 800993a:	dc21      	bgt.n	8009980 <_strtod_l+0x518>
 800993c:	b10b      	cbz	r3, 8009942 <_strtod_l+0x4da>
 800993e:	4680      	mov	r8, r0
 8009940:	4689      	mov	r9, r1
 8009942:	4b2e      	ldr	r3, [pc, #184]	; (80099fc <_strtod_l+0x594>)
 8009944:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009948:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800994c:	4642      	mov	r2, r8
 800994e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009952:	464b      	mov	r3, r9
 8009954:	f7f6 fdd8 	bl	8000508 <__aeabi_dmul>
 8009958:	4b29      	ldr	r3, [pc, #164]	; (8009a00 <_strtod_l+0x598>)
 800995a:	460a      	mov	r2, r1
 800995c:	400b      	ands	r3, r1
 800995e:	4929      	ldr	r1, [pc, #164]	; (8009a04 <_strtod_l+0x59c>)
 8009960:	4680      	mov	r8, r0
 8009962:	428b      	cmp	r3, r1
 8009964:	d8bb      	bhi.n	80098de <_strtod_l+0x476>
 8009966:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800996a:	428b      	cmp	r3, r1
 800996c:	bf86      	itte	hi
 800996e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009972:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009a08 <_strtod_l+0x5a0>
 8009976:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800997a:	2300      	movs	r3, #0
 800997c:	9305      	str	r3, [sp, #20]
 800997e:	e07e      	b.n	8009a7e <_strtod_l+0x616>
 8009980:	07f2      	lsls	r2, r6, #31
 8009982:	d507      	bpl.n	8009994 <_strtod_l+0x52c>
 8009984:	4b1d      	ldr	r3, [pc, #116]	; (80099fc <_strtod_l+0x594>)
 8009986:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f7f6 fdbb 	bl	8000508 <__aeabi_dmul>
 8009992:	2301      	movs	r3, #1
 8009994:	3701      	adds	r7, #1
 8009996:	1076      	asrs	r6, r6, #1
 8009998:	e7ce      	b.n	8009938 <_strtod_l+0x4d0>
 800999a:	d0ee      	beq.n	800997a <_strtod_l+0x512>
 800999c:	4276      	negs	r6, r6
 800999e:	f016 020f 	ands.w	r2, r6, #15
 80099a2:	d00a      	beq.n	80099ba <_strtod_l+0x552>
 80099a4:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <_strtod_l+0x590>)
 80099a6:	4640      	mov	r0, r8
 80099a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ac:	4649      	mov	r1, r9
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	f7f6 fed3 	bl	800075c <__aeabi_ddiv>
 80099b6:	4680      	mov	r8, r0
 80099b8:	4689      	mov	r9, r1
 80099ba:	1136      	asrs	r6, r6, #4
 80099bc:	d0dd      	beq.n	800997a <_strtod_l+0x512>
 80099be:	2e1f      	cmp	r6, #31
 80099c0:	dd24      	ble.n	8009a0c <_strtod_l+0x5a4>
 80099c2:	f04f 0b00 	mov.w	fp, #0
 80099c6:	f8cd b010 	str.w	fp, [sp, #16]
 80099ca:	f8cd b020 	str.w	fp, [sp, #32]
 80099ce:	f8cd b018 	str.w	fp, [sp, #24]
 80099d2:	2322      	movs	r3, #34	; 0x22
 80099d4:	f04f 0800 	mov.w	r8, #0
 80099d8:	f04f 0900 	mov.w	r9, #0
 80099dc:	f8ca 3000 	str.w	r3, [sl]
 80099e0:	e78c      	b.n	80098fc <_strtod_l+0x494>
 80099e2:	bf00      	nop
 80099e4:	0800d355 	.word	0x0800d355
 80099e8:	0800d398 	.word	0x0800d398
 80099ec:	0800d34d 	.word	0x0800d34d
 80099f0:	0800d4dc 	.word	0x0800d4dc
 80099f4:	0800d798 	.word	0x0800d798
 80099f8:	0800d678 	.word	0x0800d678
 80099fc:	0800d650 	.word	0x0800d650
 8009a00:	7ff00000 	.word	0x7ff00000
 8009a04:	7ca00000 	.word	0x7ca00000
 8009a08:	7fefffff 	.word	0x7fefffff
 8009a0c:	f016 0310 	ands.w	r3, r6, #16
 8009a10:	bf18      	it	ne
 8009a12:	236a      	movne	r3, #106	; 0x6a
 8009a14:	4640      	mov	r0, r8
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	4649      	mov	r1, r9
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	4fb2      	ldr	r7, [pc, #712]	; (8009ce8 <_strtod_l+0x880>)
 8009a1e:	07f2      	lsls	r2, r6, #31
 8009a20:	d504      	bpl.n	8009a2c <_strtod_l+0x5c4>
 8009a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a26:	f7f6 fd6f 	bl	8000508 <__aeabi_dmul>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	1076      	asrs	r6, r6, #1
 8009a2e:	f107 0708 	add.w	r7, r7, #8
 8009a32:	d1f4      	bne.n	8009a1e <_strtod_l+0x5b6>
 8009a34:	b10b      	cbz	r3, 8009a3a <_strtod_l+0x5d2>
 8009a36:	4680      	mov	r8, r0
 8009a38:	4689      	mov	r9, r1
 8009a3a:	9b05      	ldr	r3, [sp, #20]
 8009a3c:	b1bb      	cbz	r3, 8009a6e <_strtod_l+0x606>
 8009a3e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009a42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	4649      	mov	r1, r9
 8009a4a:	dd10      	ble.n	8009a6e <_strtod_l+0x606>
 8009a4c:	2b1f      	cmp	r3, #31
 8009a4e:	f340 812b 	ble.w	8009ca8 <_strtod_l+0x840>
 8009a52:	2b34      	cmp	r3, #52	; 0x34
 8009a54:	bfd8      	it	le
 8009a56:	f04f 32ff 	movle.w	r2, #4294967295
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	bfcf      	iteee	gt
 8009a60:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009a64:	3b20      	suble	r3, #32
 8009a66:	fa02 f303 	lslle.w	r3, r2, r3
 8009a6a:	ea03 0901 	andle.w	r9, r3, r1
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2300      	movs	r3, #0
 8009a72:	4640      	mov	r0, r8
 8009a74:	4649      	mov	r1, r9
 8009a76:	f7f6 ffaf 	bl	80009d8 <__aeabi_dcmpeq>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d1a1      	bne.n	80099c2 <_strtod_l+0x55a>
 8009a7e:	9b06      	ldr	r3, [sp, #24]
 8009a80:	465a      	mov	r2, fp
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4650      	mov	r0, sl
 8009a86:	4623      	mov	r3, r4
 8009a88:	9908      	ldr	r1, [sp, #32]
 8009a8a:	f001 fe37 	bl	800b6fc <__s2b>
 8009a8e:	9008      	str	r0, [sp, #32]
 8009a90:	2800      	cmp	r0, #0
 8009a92:	f43f af24 	beq.w	80098de <_strtod_l+0x476>
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	f04f 0b00 	mov.w	fp, #0
 8009a9c:	1b5d      	subs	r5, r3, r5
 8009a9e:	9b07      	ldr	r3, [sp, #28]
 8009aa0:	f8cd b010 	str.w	fp, [sp, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bfb4      	ite	lt
 8009aa8:	462b      	movlt	r3, r5
 8009aaa:	2300      	movge	r3, #0
 8009aac:	930e      	str	r3, [sp, #56]	; 0x38
 8009aae:	9b07      	ldr	r3, [sp, #28]
 8009ab0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ab4:	9316      	str	r3, [sp, #88]	; 0x58
 8009ab6:	9b08      	ldr	r3, [sp, #32]
 8009ab8:	4650      	mov	r0, sl
 8009aba:	6859      	ldr	r1, [r3, #4]
 8009abc:	f001 fd72 	bl	800b5a4 <_Balloc>
 8009ac0:	9006      	str	r0, [sp, #24]
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f43f af13 	beq.w	80098ee <_strtod_l+0x486>
 8009ac8:	9b08      	ldr	r3, [sp, #32]
 8009aca:	300c      	adds	r0, #12
 8009acc:	691a      	ldr	r2, [r3, #16]
 8009ace:	f103 010c 	add.w	r1, r3, #12
 8009ad2:	3202      	adds	r2, #2
 8009ad4:	0092      	lsls	r2, r2, #2
 8009ad6:	f001 fd57 	bl	800b588 <memcpy>
 8009ada:	ab1e      	add	r3, sp, #120	; 0x78
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	ab1d      	add	r3, sp, #116	; 0x74
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	4642      	mov	r2, r8
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009aec:	f002 f944 	bl	800bd78 <__d2b>
 8009af0:	901c      	str	r0, [sp, #112]	; 0x70
 8009af2:	2800      	cmp	r0, #0
 8009af4:	f43f aefb 	beq.w	80098ee <_strtod_l+0x486>
 8009af8:	2101      	movs	r1, #1
 8009afa:	4650      	mov	r0, sl
 8009afc:	f001 fe96 	bl	800b82c <__i2b>
 8009b00:	4603      	mov	r3, r0
 8009b02:	9004      	str	r0, [sp, #16]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f43f aef2 	beq.w	80098ee <_strtod_l+0x486>
 8009b0a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009b0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	bfab      	itete	ge
 8009b12:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009b14:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009b16:	18ee      	addge	r6, r5, r3
 8009b18:	1b5c      	sublt	r4, r3, r5
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	bfa8      	it	ge
 8009b1e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009b20:	eba5 0503 	sub.w	r5, r5, r3
 8009b24:	4415      	add	r5, r2
 8009b26:	4b71      	ldr	r3, [pc, #452]	; (8009cec <_strtod_l+0x884>)
 8009b28:	f105 35ff 	add.w	r5, r5, #4294967295
 8009b2c:	bfb8      	it	lt
 8009b2e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009b30:	429d      	cmp	r5, r3
 8009b32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b36:	f280 80c9 	bge.w	8009ccc <_strtod_l+0x864>
 8009b3a:	1b5b      	subs	r3, r3, r5
 8009b3c:	2b1f      	cmp	r3, #31
 8009b3e:	f04f 0701 	mov.w	r7, #1
 8009b42:	eba2 0203 	sub.w	r2, r2, r3
 8009b46:	f300 80b6 	bgt.w	8009cb6 <_strtod_l+0x84e>
 8009b4a:	2500      	movs	r5, #0
 8009b4c:	fa07 f303 	lsl.w	r3, r7, r3
 8009b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b52:	18b7      	adds	r7, r6, r2
 8009b54:	9b05      	ldr	r3, [sp, #20]
 8009b56:	42be      	cmp	r6, r7
 8009b58:	4414      	add	r4, r2
 8009b5a:	441c      	add	r4, r3
 8009b5c:	4633      	mov	r3, r6
 8009b5e:	bfa8      	it	ge
 8009b60:	463b      	movge	r3, r7
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	bfa8      	it	ge
 8009b66:	4623      	movge	r3, r4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfc2      	ittt	gt
 8009b6c:	1aff      	subgt	r7, r7, r3
 8009b6e:	1ae4      	subgt	r4, r4, r3
 8009b70:	1af6      	subgt	r6, r6, r3
 8009b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd17      	ble.n	8009ba8 <_strtod_l+0x740>
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	9904      	ldr	r1, [sp, #16]
 8009b7e:	f001 ff0f 	bl	800b9a0 <__pow5mult>
 8009b82:	9004      	str	r0, [sp, #16]
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f43f aeb2 	beq.w	80098ee <_strtod_l+0x486>
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b8e:	4650      	mov	r0, sl
 8009b90:	f001 fe62 	bl	800b858 <__multiply>
 8009b94:	9009      	str	r0, [sp, #36]	; 0x24
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f43f aea9 	beq.w	80098ee <_strtod_l+0x486>
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ba0:	f001 fd40 	bl	800b624 <_Bfree>
 8009ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba6:	931c      	str	r3, [sp, #112]	; 0x70
 8009ba8:	2f00      	cmp	r7, #0
 8009baa:	f300 8093 	bgt.w	8009cd4 <_strtod_l+0x86c>
 8009bae:	9b07      	ldr	r3, [sp, #28]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dd08      	ble.n	8009bc6 <_strtod_l+0x75e>
 8009bb4:	4650      	mov	r0, sl
 8009bb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009bb8:	9906      	ldr	r1, [sp, #24]
 8009bba:	f001 fef1 	bl	800b9a0 <__pow5mult>
 8009bbe:	9006      	str	r0, [sp, #24]
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f ae94 	beq.w	80098ee <_strtod_l+0x486>
 8009bc6:	2c00      	cmp	r4, #0
 8009bc8:	dd08      	ble.n	8009bdc <_strtod_l+0x774>
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4650      	mov	r0, sl
 8009bce:	9906      	ldr	r1, [sp, #24]
 8009bd0:	f001 ff40 	bl	800ba54 <__lshift>
 8009bd4:	9006      	str	r0, [sp, #24]
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f43f ae89 	beq.w	80098ee <_strtod_l+0x486>
 8009bdc:	2e00      	cmp	r6, #0
 8009bde:	dd08      	ble.n	8009bf2 <_strtod_l+0x78a>
 8009be0:	4632      	mov	r2, r6
 8009be2:	4650      	mov	r0, sl
 8009be4:	9904      	ldr	r1, [sp, #16]
 8009be6:	f001 ff35 	bl	800ba54 <__lshift>
 8009bea:	9004      	str	r0, [sp, #16]
 8009bec:	2800      	cmp	r0, #0
 8009bee:	f43f ae7e 	beq.w	80098ee <_strtod_l+0x486>
 8009bf2:	4650      	mov	r0, sl
 8009bf4:	9a06      	ldr	r2, [sp, #24]
 8009bf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bf8:	f001 ffb4 	bl	800bb64 <__mdiff>
 8009bfc:	4683      	mov	fp, r0
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	f43f ae75 	beq.w	80098ee <_strtod_l+0x486>
 8009c04:	2400      	movs	r4, #0
 8009c06:	68c3      	ldr	r3, [r0, #12]
 8009c08:	9904      	ldr	r1, [sp, #16]
 8009c0a:	60c4      	str	r4, [r0, #12]
 8009c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c0e:	f001 ff8d 	bl	800bb2c <__mcmp>
 8009c12:	42a0      	cmp	r0, r4
 8009c14:	da70      	bge.n	8009cf8 <_strtod_l+0x890>
 8009c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c18:	ea53 0308 	orrs.w	r3, r3, r8
 8009c1c:	f040 8096 	bne.w	8009d4c <_strtod_l+0x8e4>
 8009c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 8091 	bne.w	8009d4c <_strtod_l+0x8e4>
 8009c2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c2e:	0d1b      	lsrs	r3, r3, #20
 8009c30:	051b      	lsls	r3, r3, #20
 8009c32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c36:	f240 8089 	bls.w	8009d4c <_strtod_l+0x8e4>
 8009c3a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009c3e:	b923      	cbnz	r3, 8009c4a <_strtod_l+0x7e2>
 8009c40:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	f340 8081 	ble.w	8009d4c <_strtod_l+0x8e4>
 8009c4a:	4659      	mov	r1, fp
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	4650      	mov	r0, sl
 8009c50:	f001 ff00 	bl	800ba54 <__lshift>
 8009c54:	9904      	ldr	r1, [sp, #16]
 8009c56:	4683      	mov	fp, r0
 8009c58:	f001 ff68 	bl	800bb2c <__mcmp>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	dd75      	ble.n	8009d4c <_strtod_l+0x8e4>
 8009c60:	9905      	ldr	r1, [sp, #20]
 8009c62:	464b      	mov	r3, r9
 8009c64:	4a22      	ldr	r2, [pc, #136]	; (8009cf0 <_strtod_l+0x888>)
 8009c66:	2900      	cmp	r1, #0
 8009c68:	f000 8091 	beq.w	8009d8e <_strtod_l+0x926>
 8009c6c:	ea02 0109 	and.w	r1, r2, r9
 8009c70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c74:	f300 808b 	bgt.w	8009d8e <_strtod_l+0x926>
 8009c78:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c7c:	f77f aea9 	ble.w	80099d2 <_strtod_l+0x56a>
 8009c80:	2300      	movs	r3, #0
 8009c82:	4a1c      	ldr	r2, [pc, #112]	; (8009cf4 <_strtod_l+0x88c>)
 8009c84:	4640      	mov	r0, r8
 8009c86:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c90:	f7f6 fc3a 	bl	8000508 <__aeabi_dmul>
 8009c94:	460b      	mov	r3, r1
 8009c96:	4303      	orrs	r3, r0
 8009c98:	bf08      	it	eq
 8009c9a:	2322      	moveq	r3, #34	; 0x22
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	bf08      	it	eq
 8009ca2:	f8ca 3000 	streq.w	r3, [sl]
 8009ca6:	e62d      	b.n	8009904 <_strtod_l+0x49c>
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cac:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb0:	ea03 0808 	and.w	r8, r3, r8
 8009cb4:	e6db      	b.n	8009a6e <_strtod_l+0x606>
 8009cb6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009cba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009cbe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009cc2:	35e2      	adds	r5, #226	; 0xe2
 8009cc4:	fa07 f505 	lsl.w	r5, r7, r5
 8009cc8:	970f      	str	r7, [sp, #60]	; 0x3c
 8009cca:	e742      	b.n	8009b52 <_strtod_l+0x6ea>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	2500      	movs	r5, #0
 8009cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cd2:	e73e      	b.n	8009b52 <_strtod_l+0x6ea>
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	4650      	mov	r0, sl
 8009cd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cda:	f001 febb 	bl	800ba54 <__lshift>
 8009cde:	901c      	str	r0, [sp, #112]	; 0x70
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	f47f af64 	bne.w	8009bae <_strtod_l+0x746>
 8009ce6:	e602      	b.n	80098ee <_strtod_l+0x486>
 8009ce8:	0800d3b0 	.word	0x0800d3b0
 8009cec:	fffffc02 	.word	0xfffffc02
 8009cf0:	7ff00000 	.word	0x7ff00000
 8009cf4:	39500000 	.word	0x39500000
 8009cf8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009cfc:	d166      	bne.n	8009dcc <_strtod_l+0x964>
 8009cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d04:	b35a      	cbz	r2, 8009d5e <_strtod_l+0x8f6>
 8009d06:	4a9c      	ldr	r2, [pc, #624]	; (8009f78 <_strtod_l+0xb10>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d12c      	bne.n	8009d66 <_strtod_l+0x8fe>
 8009d0c:	9b05      	ldr	r3, [sp, #20]
 8009d0e:	4640      	mov	r0, r8
 8009d10:	b303      	cbz	r3, 8009d54 <_strtod_l+0x8ec>
 8009d12:	464b      	mov	r3, r9
 8009d14:	4a99      	ldr	r2, [pc, #612]	; (8009f7c <_strtod_l+0xb14>)
 8009d16:	f04f 31ff 	mov.w	r1, #4294967295
 8009d1a:	401a      	ands	r2, r3
 8009d1c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009d20:	d81b      	bhi.n	8009d5a <_strtod_l+0x8f2>
 8009d22:	0d12      	lsrs	r2, r2, #20
 8009d24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d28:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2c:	4298      	cmp	r0, r3
 8009d2e:	d11a      	bne.n	8009d66 <_strtod_l+0x8fe>
 8009d30:	4b93      	ldr	r3, [pc, #588]	; (8009f80 <_strtod_l+0xb18>)
 8009d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d102      	bne.n	8009d3e <_strtod_l+0x8d6>
 8009d38:	3001      	adds	r0, #1
 8009d3a:	f43f add8 	beq.w	80098ee <_strtod_l+0x486>
 8009d3e:	f04f 0800 	mov.w	r8, #0
 8009d42:	4b8e      	ldr	r3, [pc, #568]	; (8009f7c <_strtod_l+0xb14>)
 8009d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d46:	401a      	ands	r2, r3
 8009d48:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009d4c:	9b05      	ldr	r3, [sp, #20]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d196      	bne.n	8009c80 <_strtod_l+0x818>
 8009d52:	e5d7      	b.n	8009904 <_strtod_l+0x49c>
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	e7e8      	b.n	8009d2c <_strtod_l+0x8c4>
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	e7e6      	b.n	8009d2c <_strtod_l+0x8c4>
 8009d5e:	ea53 0308 	orrs.w	r3, r3, r8
 8009d62:	f43f af7d 	beq.w	8009c60 <_strtod_l+0x7f8>
 8009d66:	b1e5      	cbz	r5, 8009da2 <_strtod_l+0x93a>
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	421d      	tst	r5, r3
 8009d6c:	d0ee      	beq.n	8009d4c <_strtod_l+0x8e4>
 8009d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	9a05      	ldr	r2, [sp, #20]
 8009d76:	b1c3      	cbz	r3, 8009daa <_strtod_l+0x942>
 8009d78:	f7ff fb55 	bl	8009426 <sulp>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d84:	f7f6 fa0a 	bl	800019c <__adddf3>
 8009d88:	4680      	mov	r8, r0
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	e7de      	b.n	8009d4c <_strtod_l+0x8e4>
 8009d8e:	4013      	ands	r3, r2
 8009d90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d94:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009d98:	f04f 38ff 	mov.w	r8, #4294967295
 8009d9c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009da0:	e7d4      	b.n	8009d4c <_strtod_l+0x8e4>
 8009da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009da4:	ea13 0f08 	tst.w	r3, r8
 8009da8:	e7e0      	b.n	8009d6c <_strtod_l+0x904>
 8009daa:	f7ff fb3c 	bl	8009426 <sulp>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009db6:	f7f6 f9ef 	bl	8000198 <__aeabi_dsub>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4680      	mov	r8, r0
 8009dc0:	4689      	mov	r9, r1
 8009dc2:	f7f6 fe09 	bl	80009d8 <__aeabi_dcmpeq>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d0c0      	beq.n	8009d4c <_strtod_l+0x8e4>
 8009dca:	e602      	b.n	80099d2 <_strtod_l+0x56a>
 8009dcc:	4658      	mov	r0, fp
 8009dce:	9904      	ldr	r1, [sp, #16]
 8009dd0:	f002 f82e 	bl	800be30 <__ratio>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	f7f6 fe0f 	bl	8000a00 <__aeabi_dcmple>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d075      	beq.n	8009ed2 <_strtod_l+0xa6a>
 8009de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d047      	beq.n	8009e7c <_strtod_l+0xa14>
 8009dec:	2600      	movs	r6, #0
 8009dee:	4f65      	ldr	r7, [pc, #404]	; (8009f84 <_strtod_l+0xb1c>)
 8009df0:	4d64      	ldr	r5, [pc, #400]	; (8009f84 <_strtod_l+0xb1c>)
 8009df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009df8:	0d1b      	lsrs	r3, r3, #20
 8009dfa:	051b      	lsls	r3, r3, #20
 8009dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e00:	4b61      	ldr	r3, [pc, #388]	; (8009f88 <_strtod_l+0xb20>)
 8009e02:	429a      	cmp	r2, r3
 8009e04:	f040 80c8 	bne.w	8009f98 <_strtod_l+0xb30>
 8009e08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e0c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e12:	4640      	mov	r0, r8
 8009e14:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009e18:	4649      	mov	r1, r9
 8009e1a:	f001 ff33 	bl	800bc84 <__ulp>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fb6f 	bl	8000508 <__aeabi_dmul>
 8009e2a:	4642      	mov	r2, r8
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	f7f6 f9b5 	bl	800019c <__adddf3>
 8009e32:	460b      	mov	r3, r1
 8009e34:	4951      	ldr	r1, [pc, #324]	; (8009f7c <_strtod_l+0xb14>)
 8009e36:	4a55      	ldr	r2, [pc, #340]	; (8009f8c <_strtod_l+0xb24>)
 8009e38:	4019      	ands	r1, r3
 8009e3a:	4291      	cmp	r1, r2
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	d95e      	bls.n	8009efe <_strtod_l+0xa96>
 8009e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d103      	bne.n	8009e52 <_strtod_l+0x9ea>
 8009e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	f43f ad4e 	beq.w	80098ee <_strtod_l+0x486>
 8009e52:	f04f 38ff 	mov.w	r8, #4294967295
 8009e56:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009f80 <_strtod_l+0xb18>
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e5e:	f001 fbe1 	bl	800b624 <_Bfree>
 8009e62:	4650      	mov	r0, sl
 8009e64:	9906      	ldr	r1, [sp, #24]
 8009e66:	f001 fbdd 	bl	800b624 <_Bfree>
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	9904      	ldr	r1, [sp, #16]
 8009e6e:	f001 fbd9 	bl	800b624 <_Bfree>
 8009e72:	4659      	mov	r1, fp
 8009e74:	4650      	mov	r0, sl
 8009e76:	f001 fbd5 	bl	800b624 <_Bfree>
 8009e7a:	e61c      	b.n	8009ab6 <_strtod_l+0x64e>
 8009e7c:	f1b8 0f00 	cmp.w	r8, #0
 8009e80:	d119      	bne.n	8009eb6 <_strtod_l+0xa4e>
 8009e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e88:	b9e3      	cbnz	r3, 8009ec4 <_strtod_l+0xa5c>
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	4b3c      	ldr	r3, [pc, #240]	; (8009f84 <_strtod_l+0xb1c>)
 8009e92:	f7f6 fdab 	bl	80009ec <__aeabi_dcmplt>
 8009e96:	b9c8      	cbnz	r0, 8009ecc <_strtod_l+0xa64>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	4b3c      	ldr	r3, [pc, #240]	; (8009f90 <_strtod_l+0xb28>)
 8009ea0:	f7f6 fb32 	bl	8000508 <__aeabi_dmul>
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009eac:	9418      	str	r4, [sp, #96]	; 0x60
 8009eae:	9319      	str	r3, [sp, #100]	; 0x64
 8009eb0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009eb4:	e79d      	b.n	8009df2 <_strtod_l+0x98a>
 8009eb6:	f1b8 0f01 	cmp.w	r8, #1
 8009eba:	d103      	bne.n	8009ec4 <_strtod_l+0xa5c>
 8009ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f43f ad87 	beq.w	80099d2 <_strtod_l+0x56a>
 8009ec4:	2600      	movs	r6, #0
 8009ec6:	2400      	movs	r4, #0
 8009ec8:	4f32      	ldr	r7, [pc, #200]	; (8009f94 <_strtod_l+0xb2c>)
 8009eca:	e791      	b.n	8009df0 <_strtod_l+0x988>
 8009ecc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009ece:	4d30      	ldr	r5, [pc, #192]	; (8009f90 <_strtod_l+0xb28>)
 8009ed0:	e7ea      	b.n	8009ea8 <_strtod_l+0xa40>
 8009ed2:	4b2f      	ldr	r3, [pc, #188]	; (8009f90 <_strtod_l+0xb28>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 fb15 	bl	8000508 <__aeabi_dmul>
 8009ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	460d      	mov	r5, r1
 8009ee4:	b933      	cbnz	r3, 8009ef4 <_strtod_l+0xa8c>
 8009ee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eea:	9010      	str	r0, [sp, #64]	; 0x40
 8009eec:	9311      	str	r3, [sp, #68]	; 0x44
 8009eee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009ef2:	e77e      	b.n	8009df2 <_strtod_l+0x98a>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009efc:	e7f7      	b.n	8009eee <_strtod_l+0xa86>
 8009efe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009f02:	9b05      	ldr	r3, [sp, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1a8      	bne.n	8009e5a <_strtod_l+0x9f2>
 8009f08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f0e:	0d1b      	lsrs	r3, r3, #20
 8009f10:	051b      	lsls	r3, r3, #20
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d1a1      	bne.n	8009e5a <_strtod_l+0x9f2>
 8009f16:	4620      	mov	r0, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7f7 f8d9 	bl	80010d0 <__aeabi_d2lz>
 8009f1e:	f7f6 fac5 	bl	80004ac <__aeabi_l2d>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4620      	mov	r0, r4
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7f6 f935 	bl	8000198 <__aeabi_dsub>
 8009f2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f34:	ea43 0308 	orr.w	r3, r3, r8
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	d066      	beq.n	800a00e <_strtod_l+0xba6>
 8009f40:	a309      	add	r3, pc, #36	; (adr r3, 8009f68 <_strtod_l+0xb00>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7f6 fd51 	bl	80009ec <__aeabi_dcmplt>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	f47f acda 	bne.w	8009904 <_strtod_l+0x49c>
 8009f50:	a307      	add	r3, pc, #28	; (adr r3, 8009f70 <_strtod_l+0xb08>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	4620      	mov	r0, r4
 8009f58:	4629      	mov	r1, r5
 8009f5a:	f7f6 fd65 	bl	8000a28 <__aeabi_dcmpgt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f43f af7b 	beq.w	8009e5a <_strtod_l+0x9f2>
 8009f64:	e4ce      	b.n	8009904 <_strtod_l+0x49c>
 8009f66:	bf00      	nop
 8009f68:	94a03595 	.word	0x94a03595
 8009f6c:	3fdfffff 	.word	0x3fdfffff
 8009f70:	35afe535 	.word	0x35afe535
 8009f74:	3fe00000 	.word	0x3fe00000
 8009f78:	000fffff 	.word	0x000fffff
 8009f7c:	7ff00000 	.word	0x7ff00000
 8009f80:	7fefffff 	.word	0x7fefffff
 8009f84:	3ff00000 	.word	0x3ff00000
 8009f88:	7fe00000 	.word	0x7fe00000
 8009f8c:	7c9fffff 	.word	0x7c9fffff
 8009f90:	3fe00000 	.word	0x3fe00000
 8009f94:	bff00000 	.word	0xbff00000
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	b313      	cbz	r3, 8009fe2 <_strtod_l+0xb7a>
 8009f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fa2:	d81e      	bhi.n	8009fe2 <_strtod_l+0xb7a>
 8009fa4:	a326      	add	r3, pc, #152	; (adr r3, 800a040 <_strtod_l+0xbd8>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	4620      	mov	r0, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 fd27 	bl	8000a00 <__aeabi_dcmple>
 8009fb2:	b190      	cbz	r0, 8009fda <_strtod_l+0xb72>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f7f6 fd7e 	bl	8000ab8 <__aeabi_d2uiz>
 8009fbc:	2801      	cmp	r0, #1
 8009fbe:	bf38      	it	cc
 8009fc0:	2001      	movcc	r0, #1
 8009fc2:	f7f6 fa27 	bl	8000414 <__aeabi_ui2d>
 8009fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc8:	4604      	mov	r4, r0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	b9d3      	cbnz	r3, 800a004 <_strtod_l+0xb9c>
 8009fce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fd2:	9012      	str	r0, [sp, #72]	; 0x48
 8009fd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fd6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009fda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fdc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009fe0:	1a9f      	subs	r7, r3, r2
 8009fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fe6:	f001 fe4d 	bl	800bc84 <__ulp>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	f7f6 fa89 	bl	8000508 <__aeabi_dmul>
 8009ff6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ffa:	f7f6 f8cf 	bl	800019c <__adddf3>
 8009ffe:	4680      	mov	r8, r0
 800a000:	4689      	mov	r9, r1
 800a002:	e77e      	b.n	8009f02 <_strtod_l+0xa9a>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a00c:	e7e3      	b.n	8009fd6 <_strtod_l+0xb6e>
 800a00e:	a30e      	add	r3, pc, #56	; (adr r3, 800a048 <_strtod_l+0xbe0>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f7f6 fcea 	bl	80009ec <__aeabi_dcmplt>
 800a018:	e7a1      	b.n	8009f5e <_strtod_l+0xaf6>
 800a01a:	2300      	movs	r3, #0
 800a01c:	930c      	str	r3, [sp, #48]	; 0x30
 800a01e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a020:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	f7ff ba65 	b.w	80094f2 <_strtod_l+0x8a>
 800a028:	2b65      	cmp	r3, #101	; 0x65
 800a02a:	f43f ab5c 	beq.w	80096e6 <_strtod_l+0x27e>
 800a02e:	2b45      	cmp	r3, #69	; 0x45
 800a030:	f43f ab59 	beq.w	80096e6 <_strtod_l+0x27e>
 800a034:	2201      	movs	r2, #1
 800a036:	f7ff bb8d 	b.w	8009754 <_strtod_l+0x2ec>
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w
 800a040:	ffc00000 	.word	0xffc00000
 800a044:	41dfffff 	.word	0x41dfffff
 800a048:	94a03595 	.word	0x94a03595
 800a04c:	3fcfffff 	.word	0x3fcfffff

0800a050 <_strtod_r>:
 800a050:	4b01      	ldr	r3, [pc, #4]	; (800a058 <_strtod_r+0x8>)
 800a052:	f7ff ba09 	b.w	8009468 <_strtod_l>
 800a056:	bf00      	nop
 800a058:	20000074 	.word	0x20000074

0800a05c <_strtol_l.isra.0>:
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a062:	4686      	mov	lr, r0
 800a064:	d001      	beq.n	800a06a <_strtol_l.isra.0+0xe>
 800a066:	2b24      	cmp	r3, #36	; 0x24
 800a068:	d906      	bls.n	800a078 <_strtol_l.isra.0+0x1c>
 800a06a:	f7fe fac9 	bl	8008600 <__errno>
 800a06e:	2316      	movs	r3, #22
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	2000      	movs	r0, #0
 800a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a078:	468c      	mov	ip, r1
 800a07a:	4e3a      	ldr	r6, [pc, #232]	; (800a164 <_strtol_l.isra.0+0x108>)
 800a07c:	4660      	mov	r0, ip
 800a07e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a082:	5da5      	ldrb	r5, [r4, r6]
 800a084:	f015 0508 	ands.w	r5, r5, #8
 800a088:	d1f8      	bne.n	800a07c <_strtol_l.isra.0+0x20>
 800a08a:	2c2d      	cmp	r4, #45	; 0x2d
 800a08c:	d133      	bne.n	800a0f6 <_strtol_l.isra.0+0x9a>
 800a08e:	f04f 0801 	mov.w	r8, #1
 800a092:	f89c 4000 	ldrb.w	r4, [ip]
 800a096:	f100 0c02 	add.w	ip, r0, #2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d05d      	beq.n	800a15a <_strtol_l.isra.0+0xfe>
 800a09e:	2b10      	cmp	r3, #16
 800a0a0:	d10c      	bne.n	800a0bc <_strtol_l.isra.0+0x60>
 800a0a2:	2c30      	cmp	r4, #48	; 0x30
 800a0a4:	d10a      	bne.n	800a0bc <_strtol_l.isra.0+0x60>
 800a0a6:	f89c 0000 	ldrb.w	r0, [ip]
 800a0aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0ae:	2858      	cmp	r0, #88	; 0x58
 800a0b0:	d14e      	bne.n	800a150 <_strtol_l.isra.0+0xf4>
 800a0b2:	2310      	movs	r3, #16
 800a0b4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a0b8:	f10c 0c02 	add.w	ip, ip, #2
 800a0bc:	2500      	movs	r5, #0
 800a0be:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a0c2:	3f01      	subs	r7, #1
 800a0c4:	fbb7 f9f3 	udiv	r9, r7, r3
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	fb03 7a19 	mls	sl, r3, r9, r7
 800a0ce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a0d2:	2e09      	cmp	r6, #9
 800a0d4:	d818      	bhi.n	800a108 <_strtol_l.isra.0+0xac>
 800a0d6:	4634      	mov	r4, r6
 800a0d8:	42a3      	cmp	r3, r4
 800a0da:	dd24      	ble.n	800a126 <_strtol_l.isra.0+0xca>
 800a0dc:	2d00      	cmp	r5, #0
 800a0de:	db1f      	blt.n	800a120 <_strtol_l.isra.0+0xc4>
 800a0e0:	4581      	cmp	r9, r0
 800a0e2:	d31d      	bcc.n	800a120 <_strtol_l.isra.0+0xc4>
 800a0e4:	d101      	bne.n	800a0ea <_strtol_l.isra.0+0x8e>
 800a0e6:	45a2      	cmp	sl, r4
 800a0e8:	db1a      	blt.n	800a120 <_strtol_l.isra.0+0xc4>
 800a0ea:	2501      	movs	r5, #1
 800a0ec:	fb00 4003 	mla	r0, r0, r3, r4
 800a0f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a0f4:	e7eb      	b.n	800a0ce <_strtol_l.isra.0+0x72>
 800a0f6:	2c2b      	cmp	r4, #43	; 0x2b
 800a0f8:	bf08      	it	eq
 800a0fa:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a0fe:	46a8      	mov	r8, r5
 800a100:	bf08      	it	eq
 800a102:	f100 0c02 	addeq.w	ip, r0, #2
 800a106:	e7c8      	b.n	800a09a <_strtol_l.isra.0+0x3e>
 800a108:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a10c:	2e19      	cmp	r6, #25
 800a10e:	d801      	bhi.n	800a114 <_strtol_l.isra.0+0xb8>
 800a110:	3c37      	subs	r4, #55	; 0x37
 800a112:	e7e1      	b.n	800a0d8 <_strtol_l.isra.0+0x7c>
 800a114:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a118:	2e19      	cmp	r6, #25
 800a11a:	d804      	bhi.n	800a126 <_strtol_l.isra.0+0xca>
 800a11c:	3c57      	subs	r4, #87	; 0x57
 800a11e:	e7db      	b.n	800a0d8 <_strtol_l.isra.0+0x7c>
 800a120:	f04f 35ff 	mov.w	r5, #4294967295
 800a124:	e7e4      	b.n	800a0f0 <_strtol_l.isra.0+0x94>
 800a126:	2d00      	cmp	r5, #0
 800a128:	da08      	bge.n	800a13c <_strtol_l.isra.0+0xe0>
 800a12a:	2322      	movs	r3, #34	; 0x22
 800a12c:	4638      	mov	r0, r7
 800a12e:	f8ce 3000 	str.w	r3, [lr]
 800a132:	2a00      	cmp	r2, #0
 800a134:	d09e      	beq.n	800a074 <_strtol_l.isra.0+0x18>
 800a136:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a13a:	e007      	b.n	800a14c <_strtol_l.isra.0+0xf0>
 800a13c:	f1b8 0f00 	cmp.w	r8, #0
 800a140:	d000      	beq.n	800a144 <_strtol_l.isra.0+0xe8>
 800a142:	4240      	negs	r0, r0
 800a144:	2a00      	cmp	r2, #0
 800a146:	d095      	beq.n	800a074 <_strtol_l.isra.0+0x18>
 800a148:	2d00      	cmp	r5, #0
 800a14a:	d1f4      	bne.n	800a136 <_strtol_l.isra.0+0xda>
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	e791      	b.n	800a074 <_strtol_l.isra.0+0x18>
 800a150:	2430      	movs	r4, #48	; 0x30
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1b2      	bne.n	800a0bc <_strtol_l.isra.0+0x60>
 800a156:	2308      	movs	r3, #8
 800a158:	e7b0      	b.n	800a0bc <_strtol_l.isra.0+0x60>
 800a15a:	2c30      	cmp	r4, #48	; 0x30
 800a15c:	d0a3      	beq.n	800a0a6 <_strtol_l.isra.0+0x4a>
 800a15e:	230a      	movs	r3, #10
 800a160:	e7ac      	b.n	800a0bc <_strtol_l.isra.0+0x60>
 800a162:	bf00      	nop
 800a164:	0800d3d9 	.word	0x0800d3d9

0800a168 <_strtol_r>:
 800a168:	f7ff bf78 	b.w	800a05c <_strtol_l.isra.0>

0800a16c <quorem>:
 800a16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	6903      	ldr	r3, [r0, #16]
 800a172:	690c      	ldr	r4, [r1, #16]
 800a174:	4607      	mov	r7, r0
 800a176:	42a3      	cmp	r3, r4
 800a178:	f2c0 8083 	blt.w	800a282 <quorem+0x116>
 800a17c:	3c01      	subs	r4, #1
 800a17e:	f100 0514 	add.w	r5, r0, #20
 800a182:	f101 0814 	add.w	r8, r1, #20
 800a186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a194:	3301      	adds	r3, #1
 800a196:	429a      	cmp	r2, r3
 800a198:	fbb2 f6f3 	udiv	r6, r2, r3
 800a19c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1a4:	d332      	bcc.n	800a20c <quorem+0xa0>
 800a1a6:	f04f 0e00 	mov.w	lr, #0
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	46ac      	mov	ip, r5
 800a1ae:	46f2      	mov	sl, lr
 800a1b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1b4:	b293      	uxth	r3, r2
 800a1b6:	fb06 e303 	mla	r3, r6, r3, lr
 800a1ba:	0c12      	lsrs	r2, r2, #16
 800a1bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1c0:	fb06 e202 	mla	r2, r6, r2, lr
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	ebaa 0303 	sub.w	r3, sl, r3
 800a1ca:	f8dc a000 	ldr.w	sl, [ip]
 800a1ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1d2:	fa1f fa8a 	uxth.w	sl, sl
 800a1d6:	4453      	add	r3, sl
 800a1d8:	fa1f fa82 	uxth.w	sl, r2
 800a1dc:	f8dc 2000 	ldr.w	r2, [ip]
 800a1e0:	4581      	cmp	r9, r0
 800a1e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1f4:	f84c 3b04 	str.w	r3, [ip], #4
 800a1f8:	d2da      	bcs.n	800a1b0 <quorem+0x44>
 800a1fa:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1fe:	b92b      	cbnz	r3, 800a20c <quorem+0xa0>
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	3b04      	subs	r3, #4
 800a204:	429d      	cmp	r5, r3
 800a206:	461a      	mov	r2, r3
 800a208:	d32f      	bcc.n	800a26a <quorem+0xfe>
 800a20a:	613c      	str	r4, [r7, #16]
 800a20c:	4638      	mov	r0, r7
 800a20e:	f001 fc8d 	bl	800bb2c <__mcmp>
 800a212:	2800      	cmp	r0, #0
 800a214:	db25      	blt.n	800a262 <quorem+0xf6>
 800a216:	4628      	mov	r0, r5
 800a218:	f04f 0c00 	mov.w	ip, #0
 800a21c:	3601      	adds	r6, #1
 800a21e:	f858 1b04 	ldr.w	r1, [r8], #4
 800a222:	f8d0 e000 	ldr.w	lr, [r0]
 800a226:	b28b      	uxth	r3, r1
 800a228:	ebac 0303 	sub.w	r3, ip, r3
 800a22c:	fa1f f28e 	uxth.w	r2, lr
 800a230:	4413      	add	r3, r2
 800a232:	0c0a      	lsrs	r2, r1, #16
 800a234:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a242:	45c1      	cmp	r9, r8
 800a244:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a248:	f840 3b04 	str.w	r3, [r0], #4
 800a24c:	d2e7      	bcs.n	800a21e <quorem+0xb2>
 800a24e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a256:	b922      	cbnz	r2, 800a262 <quorem+0xf6>
 800a258:	3b04      	subs	r3, #4
 800a25a:	429d      	cmp	r5, r3
 800a25c:	461a      	mov	r2, r3
 800a25e:	d30a      	bcc.n	800a276 <quorem+0x10a>
 800a260:	613c      	str	r4, [r7, #16]
 800a262:	4630      	mov	r0, r6
 800a264:	b003      	add	sp, #12
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	6812      	ldr	r2, [r2, #0]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	2a00      	cmp	r2, #0
 800a270:	d1cb      	bne.n	800a20a <quorem+0x9e>
 800a272:	3c01      	subs	r4, #1
 800a274:	e7c6      	b.n	800a204 <quorem+0x98>
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	3b04      	subs	r3, #4
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d1f0      	bne.n	800a260 <quorem+0xf4>
 800a27e:	3c01      	subs	r4, #1
 800a280:	e7eb      	b.n	800a25a <quorem+0xee>
 800a282:	2000      	movs	r0, #0
 800a284:	e7ee      	b.n	800a264 <quorem+0xf8>
	...

0800a288 <_dtoa_r>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	4616      	mov	r6, r2
 800a28e:	461f      	mov	r7, r3
 800a290:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a292:	b099      	sub	sp, #100	; 0x64
 800a294:	4605      	mov	r5, r0
 800a296:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a29a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a29e:	b974      	cbnz	r4, 800a2be <_dtoa_r+0x36>
 800a2a0:	2010      	movs	r0, #16
 800a2a2:	f001 f949 	bl	800b538 <malloc>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	6268      	str	r0, [r5, #36]	; 0x24
 800a2aa:	b920      	cbnz	r0, 800a2b6 <_dtoa_r+0x2e>
 800a2ac:	21ea      	movs	r1, #234	; 0xea
 800a2ae:	4bae      	ldr	r3, [pc, #696]	; (800a568 <_dtoa_r+0x2e0>)
 800a2b0:	48ae      	ldr	r0, [pc, #696]	; (800a56c <_dtoa_r+0x2e4>)
 800a2b2:	f002 f875 	bl	800c3a0 <__assert_func>
 800a2b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2ba:	6004      	str	r4, [r0, #0]
 800a2bc:	60c4      	str	r4, [r0, #12]
 800a2be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2c0:	6819      	ldr	r1, [r3, #0]
 800a2c2:	b151      	cbz	r1, 800a2da <_dtoa_r+0x52>
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4093      	lsls	r3, r2
 800a2ca:	604a      	str	r2, [r1, #4]
 800a2cc:	608b      	str	r3, [r1, #8]
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f001 f9a8 	bl	800b624 <_Bfree>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	1e3b      	subs	r3, r7, #0
 800a2dc:	bfaf      	iteee	ge
 800a2de:	2300      	movge	r3, #0
 800a2e0:	2201      	movlt	r2, #1
 800a2e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2e6:	9305      	strlt	r3, [sp, #20]
 800a2e8:	bfa8      	it	ge
 800a2ea:	f8c8 3000 	strge.w	r3, [r8]
 800a2ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a2f2:	4b9f      	ldr	r3, [pc, #636]	; (800a570 <_dtoa_r+0x2e8>)
 800a2f4:	bfb8      	it	lt
 800a2f6:	f8c8 2000 	strlt.w	r2, [r8]
 800a2fa:	ea33 0309 	bics.w	r3, r3, r9
 800a2fe:	d119      	bne.n	800a334 <_dtoa_r+0xac>
 800a300:	f242 730f 	movw	r3, #9999	; 0x270f
 800a304:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a30c:	4333      	orrs	r3, r6
 800a30e:	f000 8580 	beq.w	800ae12 <_dtoa_r+0xb8a>
 800a312:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a314:	b953      	cbnz	r3, 800a32c <_dtoa_r+0xa4>
 800a316:	4b97      	ldr	r3, [pc, #604]	; (800a574 <_dtoa_r+0x2ec>)
 800a318:	e022      	b.n	800a360 <_dtoa_r+0xd8>
 800a31a:	4b97      	ldr	r3, [pc, #604]	; (800a578 <_dtoa_r+0x2f0>)
 800a31c:	9308      	str	r3, [sp, #32]
 800a31e:	3308      	adds	r3, #8
 800a320:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a322:	6013      	str	r3, [r2, #0]
 800a324:	9808      	ldr	r0, [sp, #32]
 800a326:	b019      	add	sp, #100	; 0x64
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32c:	4b91      	ldr	r3, [pc, #580]	; (800a574 <_dtoa_r+0x2ec>)
 800a32e:	9308      	str	r3, [sp, #32]
 800a330:	3303      	adds	r3, #3
 800a332:	e7f5      	b.n	800a320 <_dtoa_r+0x98>
 800a334:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a338:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a33c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a340:	2200      	movs	r2, #0
 800a342:	2300      	movs	r3, #0
 800a344:	f7f6 fb48 	bl	80009d8 <__aeabi_dcmpeq>
 800a348:	4680      	mov	r8, r0
 800a34a:	b158      	cbz	r0, 800a364 <_dtoa_r+0xdc>
 800a34c:	2301      	movs	r3, #1
 800a34e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 8559 	beq.w	800ae0c <_dtoa_r+0xb84>
 800a35a:	4888      	ldr	r0, [pc, #544]	; (800a57c <_dtoa_r+0x2f4>)
 800a35c:	6018      	str	r0, [r3, #0]
 800a35e:	1e43      	subs	r3, r0, #1
 800a360:	9308      	str	r3, [sp, #32]
 800a362:	e7df      	b.n	800a324 <_dtoa_r+0x9c>
 800a364:	ab16      	add	r3, sp, #88	; 0x58
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	ab17      	add	r3, sp, #92	; 0x5c
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	4628      	mov	r0, r5
 800a36e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a372:	f001 fd01 	bl	800bd78 <__d2b>
 800a376:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a37a:	4682      	mov	sl, r0
 800a37c:	2c00      	cmp	r4, #0
 800a37e:	d07e      	beq.n	800a47e <_dtoa_r+0x1f6>
 800a380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a386:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a38a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a38e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a392:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a396:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a39a:	2200      	movs	r2, #0
 800a39c:	4b78      	ldr	r3, [pc, #480]	; (800a580 <_dtoa_r+0x2f8>)
 800a39e:	f7f5 fefb 	bl	8000198 <__aeabi_dsub>
 800a3a2:	a36b      	add	r3, pc, #428	; (adr r3, 800a550 <_dtoa_r+0x2c8>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f6 f8ae 	bl	8000508 <__aeabi_dmul>
 800a3ac:	a36a      	add	r3, pc, #424	; (adr r3, 800a558 <_dtoa_r+0x2d0>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f5 fef3 	bl	800019c <__adddf3>
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	f7f6 f83a 	bl	8000434 <__aeabi_i2d>
 800a3c0:	a367      	add	r3, pc, #412	; (adr r3, 800a560 <_dtoa_r+0x2d8>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f6 f89f 	bl	8000508 <__aeabi_dmul>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f5 fee3 	bl	800019c <__adddf3>
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460f      	mov	r7, r1
 800a3da:	f7f6 fb45 	bl	8000a68 <__aeabi_d2iz>
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4681      	mov	r9, r0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	f7f6 fb00 	bl	80009ec <__aeabi_dcmplt>
 800a3ec:	b148      	cbz	r0, 800a402 <_dtoa_r+0x17a>
 800a3ee:	4648      	mov	r0, r9
 800a3f0:	f7f6 f820 	bl	8000434 <__aeabi_i2d>
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	f7f6 faee 	bl	80009d8 <__aeabi_dcmpeq>
 800a3fc:	b908      	cbnz	r0, 800a402 <_dtoa_r+0x17a>
 800a3fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800a402:	f1b9 0f16 	cmp.w	r9, #22
 800a406:	d857      	bhi.n	800a4b8 <_dtoa_r+0x230>
 800a408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a40c:	4b5d      	ldr	r3, [pc, #372]	; (800a584 <_dtoa_r+0x2fc>)
 800a40e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f7f6 fae9 	bl	80009ec <__aeabi_dcmplt>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d04e      	beq.n	800a4bc <_dtoa_r+0x234>
 800a41e:	2300      	movs	r3, #0
 800a420:	f109 39ff 	add.w	r9, r9, #4294967295
 800a424:	930f      	str	r3, [sp, #60]	; 0x3c
 800a426:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a428:	1b1c      	subs	r4, r3, r4
 800a42a:	1e63      	subs	r3, r4, #1
 800a42c:	9309      	str	r3, [sp, #36]	; 0x24
 800a42e:	bf49      	itett	mi
 800a430:	f1c4 0301 	rsbmi	r3, r4, #1
 800a434:	2300      	movpl	r3, #0
 800a436:	9306      	strmi	r3, [sp, #24]
 800a438:	2300      	movmi	r3, #0
 800a43a:	bf54      	ite	pl
 800a43c:	9306      	strpl	r3, [sp, #24]
 800a43e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a440:	f1b9 0f00 	cmp.w	r9, #0
 800a444:	db3c      	blt.n	800a4c0 <_dtoa_r+0x238>
 800a446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a448:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a44c:	444b      	add	r3, r9
 800a44e:	9309      	str	r3, [sp, #36]	; 0x24
 800a450:	2300      	movs	r3, #0
 800a452:	930a      	str	r3, [sp, #40]	; 0x28
 800a454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a456:	2b09      	cmp	r3, #9
 800a458:	d86c      	bhi.n	800a534 <_dtoa_r+0x2ac>
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	bfc4      	itt	gt
 800a45e:	3b04      	subgt	r3, #4
 800a460:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a464:	bfc8      	it	gt
 800a466:	2400      	movgt	r4, #0
 800a468:	f1a3 0302 	sub.w	r3, r3, #2
 800a46c:	bfd8      	it	le
 800a46e:	2401      	movle	r4, #1
 800a470:	2b03      	cmp	r3, #3
 800a472:	f200 808b 	bhi.w	800a58c <_dtoa_r+0x304>
 800a476:	e8df f003 	tbb	[pc, r3]
 800a47a:	4f2d      	.short	0x4f2d
 800a47c:	5b4d      	.short	0x5b4d
 800a47e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a482:	441c      	add	r4, r3
 800a484:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a488:	2b20      	cmp	r3, #32
 800a48a:	bfc3      	ittte	gt
 800a48c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a490:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a494:	fa09 f303 	lslgt.w	r3, r9, r3
 800a498:	f1c3 0320 	rsble	r3, r3, #32
 800a49c:	bfc6      	itte	gt
 800a49e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4a2:	4318      	orrgt	r0, r3
 800a4a4:	fa06 f003 	lslle.w	r0, r6, r3
 800a4a8:	f7f5 ffb4 	bl	8000414 <__aeabi_ui2d>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a4b2:	3c01      	subs	r4, #1
 800a4b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4b6:	e770      	b.n	800a39a <_dtoa_r+0x112>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e7b3      	b.n	800a424 <_dtoa_r+0x19c>
 800a4bc:	900f      	str	r0, [sp, #60]	; 0x3c
 800a4be:	e7b2      	b.n	800a426 <_dtoa_r+0x19e>
 800a4c0:	9b06      	ldr	r3, [sp, #24]
 800a4c2:	eba3 0309 	sub.w	r3, r3, r9
 800a4c6:	9306      	str	r3, [sp, #24]
 800a4c8:	f1c9 0300 	rsb	r3, r9, #0
 800a4cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	930e      	str	r3, [sp, #56]	; 0x38
 800a4d2:	e7bf      	b.n	800a454 <_dtoa_r+0x1cc>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	dc59      	bgt.n	800a592 <_dtoa_r+0x30a>
 800a4de:	f04f 0b01 	mov.w	fp, #1
 800a4e2:	465b      	mov	r3, fp
 800a4e4:	f8cd b008 	str.w	fp, [sp, #8]
 800a4e8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a4f0:	6042      	str	r2, [r0, #4]
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	f102 0614 	add.w	r6, r2, #20
 800a4f8:	429e      	cmp	r6, r3
 800a4fa:	6841      	ldr	r1, [r0, #4]
 800a4fc:	d94f      	bls.n	800a59e <_dtoa_r+0x316>
 800a4fe:	4628      	mov	r0, r5
 800a500:	f001 f850 	bl	800b5a4 <_Balloc>
 800a504:	9008      	str	r0, [sp, #32]
 800a506:	2800      	cmp	r0, #0
 800a508:	d14d      	bne.n	800a5a6 <_dtoa_r+0x31e>
 800a50a:	4602      	mov	r2, r0
 800a50c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a510:	4b1d      	ldr	r3, [pc, #116]	; (800a588 <_dtoa_r+0x300>)
 800a512:	e6cd      	b.n	800a2b0 <_dtoa_r+0x28>
 800a514:	2301      	movs	r3, #1
 800a516:	e7de      	b.n	800a4d6 <_dtoa_r+0x24e>
 800a518:	2300      	movs	r3, #0
 800a51a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a51e:	eb09 0b03 	add.w	fp, r9, r3
 800a522:	f10b 0301 	add.w	r3, fp, #1
 800a526:	2b01      	cmp	r3, #1
 800a528:	9302      	str	r3, [sp, #8]
 800a52a:	bfb8      	it	lt
 800a52c:	2301      	movlt	r3, #1
 800a52e:	e7dd      	b.n	800a4ec <_dtoa_r+0x264>
 800a530:	2301      	movs	r3, #1
 800a532:	e7f2      	b.n	800a51a <_dtoa_r+0x292>
 800a534:	2401      	movs	r4, #1
 800a536:	2300      	movs	r3, #0
 800a538:	940b      	str	r4, [sp, #44]	; 0x2c
 800a53a:	9322      	str	r3, [sp, #136]	; 0x88
 800a53c:	f04f 3bff 	mov.w	fp, #4294967295
 800a540:	2200      	movs	r2, #0
 800a542:	2312      	movs	r3, #18
 800a544:	f8cd b008 	str.w	fp, [sp, #8]
 800a548:	9223      	str	r2, [sp, #140]	; 0x8c
 800a54a:	e7cf      	b.n	800a4ec <_dtoa_r+0x264>
 800a54c:	f3af 8000 	nop.w
 800a550:	636f4361 	.word	0x636f4361
 800a554:	3fd287a7 	.word	0x3fd287a7
 800a558:	8b60c8b3 	.word	0x8b60c8b3
 800a55c:	3fc68a28 	.word	0x3fc68a28
 800a560:	509f79fb 	.word	0x509f79fb
 800a564:	3fd34413 	.word	0x3fd34413
 800a568:	0800d4e6 	.word	0x0800d4e6
 800a56c:	0800d4fd 	.word	0x0800d4fd
 800a570:	7ff00000 	.word	0x7ff00000
 800a574:	0800d4e2 	.word	0x0800d4e2
 800a578:	0800d4d9 	.word	0x0800d4d9
 800a57c:	0800d359 	.word	0x0800d359
 800a580:	3ff80000 	.word	0x3ff80000
 800a584:	0800d678 	.word	0x0800d678
 800a588:	0800d55c 	.word	0x0800d55c
 800a58c:	2301      	movs	r3, #1
 800a58e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a590:	e7d4      	b.n	800a53c <_dtoa_r+0x2b4>
 800a592:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a596:	465b      	mov	r3, fp
 800a598:	f8cd b008 	str.w	fp, [sp, #8]
 800a59c:	e7a6      	b.n	800a4ec <_dtoa_r+0x264>
 800a59e:	3101      	adds	r1, #1
 800a5a0:	6041      	str	r1, [r0, #4]
 800a5a2:	0052      	lsls	r2, r2, #1
 800a5a4:	e7a6      	b.n	800a4f4 <_dtoa_r+0x26c>
 800a5a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5a8:	9a08      	ldr	r2, [sp, #32]
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	2b0e      	cmp	r3, #14
 800a5b0:	f200 80a8 	bhi.w	800a704 <_dtoa_r+0x47c>
 800a5b4:	2c00      	cmp	r4, #0
 800a5b6:	f000 80a5 	beq.w	800a704 <_dtoa_r+0x47c>
 800a5ba:	f1b9 0f00 	cmp.w	r9, #0
 800a5be:	dd34      	ble.n	800a62a <_dtoa_r+0x3a2>
 800a5c0:	4a9a      	ldr	r2, [pc, #616]	; (800a82c <_dtoa_r+0x5a4>)
 800a5c2:	f009 030f 	and.w	r3, r9, #15
 800a5c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5ca:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a5ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a5d6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a5da:	d016      	beq.n	800a60a <_dtoa_r+0x382>
 800a5dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5e0:	4b93      	ldr	r3, [pc, #588]	; (800a830 <_dtoa_r+0x5a8>)
 800a5e2:	2703      	movs	r7, #3
 800a5e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5e8:	f7f6 f8b8 	bl	800075c <__aeabi_ddiv>
 800a5ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5f0:	f004 040f 	and.w	r4, r4, #15
 800a5f4:	4e8e      	ldr	r6, [pc, #568]	; (800a830 <_dtoa_r+0x5a8>)
 800a5f6:	b954      	cbnz	r4, 800a60e <_dtoa_r+0x386>
 800a5f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a600:	f7f6 f8ac 	bl	800075c <__aeabi_ddiv>
 800a604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a608:	e029      	b.n	800a65e <_dtoa_r+0x3d6>
 800a60a:	2702      	movs	r7, #2
 800a60c:	e7f2      	b.n	800a5f4 <_dtoa_r+0x36c>
 800a60e:	07e1      	lsls	r1, r4, #31
 800a610:	d508      	bpl.n	800a624 <_dtoa_r+0x39c>
 800a612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a616:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a61a:	f7f5 ff75 	bl	8000508 <__aeabi_dmul>
 800a61e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a622:	3701      	adds	r7, #1
 800a624:	1064      	asrs	r4, r4, #1
 800a626:	3608      	adds	r6, #8
 800a628:	e7e5      	b.n	800a5f6 <_dtoa_r+0x36e>
 800a62a:	f000 80a5 	beq.w	800a778 <_dtoa_r+0x4f0>
 800a62e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a632:	f1c9 0400 	rsb	r4, r9, #0
 800a636:	4b7d      	ldr	r3, [pc, #500]	; (800a82c <_dtoa_r+0x5a4>)
 800a638:	f004 020f 	and.w	r2, r4, #15
 800a63c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	f7f5 ff60 	bl	8000508 <__aeabi_dmul>
 800a648:	2702      	movs	r7, #2
 800a64a:	2300      	movs	r3, #0
 800a64c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a650:	4e77      	ldr	r6, [pc, #476]	; (800a830 <_dtoa_r+0x5a8>)
 800a652:	1124      	asrs	r4, r4, #4
 800a654:	2c00      	cmp	r4, #0
 800a656:	f040 8084 	bne.w	800a762 <_dtoa_r+0x4da>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1d2      	bne.n	800a604 <_dtoa_r+0x37c>
 800a65e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 808b 	beq.w	800a77c <_dtoa_r+0x4f4>
 800a666:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a66a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a66e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a672:	2200      	movs	r2, #0
 800a674:	4b6f      	ldr	r3, [pc, #444]	; (800a834 <_dtoa_r+0x5ac>)
 800a676:	f7f6 f9b9 	bl	80009ec <__aeabi_dcmplt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d07e      	beq.n	800a77c <_dtoa_r+0x4f4>
 800a67e:	9b02      	ldr	r3, [sp, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d07b      	beq.n	800a77c <_dtoa_r+0x4f4>
 800a684:	f1bb 0f00 	cmp.w	fp, #0
 800a688:	dd38      	ble.n	800a6fc <_dtoa_r+0x474>
 800a68a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a68e:	2200      	movs	r2, #0
 800a690:	4b69      	ldr	r3, [pc, #420]	; (800a838 <_dtoa_r+0x5b0>)
 800a692:	f7f5 ff39 	bl	8000508 <__aeabi_dmul>
 800a696:	465c      	mov	r4, fp
 800a698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a69c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a6a0:	3701      	adds	r7, #1
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	f7f5 fec6 	bl	8000434 <__aeabi_i2d>
 800a6a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ac:	f7f5 ff2c 	bl	8000508 <__aeabi_dmul>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4b62      	ldr	r3, [pc, #392]	; (800a83c <_dtoa_r+0x5b4>)
 800a6b4:	f7f5 fd72 	bl	800019c <__adddf3>
 800a6b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a6bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6c0:	9611      	str	r6, [sp, #68]	; 0x44
 800a6c2:	2c00      	cmp	r4, #0
 800a6c4:	d15d      	bne.n	800a782 <_dtoa_r+0x4fa>
 800a6c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4b5c      	ldr	r3, [pc, #368]	; (800a840 <_dtoa_r+0x5b8>)
 800a6ce:	f7f5 fd63 	bl	8000198 <__aeabi_dsub>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6da:	4633      	mov	r3, r6
 800a6dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6de:	f7f6 f9a3 	bl	8000a28 <__aeabi_dcmpgt>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f040 829e 	bne.w	800ac24 <_dtoa_r+0x99c>
 800a6e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a6f2:	f7f6 f97b 	bl	80009ec <__aeabi_dcmplt>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f040 8292 	bne.w	800ac20 <_dtoa_r+0x998>
 800a6fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a700:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a706:	2b00      	cmp	r3, #0
 800a708:	f2c0 8153 	blt.w	800a9b2 <_dtoa_r+0x72a>
 800a70c:	f1b9 0f0e 	cmp.w	r9, #14
 800a710:	f300 814f 	bgt.w	800a9b2 <_dtoa_r+0x72a>
 800a714:	4b45      	ldr	r3, [pc, #276]	; (800a82c <_dtoa_r+0x5a4>)
 800a716:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a71a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a71e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a724:	2b00      	cmp	r3, #0
 800a726:	f280 80db 	bge.w	800a8e0 <_dtoa_r+0x658>
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f300 80d7 	bgt.w	800a8e0 <_dtoa_r+0x658>
 800a732:	f040 8274 	bne.w	800ac1e <_dtoa_r+0x996>
 800a736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a73a:	2200      	movs	r2, #0
 800a73c:	4b40      	ldr	r3, [pc, #256]	; (800a840 <_dtoa_r+0x5b8>)
 800a73e:	f7f5 fee3 	bl	8000508 <__aeabi_dmul>
 800a742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a746:	f7f6 f965 	bl	8000a14 <__aeabi_dcmpge>
 800a74a:	9c02      	ldr	r4, [sp, #8]
 800a74c:	4626      	mov	r6, r4
 800a74e:	2800      	cmp	r0, #0
 800a750:	f040 824a 	bne.w	800abe8 <_dtoa_r+0x960>
 800a754:	2331      	movs	r3, #49	; 0x31
 800a756:	9f08      	ldr	r7, [sp, #32]
 800a758:	f109 0901 	add.w	r9, r9, #1
 800a75c:	f807 3b01 	strb.w	r3, [r7], #1
 800a760:	e246      	b.n	800abf0 <_dtoa_r+0x968>
 800a762:	07e2      	lsls	r2, r4, #31
 800a764:	d505      	bpl.n	800a772 <_dtoa_r+0x4ea>
 800a766:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a76a:	f7f5 fecd 	bl	8000508 <__aeabi_dmul>
 800a76e:	2301      	movs	r3, #1
 800a770:	3701      	adds	r7, #1
 800a772:	1064      	asrs	r4, r4, #1
 800a774:	3608      	adds	r6, #8
 800a776:	e76d      	b.n	800a654 <_dtoa_r+0x3cc>
 800a778:	2702      	movs	r7, #2
 800a77a:	e770      	b.n	800a65e <_dtoa_r+0x3d6>
 800a77c:	46c8      	mov	r8, r9
 800a77e:	9c02      	ldr	r4, [sp, #8]
 800a780:	e78f      	b.n	800a6a2 <_dtoa_r+0x41a>
 800a782:	9908      	ldr	r1, [sp, #32]
 800a784:	4b29      	ldr	r3, [pc, #164]	; (800a82c <_dtoa_r+0x5a4>)
 800a786:	4421      	add	r1, r4
 800a788:	9112      	str	r1, [sp, #72]	; 0x48
 800a78a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a78c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a790:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a794:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a798:	2900      	cmp	r1, #0
 800a79a:	d055      	beq.n	800a848 <_dtoa_r+0x5c0>
 800a79c:	2000      	movs	r0, #0
 800a79e:	4929      	ldr	r1, [pc, #164]	; (800a844 <_dtoa_r+0x5bc>)
 800a7a0:	f7f5 ffdc 	bl	800075c <__aeabi_ddiv>
 800a7a4:	463b      	mov	r3, r7
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	f7f5 fcf6 	bl	8000198 <__aeabi_dsub>
 800a7ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7b0:	9f08      	ldr	r7, [sp, #32]
 800a7b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7b6:	f7f6 f957 	bl	8000a68 <__aeabi_d2iz>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	f7f5 fe3a 	bl	8000434 <__aeabi_i2d>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7c8:	f7f5 fce6 	bl	8000198 <__aeabi_dsub>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	3430      	adds	r4, #48	; 0x30
 800a7d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7da:	f807 4b01 	strb.w	r4, [r7], #1
 800a7de:	f7f6 f905 	bl	80009ec <__aeabi_dcmplt>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d174      	bne.n	800a8d0 <_dtoa_r+0x648>
 800a7e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	4911      	ldr	r1, [pc, #68]	; (800a834 <_dtoa_r+0x5ac>)
 800a7ee:	f7f5 fcd3 	bl	8000198 <__aeabi_dsub>
 800a7f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7f6:	f7f6 f8f9 	bl	80009ec <__aeabi_dcmplt>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	f040 80b6 	bne.w	800a96c <_dtoa_r+0x6e4>
 800a800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a802:	429f      	cmp	r7, r3
 800a804:	f43f af7a 	beq.w	800a6fc <_dtoa_r+0x474>
 800a808:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a80c:	2200      	movs	r2, #0
 800a80e:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <_dtoa_r+0x5b0>)
 800a810:	f7f5 fe7a 	bl	8000508 <__aeabi_dmul>
 800a814:	2200      	movs	r2, #0
 800a816:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a81a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a81e:	4b06      	ldr	r3, [pc, #24]	; (800a838 <_dtoa_r+0x5b0>)
 800a820:	f7f5 fe72 	bl	8000508 <__aeabi_dmul>
 800a824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a828:	e7c3      	b.n	800a7b2 <_dtoa_r+0x52a>
 800a82a:	bf00      	nop
 800a82c:	0800d678 	.word	0x0800d678
 800a830:	0800d650 	.word	0x0800d650
 800a834:	3ff00000 	.word	0x3ff00000
 800a838:	40240000 	.word	0x40240000
 800a83c:	401c0000 	.word	0x401c0000
 800a840:	40140000 	.word	0x40140000
 800a844:	3fe00000 	.word	0x3fe00000
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f5 fe5c 	bl	8000508 <__aeabi_dmul>
 800a850:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a852:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a856:	9c08      	ldr	r4, [sp, #32]
 800a858:	9314      	str	r3, [sp, #80]	; 0x50
 800a85a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a85e:	f7f6 f903 	bl	8000a68 <__aeabi_d2iz>
 800a862:	9015      	str	r0, [sp, #84]	; 0x54
 800a864:	f7f5 fde6 	bl	8000434 <__aeabi_i2d>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a870:	f7f5 fc92 	bl	8000198 <__aeabi_dsub>
 800a874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a876:	4606      	mov	r6, r0
 800a878:	3330      	adds	r3, #48	; 0x30
 800a87a:	f804 3b01 	strb.w	r3, [r4], #1
 800a87e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a880:	460f      	mov	r7, r1
 800a882:	429c      	cmp	r4, r3
 800a884:	f04f 0200 	mov.w	r2, #0
 800a888:	d124      	bne.n	800a8d4 <_dtoa_r+0x64c>
 800a88a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a88e:	4bb3      	ldr	r3, [pc, #716]	; (800ab5c <_dtoa_r+0x8d4>)
 800a890:	f7f5 fc84 	bl	800019c <__adddf3>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f6 f8c4 	bl	8000a28 <__aeabi_dcmpgt>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d162      	bne.n	800a96a <_dtoa_r+0x6e2>
 800a8a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	49ac      	ldr	r1, [pc, #688]	; (800ab5c <_dtoa_r+0x8d4>)
 800a8ac:	f7f5 fc74 	bl	8000198 <__aeabi_dsub>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f7f6 f898 	bl	80009ec <__aeabi_dcmplt>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f43f af1d 	beq.w	800a6fc <_dtoa_r+0x474>
 800a8c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a8c4:	1e7b      	subs	r3, r7, #1
 800a8c6:	9314      	str	r3, [sp, #80]	; 0x50
 800a8c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a8cc:	2b30      	cmp	r3, #48	; 0x30
 800a8ce:	d0f8      	beq.n	800a8c2 <_dtoa_r+0x63a>
 800a8d0:	46c1      	mov	r9, r8
 800a8d2:	e03a      	b.n	800a94a <_dtoa_r+0x6c2>
 800a8d4:	4ba2      	ldr	r3, [pc, #648]	; (800ab60 <_dtoa_r+0x8d8>)
 800a8d6:	f7f5 fe17 	bl	8000508 <__aeabi_dmul>
 800a8da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8de:	e7bc      	b.n	800a85a <_dtoa_r+0x5d2>
 800a8e0:	9f08      	ldr	r7, [sp, #32]
 800a8e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ea:	f7f5 ff37 	bl	800075c <__aeabi_ddiv>
 800a8ee:	f7f6 f8bb 	bl	8000a68 <__aeabi_d2iz>
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	f7f5 fd9e 	bl	8000434 <__aeabi_i2d>
 800a8f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8fc:	f7f5 fe04 	bl	8000508 <__aeabi_dmul>
 800a900:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a904:	460b      	mov	r3, r1
 800a906:	4602      	mov	r2, r0
 800a908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a90c:	f7f5 fc44 	bl	8000198 <__aeabi_dsub>
 800a910:	f807 6b01 	strb.w	r6, [r7], #1
 800a914:	9e08      	ldr	r6, [sp, #32]
 800a916:	9b02      	ldr	r3, [sp, #8]
 800a918:	1bbe      	subs	r6, r7, r6
 800a91a:	42b3      	cmp	r3, r6
 800a91c:	d13a      	bne.n	800a994 <_dtoa_r+0x70c>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	f7f5 fc3b 	bl	800019c <__adddf3>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a92e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a932:	f7f6 f879 	bl	8000a28 <__aeabi_dcmpgt>
 800a936:	bb58      	cbnz	r0, 800a990 <_dtoa_r+0x708>
 800a938:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a93c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a940:	f7f6 f84a 	bl	80009d8 <__aeabi_dcmpeq>
 800a944:	b108      	cbz	r0, 800a94a <_dtoa_r+0x6c2>
 800a946:	07e1      	lsls	r1, r4, #31
 800a948:	d422      	bmi.n	800a990 <_dtoa_r+0x708>
 800a94a:	4628      	mov	r0, r5
 800a94c:	4651      	mov	r1, sl
 800a94e:	f000 fe69 	bl	800b624 <_Bfree>
 800a952:	2300      	movs	r3, #0
 800a954:	703b      	strb	r3, [r7, #0]
 800a956:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a958:	f109 0001 	add.w	r0, r9, #1
 800a95c:	6018      	str	r0, [r3, #0]
 800a95e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a960:	2b00      	cmp	r3, #0
 800a962:	f43f acdf 	beq.w	800a324 <_dtoa_r+0x9c>
 800a966:	601f      	str	r7, [r3, #0]
 800a968:	e4dc      	b.n	800a324 <_dtoa_r+0x9c>
 800a96a:	4627      	mov	r7, r4
 800a96c:	463b      	mov	r3, r7
 800a96e:	461f      	mov	r7, r3
 800a970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a974:	2a39      	cmp	r2, #57	; 0x39
 800a976:	d107      	bne.n	800a988 <_dtoa_r+0x700>
 800a978:	9a08      	ldr	r2, [sp, #32]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d1f7      	bne.n	800a96e <_dtoa_r+0x6e6>
 800a97e:	2230      	movs	r2, #48	; 0x30
 800a980:	9908      	ldr	r1, [sp, #32]
 800a982:	f108 0801 	add.w	r8, r8, #1
 800a986:	700a      	strb	r2, [r1, #0]
 800a988:	781a      	ldrb	r2, [r3, #0]
 800a98a:	3201      	adds	r2, #1
 800a98c:	701a      	strb	r2, [r3, #0]
 800a98e:	e79f      	b.n	800a8d0 <_dtoa_r+0x648>
 800a990:	46c8      	mov	r8, r9
 800a992:	e7eb      	b.n	800a96c <_dtoa_r+0x6e4>
 800a994:	2200      	movs	r2, #0
 800a996:	4b72      	ldr	r3, [pc, #456]	; (800ab60 <_dtoa_r+0x8d8>)
 800a998:	f7f5 fdb6 	bl	8000508 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f7f6 f816 	bl	80009d8 <__aeabi_dcmpeq>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d098      	beq.n	800a8e2 <_dtoa_r+0x65a>
 800a9b0:	e7cb      	b.n	800a94a <_dtoa_r+0x6c2>
 800a9b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9b4:	2a00      	cmp	r2, #0
 800a9b6:	f000 80cd 	beq.w	800ab54 <_dtoa_r+0x8cc>
 800a9ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a9bc:	2a01      	cmp	r2, #1
 800a9be:	f300 80af 	bgt.w	800ab20 <_dtoa_r+0x898>
 800a9c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a9c4:	2a00      	cmp	r2, #0
 800a9c6:	f000 80a7 	beq.w	800ab18 <_dtoa_r+0x890>
 800a9ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9d0:	9f06      	ldr	r7, [sp, #24]
 800a9d2:	9a06      	ldr	r2, [sp, #24]
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	441a      	add	r2, r3
 800a9d8:	9206      	str	r2, [sp, #24]
 800a9da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9dc:	4628      	mov	r0, r5
 800a9de:	441a      	add	r2, r3
 800a9e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e2:	f000 ff23 	bl	800b82c <__i2b>
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	2f00      	cmp	r7, #0
 800a9ea:	dd0c      	ble.n	800aa06 <_dtoa_r+0x77e>
 800a9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dd09      	ble.n	800aa06 <_dtoa_r+0x77e>
 800a9f2:	42bb      	cmp	r3, r7
 800a9f4:	bfa8      	it	ge
 800a9f6:	463b      	movge	r3, r7
 800a9f8:	9a06      	ldr	r2, [sp, #24]
 800a9fa:	1aff      	subs	r7, r7, r3
 800a9fc:	1ad2      	subs	r2, r2, r3
 800a9fe:	9206      	str	r2, [sp, #24]
 800aa00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	9309      	str	r3, [sp, #36]	; 0x24
 800aa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa08:	b1f3      	cbz	r3, 800aa48 <_dtoa_r+0x7c0>
 800aa0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 80a9 	beq.w	800ab64 <_dtoa_r+0x8dc>
 800aa12:	2c00      	cmp	r4, #0
 800aa14:	dd10      	ble.n	800aa38 <_dtoa_r+0x7b0>
 800aa16:	4631      	mov	r1, r6
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 ffc0 	bl	800b9a0 <__pow5mult>
 800aa20:	4652      	mov	r2, sl
 800aa22:	4601      	mov	r1, r0
 800aa24:	4606      	mov	r6, r0
 800aa26:	4628      	mov	r0, r5
 800aa28:	f000 ff16 	bl	800b858 <__multiply>
 800aa2c:	4680      	mov	r8, r0
 800aa2e:	4651      	mov	r1, sl
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 fdf7 	bl	800b624 <_Bfree>
 800aa36:	46c2      	mov	sl, r8
 800aa38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3a:	1b1a      	subs	r2, r3, r4
 800aa3c:	d004      	beq.n	800aa48 <_dtoa_r+0x7c0>
 800aa3e:	4651      	mov	r1, sl
 800aa40:	4628      	mov	r0, r5
 800aa42:	f000 ffad 	bl	800b9a0 <__pow5mult>
 800aa46:	4682      	mov	sl, r0
 800aa48:	2101      	movs	r1, #1
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f000 feee 	bl	800b82c <__i2b>
 800aa50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa52:	4604      	mov	r4, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f340 8087 	ble.w	800ab68 <_dtoa_r+0x8e0>
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f000 ff9e 	bl	800b9a0 <__pow5mult>
 800aa64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa66:	4604      	mov	r4, r0
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	f340 8080 	ble.w	800ab6e <_dtoa_r+0x8e6>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa78:	6918      	ldr	r0, [r3, #16]
 800aa7a:	f000 fe89 	bl	800b790 <__hi0bits>
 800aa7e:	f1c0 0020 	rsb	r0, r0, #32
 800aa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa84:	4418      	add	r0, r3
 800aa86:	f010 001f 	ands.w	r0, r0, #31
 800aa8a:	f000 8092 	beq.w	800abb2 <_dtoa_r+0x92a>
 800aa8e:	f1c0 0320 	rsb	r3, r0, #32
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	f340 808a 	ble.w	800abac <_dtoa_r+0x924>
 800aa98:	f1c0 001c 	rsb	r0, r0, #28
 800aa9c:	9b06      	ldr	r3, [sp, #24]
 800aa9e:	4407      	add	r7, r0
 800aaa0:	4403      	add	r3, r0
 800aaa2:	9306      	str	r3, [sp, #24]
 800aaa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa6:	4403      	add	r3, r0
 800aaa8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaaa:	9b06      	ldr	r3, [sp, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dd05      	ble.n	800aabc <_dtoa_r+0x834>
 800aab0:	4651      	mov	r1, sl
 800aab2:	461a      	mov	r2, r3
 800aab4:	4628      	mov	r0, r5
 800aab6:	f000 ffcd 	bl	800ba54 <__lshift>
 800aaba:	4682      	mov	sl, r0
 800aabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	dd05      	ble.n	800aace <_dtoa_r+0x846>
 800aac2:	4621      	mov	r1, r4
 800aac4:	461a      	mov	r2, r3
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 ffc4 	bl	800ba54 <__lshift>
 800aacc:	4604      	mov	r4, r0
 800aace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d070      	beq.n	800abb6 <_dtoa_r+0x92e>
 800aad4:	4621      	mov	r1, r4
 800aad6:	4650      	mov	r0, sl
 800aad8:	f001 f828 	bl	800bb2c <__mcmp>
 800aadc:	2800      	cmp	r0, #0
 800aade:	da6a      	bge.n	800abb6 <_dtoa_r+0x92e>
 800aae0:	2300      	movs	r3, #0
 800aae2:	4651      	mov	r1, sl
 800aae4:	220a      	movs	r2, #10
 800aae6:	4628      	mov	r0, r5
 800aae8:	f000 fdbe 	bl	800b668 <__multadd>
 800aaec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaee:	4682      	mov	sl, r0
 800aaf0:	f109 39ff 	add.w	r9, r9, #4294967295
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8193 	beq.w	800ae20 <_dtoa_r+0xb98>
 800aafa:	4631      	mov	r1, r6
 800aafc:	2300      	movs	r3, #0
 800aafe:	220a      	movs	r2, #10
 800ab00:	4628      	mov	r0, r5
 800ab02:	f000 fdb1 	bl	800b668 <__multadd>
 800ab06:	f1bb 0f00 	cmp.w	fp, #0
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	f300 8093 	bgt.w	800ac36 <_dtoa_r+0x9ae>
 800ab10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	dc57      	bgt.n	800abc6 <_dtoa_r+0x93e>
 800ab16:	e08e      	b.n	800ac36 <_dtoa_r+0x9ae>
 800ab18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab1e:	e756      	b.n	800a9ce <_dtoa_r+0x746>
 800ab20:	9b02      	ldr	r3, [sp, #8]
 800ab22:	1e5c      	subs	r4, r3, #1
 800ab24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	bfb7      	itett	lt
 800ab2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab2c:	1b1c      	subge	r4, r3, r4
 800ab2e:	1ae2      	sublt	r2, r4, r3
 800ab30:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ab32:	bfbe      	ittt	lt
 800ab34:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ab36:	189b      	addlt	r3, r3, r2
 800ab38:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ab3a:	9b02      	ldr	r3, [sp, #8]
 800ab3c:	bfb8      	it	lt
 800ab3e:	2400      	movlt	r4, #0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bfbb      	ittet	lt
 800ab44:	9b06      	ldrlt	r3, [sp, #24]
 800ab46:	9a02      	ldrlt	r2, [sp, #8]
 800ab48:	9f06      	ldrge	r7, [sp, #24]
 800ab4a:	1a9f      	sublt	r7, r3, r2
 800ab4c:	bfac      	ite	ge
 800ab4e:	9b02      	ldrge	r3, [sp, #8]
 800ab50:	2300      	movlt	r3, #0
 800ab52:	e73e      	b.n	800a9d2 <_dtoa_r+0x74a>
 800ab54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab56:	9f06      	ldr	r7, [sp, #24]
 800ab58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ab5a:	e745      	b.n	800a9e8 <_dtoa_r+0x760>
 800ab5c:	3fe00000 	.word	0x3fe00000
 800ab60:	40240000 	.word	0x40240000
 800ab64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab66:	e76a      	b.n	800aa3e <_dtoa_r+0x7b6>
 800ab68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	dc19      	bgt.n	800aba2 <_dtoa_r+0x91a>
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	b9bb      	cbnz	r3, 800aba2 <_dtoa_r+0x91a>
 800ab72:	9b05      	ldr	r3, [sp, #20]
 800ab74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab78:	b99b      	cbnz	r3, 800aba2 <_dtoa_r+0x91a>
 800ab7a:	9b05      	ldr	r3, [sp, #20]
 800ab7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab80:	0d1b      	lsrs	r3, r3, #20
 800ab82:	051b      	lsls	r3, r3, #20
 800ab84:	b183      	cbz	r3, 800aba8 <_dtoa_r+0x920>
 800ab86:	f04f 0801 	mov.w	r8, #1
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	9306      	str	r3, [sp, #24]
 800ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab92:	3301      	adds	r3, #1
 800ab94:	9309      	str	r3, [sp, #36]	; 0x24
 800ab96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f47f af6a 	bne.w	800aa72 <_dtoa_r+0x7ea>
 800ab9e:	2001      	movs	r0, #1
 800aba0:	e76f      	b.n	800aa82 <_dtoa_r+0x7fa>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	e7f6      	b.n	800ab96 <_dtoa_r+0x90e>
 800aba8:	4698      	mov	r8, r3
 800abaa:	e7f4      	b.n	800ab96 <_dtoa_r+0x90e>
 800abac:	f43f af7d 	beq.w	800aaaa <_dtoa_r+0x822>
 800abb0:	4618      	mov	r0, r3
 800abb2:	301c      	adds	r0, #28
 800abb4:	e772      	b.n	800aa9c <_dtoa_r+0x814>
 800abb6:	9b02      	ldr	r3, [sp, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc36      	bgt.n	800ac2a <_dtoa_r+0x9a2>
 800abbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	dd33      	ble.n	800ac2a <_dtoa_r+0x9a2>
 800abc2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800abc6:	f1bb 0f00 	cmp.w	fp, #0
 800abca:	d10d      	bne.n	800abe8 <_dtoa_r+0x960>
 800abcc:	4621      	mov	r1, r4
 800abce:	465b      	mov	r3, fp
 800abd0:	2205      	movs	r2, #5
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 fd48 	bl	800b668 <__multadd>
 800abd8:	4601      	mov	r1, r0
 800abda:	4604      	mov	r4, r0
 800abdc:	4650      	mov	r0, sl
 800abde:	f000 ffa5 	bl	800bb2c <__mcmp>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	f73f adb6 	bgt.w	800a754 <_dtoa_r+0x4cc>
 800abe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abea:	9f08      	ldr	r7, [sp, #32]
 800abec:	ea6f 0903 	mvn.w	r9, r3
 800abf0:	f04f 0800 	mov.w	r8, #0
 800abf4:	4621      	mov	r1, r4
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 fd14 	bl	800b624 <_Bfree>
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	f43f aea4 	beq.w	800a94a <_dtoa_r+0x6c2>
 800ac02:	f1b8 0f00 	cmp.w	r8, #0
 800ac06:	d005      	beq.n	800ac14 <_dtoa_r+0x98c>
 800ac08:	45b0      	cmp	r8, r6
 800ac0a:	d003      	beq.n	800ac14 <_dtoa_r+0x98c>
 800ac0c:	4641      	mov	r1, r8
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 fd08 	bl	800b624 <_Bfree>
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 fd04 	bl	800b624 <_Bfree>
 800ac1c:	e695      	b.n	800a94a <_dtoa_r+0x6c2>
 800ac1e:	2400      	movs	r4, #0
 800ac20:	4626      	mov	r6, r4
 800ac22:	e7e1      	b.n	800abe8 <_dtoa_r+0x960>
 800ac24:	46c1      	mov	r9, r8
 800ac26:	4626      	mov	r6, r4
 800ac28:	e594      	b.n	800a754 <_dtoa_r+0x4cc>
 800ac2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 80fc 	beq.w	800ae2e <_dtoa_r+0xba6>
 800ac36:	2f00      	cmp	r7, #0
 800ac38:	dd05      	ble.n	800ac46 <_dtoa_r+0x9be>
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	463a      	mov	r2, r7
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 ff08 	bl	800ba54 <__lshift>
 800ac44:	4606      	mov	r6, r0
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	d05c      	beq.n	800ad06 <_dtoa_r+0xa7e>
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	6871      	ldr	r1, [r6, #4]
 800ac50:	f000 fca8 	bl	800b5a4 <_Balloc>
 800ac54:	4607      	mov	r7, r0
 800ac56:	b928      	cbnz	r0, 800ac64 <_dtoa_r+0x9dc>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac5e:	4b7e      	ldr	r3, [pc, #504]	; (800ae58 <_dtoa_r+0xbd0>)
 800ac60:	f7ff bb26 	b.w	800a2b0 <_dtoa_r+0x28>
 800ac64:	6932      	ldr	r2, [r6, #16]
 800ac66:	f106 010c 	add.w	r1, r6, #12
 800ac6a:	3202      	adds	r2, #2
 800ac6c:	0092      	lsls	r2, r2, #2
 800ac6e:	300c      	adds	r0, #12
 800ac70:	f000 fc8a 	bl	800b588 <memcpy>
 800ac74:	2201      	movs	r2, #1
 800ac76:	4639      	mov	r1, r7
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f000 feeb 	bl	800ba54 <__lshift>
 800ac7e:	46b0      	mov	r8, r6
 800ac80:	4606      	mov	r6, r0
 800ac82:	9b08      	ldr	r3, [sp, #32]
 800ac84:	3301      	adds	r3, #1
 800ac86:	9302      	str	r3, [sp, #8]
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	445b      	add	r3, fp
 800ac8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ac8e:	9b04      	ldr	r3, [sp, #16]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	9309      	str	r3, [sp, #36]	; 0x24
 800ac96:	9b02      	ldr	r3, [sp, #8]
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4650      	mov	r0, sl
 800ac9c:	f103 3bff 	add.w	fp, r3, #4294967295
 800aca0:	f7ff fa64 	bl	800a16c <quorem>
 800aca4:	4603      	mov	r3, r0
 800aca6:	4641      	mov	r1, r8
 800aca8:	3330      	adds	r3, #48	; 0x30
 800acaa:	9004      	str	r0, [sp, #16]
 800acac:	4650      	mov	r0, sl
 800acae:	930b      	str	r3, [sp, #44]	; 0x2c
 800acb0:	f000 ff3c 	bl	800bb2c <__mcmp>
 800acb4:	4632      	mov	r2, r6
 800acb6:	9006      	str	r0, [sp, #24]
 800acb8:	4621      	mov	r1, r4
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 ff52 	bl	800bb64 <__mdiff>
 800acc0:	68c2      	ldr	r2, [r0, #12]
 800acc2:	4607      	mov	r7, r0
 800acc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acc6:	bb02      	cbnz	r2, 800ad0a <_dtoa_r+0xa82>
 800acc8:	4601      	mov	r1, r0
 800acca:	4650      	mov	r0, sl
 800accc:	f000 ff2e 	bl	800bb2c <__mcmp>
 800acd0:	4602      	mov	r2, r0
 800acd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acd4:	4639      	mov	r1, r7
 800acd6:	4628      	mov	r0, r5
 800acd8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800acdc:	f000 fca2 	bl	800b624 <_Bfree>
 800ace0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ace2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ace4:	9f02      	ldr	r7, [sp, #8]
 800ace6:	ea43 0102 	orr.w	r1, r3, r2
 800acea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acec:	430b      	orrs	r3, r1
 800acee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf0:	d10d      	bne.n	800ad0e <_dtoa_r+0xa86>
 800acf2:	2b39      	cmp	r3, #57	; 0x39
 800acf4:	d027      	beq.n	800ad46 <_dtoa_r+0xabe>
 800acf6:	9a06      	ldr	r2, [sp, #24]
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	dd01      	ble.n	800ad00 <_dtoa_r+0xa78>
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	3331      	adds	r3, #49	; 0x31
 800ad00:	f88b 3000 	strb.w	r3, [fp]
 800ad04:	e776      	b.n	800abf4 <_dtoa_r+0x96c>
 800ad06:	4630      	mov	r0, r6
 800ad08:	e7b9      	b.n	800ac7e <_dtoa_r+0x9f6>
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	e7e2      	b.n	800acd4 <_dtoa_r+0xa4c>
 800ad0e:	9906      	ldr	r1, [sp, #24]
 800ad10:	2900      	cmp	r1, #0
 800ad12:	db04      	blt.n	800ad1e <_dtoa_r+0xa96>
 800ad14:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ad16:	4301      	orrs	r1, r0
 800ad18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad1a:	4301      	orrs	r1, r0
 800ad1c:	d120      	bne.n	800ad60 <_dtoa_r+0xad8>
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	ddee      	ble.n	800ad00 <_dtoa_r+0xa78>
 800ad22:	4651      	mov	r1, sl
 800ad24:	2201      	movs	r2, #1
 800ad26:	4628      	mov	r0, r5
 800ad28:	9302      	str	r3, [sp, #8]
 800ad2a:	f000 fe93 	bl	800ba54 <__lshift>
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4682      	mov	sl, r0
 800ad32:	f000 fefb 	bl	800bb2c <__mcmp>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	9b02      	ldr	r3, [sp, #8]
 800ad3a:	dc02      	bgt.n	800ad42 <_dtoa_r+0xaba>
 800ad3c:	d1e0      	bne.n	800ad00 <_dtoa_r+0xa78>
 800ad3e:	07da      	lsls	r2, r3, #31
 800ad40:	d5de      	bpl.n	800ad00 <_dtoa_r+0xa78>
 800ad42:	2b39      	cmp	r3, #57	; 0x39
 800ad44:	d1da      	bne.n	800acfc <_dtoa_r+0xa74>
 800ad46:	2339      	movs	r3, #57	; 0x39
 800ad48:	f88b 3000 	strb.w	r3, [fp]
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	461f      	mov	r7, r3
 800ad50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	2a39      	cmp	r2, #57	; 0x39
 800ad58:	d050      	beq.n	800adfc <_dtoa_r+0xb74>
 800ad5a:	3201      	adds	r2, #1
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	e749      	b.n	800abf4 <_dtoa_r+0x96c>
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	dd03      	ble.n	800ad6c <_dtoa_r+0xae4>
 800ad64:	2b39      	cmp	r3, #57	; 0x39
 800ad66:	d0ee      	beq.n	800ad46 <_dtoa_r+0xabe>
 800ad68:	3301      	adds	r3, #1
 800ad6a:	e7c9      	b.n	800ad00 <_dtoa_r+0xa78>
 800ad6c:	9a02      	ldr	r2, [sp, #8]
 800ad6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad70:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad74:	428a      	cmp	r2, r1
 800ad76:	d02a      	beq.n	800adce <_dtoa_r+0xb46>
 800ad78:	4651      	mov	r1, sl
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	220a      	movs	r2, #10
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 fc72 	bl	800b668 <__multadd>
 800ad84:	45b0      	cmp	r8, r6
 800ad86:	4682      	mov	sl, r0
 800ad88:	f04f 0300 	mov.w	r3, #0
 800ad8c:	f04f 020a 	mov.w	r2, #10
 800ad90:	4641      	mov	r1, r8
 800ad92:	4628      	mov	r0, r5
 800ad94:	d107      	bne.n	800ada6 <_dtoa_r+0xb1e>
 800ad96:	f000 fc67 	bl	800b668 <__multadd>
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	9b02      	ldr	r3, [sp, #8]
 800ada0:	3301      	adds	r3, #1
 800ada2:	9302      	str	r3, [sp, #8]
 800ada4:	e777      	b.n	800ac96 <_dtoa_r+0xa0e>
 800ada6:	f000 fc5f 	bl	800b668 <__multadd>
 800adaa:	4631      	mov	r1, r6
 800adac:	4680      	mov	r8, r0
 800adae:	2300      	movs	r3, #0
 800adb0:	220a      	movs	r2, #10
 800adb2:	4628      	mov	r0, r5
 800adb4:	f000 fc58 	bl	800b668 <__multadd>
 800adb8:	4606      	mov	r6, r0
 800adba:	e7f0      	b.n	800ad9e <_dtoa_r+0xb16>
 800adbc:	f1bb 0f00 	cmp.w	fp, #0
 800adc0:	bfcc      	ite	gt
 800adc2:	465f      	movgt	r7, fp
 800adc4:	2701      	movle	r7, #1
 800adc6:	f04f 0800 	mov.w	r8, #0
 800adca:	9a08      	ldr	r2, [sp, #32]
 800adcc:	4417      	add	r7, r2
 800adce:	4651      	mov	r1, sl
 800add0:	2201      	movs	r2, #1
 800add2:	4628      	mov	r0, r5
 800add4:	9302      	str	r3, [sp, #8]
 800add6:	f000 fe3d 	bl	800ba54 <__lshift>
 800adda:	4621      	mov	r1, r4
 800addc:	4682      	mov	sl, r0
 800adde:	f000 fea5 	bl	800bb2c <__mcmp>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	dcb2      	bgt.n	800ad4c <_dtoa_r+0xac4>
 800ade6:	d102      	bne.n	800adee <_dtoa_r+0xb66>
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	07db      	lsls	r3, r3, #31
 800adec:	d4ae      	bmi.n	800ad4c <_dtoa_r+0xac4>
 800adee:	463b      	mov	r3, r7
 800adf0:	461f      	mov	r7, r3
 800adf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adf6:	2a30      	cmp	r2, #48	; 0x30
 800adf8:	d0fa      	beq.n	800adf0 <_dtoa_r+0xb68>
 800adfa:	e6fb      	b.n	800abf4 <_dtoa_r+0x96c>
 800adfc:	9a08      	ldr	r2, [sp, #32]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d1a5      	bne.n	800ad4e <_dtoa_r+0xac6>
 800ae02:	2331      	movs	r3, #49	; 0x31
 800ae04:	f109 0901 	add.w	r9, r9, #1
 800ae08:	7013      	strb	r3, [r2, #0]
 800ae0a:	e6f3      	b.n	800abf4 <_dtoa_r+0x96c>
 800ae0c:	4b13      	ldr	r3, [pc, #76]	; (800ae5c <_dtoa_r+0xbd4>)
 800ae0e:	f7ff baa7 	b.w	800a360 <_dtoa_r+0xd8>
 800ae12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f47f aa80 	bne.w	800a31a <_dtoa_r+0x92>
 800ae1a:	4b11      	ldr	r3, [pc, #68]	; (800ae60 <_dtoa_r+0xbd8>)
 800ae1c:	f7ff baa0 	b.w	800a360 <_dtoa_r+0xd8>
 800ae20:	f1bb 0f00 	cmp.w	fp, #0
 800ae24:	dc03      	bgt.n	800ae2e <_dtoa_r+0xba6>
 800ae26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	f73f aecc 	bgt.w	800abc6 <_dtoa_r+0x93e>
 800ae2e:	9f08      	ldr	r7, [sp, #32]
 800ae30:	4621      	mov	r1, r4
 800ae32:	4650      	mov	r0, sl
 800ae34:	f7ff f99a 	bl	800a16c <quorem>
 800ae38:	9a08      	ldr	r2, [sp, #32]
 800ae3a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae3e:	f807 3b01 	strb.w	r3, [r7], #1
 800ae42:	1aba      	subs	r2, r7, r2
 800ae44:	4593      	cmp	fp, r2
 800ae46:	ddb9      	ble.n	800adbc <_dtoa_r+0xb34>
 800ae48:	4651      	mov	r1, sl
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	220a      	movs	r2, #10
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 fc0a 	bl	800b668 <__multadd>
 800ae54:	4682      	mov	sl, r0
 800ae56:	e7eb      	b.n	800ae30 <_dtoa_r+0xba8>
 800ae58:	0800d55c 	.word	0x0800d55c
 800ae5c:	0800d358 	.word	0x0800d358
 800ae60:	0800d4d9 	.word	0x0800d4d9

0800ae64 <rshift>:
 800ae64:	6903      	ldr	r3, [r0, #16]
 800ae66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae6e:	f100 0414 	add.w	r4, r0, #20
 800ae72:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae76:	dd46      	ble.n	800af06 <rshift+0xa2>
 800ae78:	f011 011f 	ands.w	r1, r1, #31
 800ae7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae84:	d10c      	bne.n	800aea0 <rshift+0x3c>
 800ae86:	4629      	mov	r1, r5
 800ae88:	f100 0710 	add.w	r7, r0, #16
 800ae8c:	42b1      	cmp	r1, r6
 800ae8e:	d335      	bcc.n	800aefc <rshift+0x98>
 800ae90:	1a9b      	subs	r3, r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	1eea      	subs	r2, r5, #3
 800ae96:	4296      	cmp	r6, r2
 800ae98:	bf38      	it	cc
 800ae9a:	2300      	movcc	r3, #0
 800ae9c:	4423      	add	r3, r4
 800ae9e:	e015      	b.n	800aecc <rshift+0x68>
 800aea0:	46a1      	mov	r9, r4
 800aea2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aea6:	f1c1 0820 	rsb	r8, r1, #32
 800aeaa:	40cf      	lsrs	r7, r1
 800aeac:	f105 0e04 	add.w	lr, r5, #4
 800aeb0:	4576      	cmp	r6, lr
 800aeb2:	46f4      	mov	ip, lr
 800aeb4:	d816      	bhi.n	800aee4 <rshift+0x80>
 800aeb6:	1a9b      	subs	r3, r3, r2
 800aeb8:	009a      	lsls	r2, r3, #2
 800aeba:	3a04      	subs	r2, #4
 800aebc:	3501      	adds	r5, #1
 800aebe:	42ae      	cmp	r6, r5
 800aec0:	bf38      	it	cc
 800aec2:	2200      	movcc	r2, #0
 800aec4:	18a3      	adds	r3, r4, r2
 800aec6:	50a7      	str	r7, [r4, r2]
 800aec8:	b107      	cbz	r7, 800aecc <rshift+0x68>
 800aeca:	3304      	adds	r3, #4
 800aecc:	42a3      	cmp	r3, r4
 800aece:	eba3 0204 	sub.w	r2, r3, r4
 800aed2:	bf08      	it	eq
 800aed4:	2300      	moveq	r3, #0
 800aed6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aeda:	6102      	str	r2, [r0, #16]
 800aedc:	bf08      	it	eq
 800aede:	6143      	streq	r3, [r0, #20]
 800aee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aee4:	f8dc c000 	ldr.w	ip, [ip]
 800aee8:	fa0c fc08 	lsl.w	ip, ip, r8
 800aeec:	ea4c 0707 	orr.w	r7, ip, r7
 800aef0:	f849 7b04 	str.w	r7, [r9], #4
 800aef4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aef8:	40cf      	lsrs	r7, r1
 800aefa:	e7d9      	b.n	800aeb0 <rshift+0x4c>
 800aefc:	f851 cb04 	ldr.w	ip, [r1], #4
 800af00:	f847 cf04 	str.w	ip, [r7, #4]!
 800af04:	e7c2      	b.n	800ae8c <rshift+0x28>
 800af06:	4623      	mov	r3, r4
 800af08:	e7e0      	b.n	800aecc <rshift+0x68>

0800af0a <__hexdig_fun>:
 800af0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af0e:	2b09      	cmp	r3, #9
 800af10:	d802      	bhi.n	800af18 <__hexdig_fun+0xe>
 800af12:	3820      	subs	r0, #32
 800af14:	b2c0      	uxtb	r0, r0
 800af16:	4770      	bx	lr
 800af18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af1c:	2b05      	cmp	r3, #5
 800af1e:	d801      	bhi.n	800af24 <__hexdig_fun+0x1a>
 800af20:	3847      	subs	r0, #71	; 0x47
 800af22:	e7f7      	b.n	800af14 <__hexdig_fun+0xa>
 800af24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af28:	2b05      	cmp	r3, #5
 800af2a:	d801      	bhi.n	800af30 <__hexdig_fun+0x26>
 800af2c:	3827      	subs	r0, #39	; 0x27
 800af2e:	e7f1      	b.n	800af14 <__hexdig_fun+0xa>
 800af30:	2000      	movs	r0, #0
 800af32:	4770      	bx	lr

0800af34 <__gethex>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	b08b      	sub	sp, #44	; 0x2c
 800af3a:	9306      	str	r3, [sp, #24]
 800af3c:	4bb9      	ldr	r3, [pc, #740]	; (800b224 <__gethex+0x2f0>)
 800af3e:	9002      	str	r0, [sp, #8]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	468b      	mov	fp, r1
 800af44:	4618      	mov	r0, r3
 800af46:	4690      	mov	r8, r2
 800af48:	9303      	str	r3, [sp, #12]
 800af4a:	f7f5 f919 	bl	8000180 <strlen>
 800af4e:	4682      	mov	sl, r0
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	f8db 2000 	ldr.w	r2, [fp]
 800af56:	4403      	add	r3, r0
 800af58:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af5c:	9307      	str	r3, [sp, #28]
 800af5e:	1c93      	adds	r3, r2, #2
 800af60:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af64:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af68:	32fe      	adds	r2, #254	; 0xfe
 800af6a:	18d1      	adds	r1, r2, r3
 800af6c:	461f      	mov	r7, r3
 800af6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af72:	9101      	str	r1, [sp, #4]
 800af74:	2830      	cmp	r0, #48	; 0x30
 800af76:	d0f8      	beq.n	800af6a <__gethex+0x36>
 800af78:	f7ff ffc7 	bl	800af0a <__hexdig_fun>
 800af7c:	4604      	mov	r4, r0
 800af7e:	2800      	cmp	r0, #0
 800af80:	d13a      	bne.n	800aff8 <__gethex+0xc4>
 800af82:	4652      	mov	r2, sl
 800af84:	4638      	mov	r0, r7
 800af86:	9903      	ldr	r1, [sp, #12]
 800af88:	f001 f9ea 	bl	800c360 <strncmp>
 800af8c:	4605      	mov	r5, r0
 800af8e:	2800      	cmp	r0, #0
 800af90:	d166      	bne.n	800b060 <__gethex+0x12c>
 800af92:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af96:	eb07 060a 	add.w	r6, r7, sl
 800af9a:	f7ff ffb6 	bl	800af0a <__hexdig_fun>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d060      	beq.n	800b064 <__gethex+0x130>
 800afa2:	4633      	mov	r3, r6
 800afa4:	7818      	ldrb	r0, [r3, #0]
 800afa6:	461f      	mov	r7, r3
 800afa8:	2830      	cmp	r0, #48	; 0x30
 800afaa:	f103 0301 	add.w	r3, r3, #1
 800afae:	d0f9      	beq.n	800afa4 <__gethex+0x70>
 800afb0:	f7ff ffab 	bl	800af0a <__hexdig_fun>
 800afb4:	2301      	movs	r3, #1
 800afb6:	fab0 f480 	clz	r4, r0
 800afba:	4635      	mov	r5, r6
 800afbc:	0964      	lsrs	r4, r4, #5
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	463a      	mov	r2, r7
 800afc2:	4616      	mov	r6, r2
 800afc4:	7830      	ldrb	r0, [r6, #0]
 800afc6:	3201      	adds	r2, #1
 800afc8:	f7ff ff9f 	bl	800af0a <__hexdig_fun>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d1f8      	bne.n	800afc2 <__gethex+0x8e>
 800afd0:	4652      	mov	r2, sl
 800afd2:	4630      	mov	r0, r6
 800afd4:	9903      	ldr	r1, [sp, #12]
 800afd6:	f001 f9c3 	bl	800c360 <strncmp>
 800afda:	b980      	cbnz	r0, 800affe <__gethex+0xca>
 800afdc:	b94d      	cbnz	r5, 800aff2 <__gethex+0xbe>
 800afde:	eb06 050a 	add.w	r5, r6, sl
 800afe2:	462a      	mov	r2, r5
 800afe4:	4616      	mov	r6, r2
 800afe6:	7830      	ldrb	r0, [r6, #0]
 800afe8:	3201      	adds	r2, #1
 800afea:	f7ff ff8e 	bl	800af0a <__hexdig_fun>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d1f8      	bne.n	800afe4 <__gethex+0xb0>
 800aff2:	1bad      	subs	r5, r5, r6
 800aff4:	00ad      	lsls	r5, r5, #2
 800aff6:	e004      	b.n	800b002 <__gethex+0xce>
 800aff8:	2400      	movs	r4, #0
 800affa:	4625      	mov	r5, r4
 800affc:	e7e0      	b.n	800afc0 <__gethex+0x8c>
 800affe:	2d00      	cmp	r5, #0
 800b000:	d1f7      	bne.n	800aff2 <__gethex+0xbe>
 800b002:	7833      	ldrb	r3, [r6, #0]
 800b004:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b008:	2b50      	cmp	r3, #80	; 0x50
 800b00a:	d139      	bne.n	800b080 <__gethex+0x14c>
 800b00c:	7873      	ldrb	r3, [r6, #1]
 800b00e:	2b2b      	cmp	r3, #43	; 0x2b
 800b010:	d02a      	beq.n	800b068 <__gethex+0x134>
 800b012:	2b2d      	cmp	r3, #45	; 0x2d
 800b014:	d02c      	beq.n	800b070 <__gethex+0x13c>
 800b016:	f04f 0900 	mov.w	r9, #0
 800b01a:	1c71      	adds	r1, r6, #1
 800b01c:	7808      	ldrb	r0, [r1, #0]
 800b01e:	f7ff ff74 	bl	800af0a <__hexdig_fun>
 800b022:	1e43      	subs	r3, r0, #1
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b18      	cmp	r3, #24
 800b028:	d82a      	bhi.n	800b080 <__gethex+0x14c>
 800b02a:	f1a0 0210 	sub.w	r2, r0, #16
 800b02e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b032:	f7ff ff6a 	bl	800af0a <__hexdig_fun>
 800b036:	1e43      	subs	r3, r0, #1
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b18      	cmp	r3, #24
 800b03c:	d91b      	bls.n	800b076 <__gethex+0x142>
 800b03e:	f1b9 0f00 	cmp.w	r9, #0
 800b042:	d000      	beq.n	800b046 <__gethex+0x112>
 800b044:	4252      	negs	r2, r2
 800b046:	4415      	add	r5, r2
 800b048:	f8cb 1000 	str.w	r1, [fp]
 800b04c:	b1d4      	cbz	r4, 800b084 <__gethex+0x150>
 800b04e:	9b01      	ldr	r3, [sp, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	bf14      	ite	ne
 800b054:	2700      	movne	r7, #0
 800b056:	2706      	moveq	r7, #6
 800b058:	4638      	mov	r0, r7
 800b05a:	b00b      	add	sp, #44	; 0x2c
 800b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b060:	463e      	mov	r6, r7
 800b062:	4625      	mov	r5, r4
 800b064:	2401      	movs	r4, #1
 800b066:	e7cc      	b.n	800b002 <__gethex+0xce>
 800b068:	f04f 0900 	mov.w	r9, #0
 800b06c:	1cb1      	adds	r1, r6, #2
 800b06e:	e7d5      	b.n	800b01c <__gethex+0xe8>
 800b070:	f04f 0901 	mov.w	r9, #1
 800b074:	e7fa      	b.n	800b06c <__gethex+0x138>
 800b076:	230a      	movs	r3, #10
 800b078:	fb03 0202 	mla	r2, r3, r2, r0
 800b07c:	3a10      	subs	r2, #16
 800b07e:	e7d6      	b.n	800b02e <__gethex+0xfa>
 800b080:	4631      	mov	r1, r6
 800b082:	e7e1      	b.n	800b048 <__gethex+0x114>
 800b084:	4621      	mov	r1, r4
 800b086:	1bf3      	subs	r3, r6, r7
 800b088:	3b01      	subs	r3, #1
 800b08a:	2b07      	cmp	r3, #7
 800b08c:	dc0a      	bgt.n	800b0a4 <__gethex+0x170>
 800b08e:	9802      	ldr	r0, [sp, #8]
 800b090:	f000 fa88 	bl	800b5a4 <_Balloc>
 800b094:	4604      	mov	r4, r0
 800b096:	b940      	cbnz	r0, 800b0aa <__gethex+0x176>
 800b098:	4602      	mov	r2, r0
 800b09a:	21de      	movs	r1, #222	; 0xde
 800b09c:	4b62      	ldr	r3, [pc, #392]	; (800b228 <__gethex+0x2f4>)
 800b09e:	4863      	ldr	r0, [pc, #396]	; (800b22c <__gethex+0x2f8>)
 800b0a0:	f001 f97e 	bl	800c3a0 <__assert_func>
 800b0a4:	3101      	adds	r1, #1
 800b0a6:	105b      	asrs	r3, r3, #1
 800b0a8:	e7ef      	b.n	800b08a <__gethex+0x156>
 800b0aa:	f04f 0b00 	mov.w	fp, #0
 800b0ae:	f100 0914 	add.w	r9, r0, #20
 800b0b2:	f1ca 0301 	rsb	r3, sl, #1
 800b0b6:	f8cd 9010 	str.w	r9, [sp, #16]
 800b0ba:	f8cd b004 	str.w	fp, [sp, #4]
 800b0be:	9308      	str	r3, [sp, #32]
 800b0c0:	42b7      	cmp	r7, r6
 800b0c2:	d33f      	bcc.n	800b144 <__gethex+0x210>
 800b0c4:	9f04      	ldr	r7, [sp, #16]
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	f847 3b04 	str.w	r3, [r7], #4
 800b0cc:	eba7 0709 	sub.w	r7, r7, r9
 800b0d0:	10bf      	asrs	r7, r7, #2
 800b0d2:	6127      	str	r7, [r4, #16]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 fb5b 	bl	800b790 <__hi0bits>
 800b0da:	017f      	lsls	r7, r7, #5
 800b0dc:	f8d8 6000 	ldr.w	r6, [r8]
 800b0e0:	1a3f      	subs	r7, r7, r0
 800b0e2:	42b7      	cmp	r7, r6
 800b0e4:	dd62      	ble.n	800b1ac <__gethex+0x278>
 800b0e6:	1bbf      	subs	r7, r7, r6
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fef1 	bl	800bed2 <__any_on>
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	b1a8      	cbz	r0, 800b120 <__gethex+0x1ec>
 800b0f4:	f04f 0a01 	mov.w	sl, #1
 800b0f8:	1e7b      	subs	r3, r7, #1
 800b0fa:	1159      	asrs	r1, r3, #5
 800b0fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b100:	f003 021f 	and.w	r2, r3, #31
 800b104:	fa0a f202 	lsl.w	r2, sl, r2
 800b108:	420a      	tst	r2, r1
 800b10a:	d009      	beq.n	800b120 <__gethex+0x1ec>
 800b10c:	4553      	cmp	r3, sl
 800b10e:	dd05      	ble.n	800b11c <__gethex+0x1e8>
 800b110:	4620      	mov	r0, r4
 800b112:	1eb9      	subs	r1, r7, #2
 800b114:	f000 fedd 	bl	800bed2 <__any_on>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d144      	bne.n	800b1a6 <__gethex+0x272>
 800b11c:	f04f 0a02 	mov.w	sl, #2
 800b120:	4639      	mov	r1, r7
 800b122:	4620      	mov	r0, r4
 800b124:	f7ff fe9e 	bl	800ae64 <rshift>
 800b128:	443d      	add	r5, r7
 800b12a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b12e:	42ab      	cmp	r3, r5
 800b130:	da4a      	bge.n	800b1c8 <__gethex+0x294>
 800b132:	4621      	mov	r1, r4
 800b134:	9802      	ldr	r0, [sp, #8]
 800b136:	f000 fa75 	bl	800b624 <_Bfree>
 800b13a:	2300      	movs	r3, #0
 800b13c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b13e:	27a3      	movs	r7, #163	; 0xa3
 800b140:	6013      	str	r3, [r2, #0]
 800b142:	e789      	b.n	800b058 <__gethex+0x124>
 800b144:	1e73      	subs	r3, r6, #1
 800b146:	9a07      	ldr	r2, [sp, #28]
 800b148:	9305      	str	r3, [sp, #20]
 800b14a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b14e:	4293      	cmp	r3, r2
 800b150:	d019      	beq.n	800b186 <__gethex+0x252>
 800b152:	f1bb 0f20 	cmp.w	fp, #32
 800b156:	d107      	bne.n	800b168 <__gethex+0x234>
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	9a01      	ldr	r2, [sp, #4]
 800b15c:	f843 2b04 	str.w	r2, [r3], #4
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	2300      	movs	r3, #0
 800b164:	469b      	mov	fp, r3
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b16c:	f7ff fecd 	bl	800af0a <__hexdig_fun>
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	f000 000f 	and.w	r0, r0, #15
 800b176:	fa00 f00b 	lsl.w	r0, r0, fp
 800b17a:	4303      	orrs	r3, r0
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	f10b 0b04 	add.w	fp, fp, #4
 800b182:	9b05      	ldr	r3, [sp, #20]
 800b184:	e00d      	b.n	800b1a2 <__gethex+0x26e>
 800b186:	9b05      	ldr	r3, [sp, #20]
 800b188:	9a08      	ldr	r2, [sp, #32]
 800b18a:	4413      	add	r3, r2
 800b18c:	42bb      	cmp	r3, r7
 800b18e:	d3e0      	bcc.n	800b152 <__gethex+0x21e>
 800b190:	4618      	mov	r0, r3
 800b192:	4652      	mov	r2, sl
 800b194:	9903      	ldr	r1, [sp, #12]
 800b196:	9309      	str	r3, [sp, #36]	; 0x24
 800b198:	f001 f8e2 	bl	800c360 <strncmp>
 800b19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d1d7      	bne.n	800b152 <__gethex+0x21e>
 800b1a2:	461e      	mov	r6, r3
 800b1a4:	e78c      	b.n	800b0c0 <__gethex+0x18c>
 800b1a6:	f04f 0a03 	mov.w	sl, #3
 800b1aa:	e7b9      	b.n	800b120 <__gethex+0x1ec>
 800b1ac:	da09      	bge.n	800b1c2 <__gethex+0x28e>
 800b1ae:	1bf7      	subs	r7, r6, r7
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	463a      	mov	r2, r7
 800b1b4:	9802      	ldr	r0, [sp, #8]
 800b1b6:	f000 fc4d 	bl	800ba54 <__lshift>
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	1bed      	subs	r5, r5, r7
 800b1be:	f100 0914 	add.w	r9, r0, #20
 800b1c2:	f04f 0a00 	mov.w	sl, #0
 800b1c6:	e7b0      	b.n	800b12a <__gethex+0x1f6>
 800b1c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1cc:	42a8      	cmp	r0, r5
 800b1ce:	dd71      	ble.n	800b2b4 <__gethex+0x380>
 800b1d0:	1b45      	subs	r5, r0, r5
 800b1d2:	42ae      	cmp	r6, r5
 800b1d4:	dc34      	bgt.n	800b240 <__gethex+0x30c>
 800b1d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d028      	beq.n	800b230 <__gethex+0x2fc>
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d02a      	beq.n	800b238 <__gethex+0x304>
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d115      	bne.n	800b212 <__gethex+0x2de>
 800b1e6:	42ae      	cmp	r6, r5
 800b1e8:	d113      	bne.n	800b212 <__gethex+0x2de>
 800b1ea:	2e01      	cmp	r6, #1
 800b1ec:	d10b      	bne.n	800b206 <__gethex+0x2d2>
 800b1ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1f2:	9a06      	ldr	r2, [sp, #24]
 800b1f4:	2762      	movs	r7, #98	; 0x62
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	6123      	str	r3, [r4, #16]
 800b1fc:	f8c9 3000 	str.w	r3, [r9]
 800b200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b202:	601c      	str	r4, [r3, #0]
 800b204:	e728      	b.n	800b058 <__gethex+0x124>
 800b206:	4620      	mov	r0, r4
 800b208:	1e71      	subs	r1, r6, #1
 800b20a:	f000 fe62 	bl	800bed2 <__any_on>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d1ed      	bne.n	800b1ee <__gethex+0x2ba>
 800b212:	4621      	mov	r1, r4
 800b214:	9802      	ldr	r0, [sp, #8]
 800b216:	f000 fa05 	bl	800b624 <_Bfree>
 800b21a:	2300      	movs	r3, #0
 800b21c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b21e:	2750      	movs	r7, #80	; 0x50
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	e719      	b.n	800b058 <__gethex+0x124>
 800b224:	0800d5d8 	.word	0x0800d5d8
 800b228:	0800d55c 	.word	0x0800d55c
 800b22c:	0800d56d 	.word	0x0800d56d
 800b230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1ed      	bne.n	800b212 <__gethex+0x2de>
 800b236:	e7da      	b.n	800b1ee <__gethex+0x2ba>
 800b238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1d7      	bne.n	800b1ee <__gethex+0x2ba>
 800b23e:	e7e8      	b.n	800b212 <__gethex+0x2de>
 800b240:	1e6f      	subs	r7, r5, #1
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	d132      	bne.n	800b2ae <__gethex+0x37a>
 800b248:	b127      	cbz	r7, 800b254 <__gethex+0x320>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4620      	mov	r0, r4
 800b24e:	f000 fe40 	bl	800bed2 <__any_on>
 800b252:	4682      	mov	sl, r0
 800b254:	2101      	movs	r1, #1
 800b256:	117b      	asrs	r3, r7, #5
 800b258:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b25c:	f007 071f 	and.w	r7, r7, #31
 800b260:	fa01 f707 	lsl.w	r7, r1, r7
 800b264:	421f      	tst	r7, r3
 800b266:	f04f 0702 	mov.w	r7, #2
 800b26a:	4629      	mov	r1, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	bf18      	it	ne
 800b270:	f04a 0a02 	orrne.w	sl, sl, #2
 800b274:	1b76      	subs	r6, r6, r5
 800b276:	f7ff fdf5 	bl	800ae64 <rshift>
 800b27a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b27e:	f1ba 0f00 	cmp.w	sl, #0
 800b282:	d048      	beq.n	800b316 <__gethex+0x3e2>
 800b284:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d015      	beq.n	800b2b8 <__gethex+0x384>
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d017      	beq.n	800b2c0 <__gethex+0x38c>
 800b290:	2b01      	cmp	r3, #1
 800b292:	d109      	bne.n	800b2a8 <__gethex+0x374>
 800b294:	f01a 0f02 	tst.w	sl, #2
 800b298:	d006      	beq.n	800b2a8 <__gethex+0x374>
 800b29a:	f8d9 0000 	ldr.w	r0, [r9]
 800b29e:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2a2:	f01a 0f01 	tst.w	sl, #1
 800b2a6:	d10e      	bne.n	800b2c6 <__gethex+0x392>
 800b2a8:	f047 0710 	orr.w	r7, r7, #16
 800b2ac:	e033      	b.n	800b316 <__gethex+0x3e2>
 800b2ae:	f04f 0a01 	mov.w	sl, #1
 800b2b2:	e7cf      	b.n	800b254 <__gethex+0x320>
 800b2b4:	2701      	movs	r7, #1
 800b2b6:	e7e2      	b.n	800b27e <__gethex+0x34a>
 800b2b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2ba:	f1c3 0301 	rsb	r3, r3, #1
 800b2be:	9315      	str	r3, [sp, #84]	; 0x54
 800b2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0f0      	beq.n	800b2a8 <__gethex+0x374>
 800b2c6:	f04f 0c00 	mov.w	ip, #0
 800b2ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2ce:	f104 0314 	add.w	r3, r4, #20
 800b2d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2e4:	d01c      	beq.n	800b320 <__gethex+0x3ec>
 800b2e6:	3201      	adds	r2, #1
 800b2e8:	6002      	str	r2, [r0, #0]
 800b2ea:	2f02      	cmp	r7, #2
 800b2ec:	f104 0314 	add.w	r3, r4, #20
 800b2f0:	d13d      	bne.n	800b36e <__gethex+0x43a>
 800b2f2:	f8d8 2000 	ldr.w	r2, [r8]
 800b2f6:	3a01      	subs	r2, #1
 800b2f8:	42b2      	cmp	r2, r6
 800b2fa:	d10a      	bne.n	800b312 <__gethex+0x3de>
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	1171      	asrs	r1, r6, #5
 800b300:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b304:	f006 061f 	and.w	r6, r6, #31
 800b308:	fa02 f606 	lsl.w	r6, r2, r6
 800b30c:	421e      	tst	r6, r3
 800b30e:	bf18      	it	ne
 800b310:	4617      	movne	r7, r2
 800b312:	f047 0720 	orr.w	r7, r7, #32
 800b316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b318:	601c      	str	r4, [r3, #0]
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	601d      	str	r5, [r3, #0]
 800b31e:	e69b      	b.n	800b058 <__gethex+0x124>
 800b320:	4299      	cmp	r1, r3
 800b322:	f843 cc04 	str.w	ip, [r3, #-4]
 800b326:	d8d8      	bhi.n	800b2da <__gethex+0x3a6>
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	459b      	cmp	fp, r3
 800b32c:	db17      	blt.n	800b35e <__gethex+0x42a>
 800b32e:	6861      	ldr	r1, [r4, #4]
 800b330:	9802      	ldr	r0, [sp, #8]
 800b332:	3101      	adds	r1, #1
 800b334:	f000 f936 	bl	800b5a4 <_Balloc>
 800b338:	4681      	mov	r9, r0
 800b33a:	b918      	cbnz	r0, 800b344 <__gethex+0x410>
 800b33c:	4602      	mov	r2, r0
 800b33e:	2184      	movs	r1, #132	; 0x84
 800b340:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <__gethex+0x474>)
 800b342:	e6ac      	b.n	800b09e <__gethex+0x16a>
 800b344:	6922      	ldr	r2, [r4, #16]
 800b346:	f104 010c 	add.w	r1, r4, #12
 800b34a:	3202      	adds	r2, #2
 800b34c:	0092      	lsls	r2, r2, #2
 800b34e:	300c      	adds	r0, #12
 800b350:	f000 f91a 	bl	800b588 <memcpy>
 800b354:	4621      	mov	r1, r4
 800b356:	9802      	ldr	r0, [sp, #8]
 800b358:	f000 f964 	bl	800b624 <_Bfree>
 800b35c:	464c      	mov	r4, r9
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	6122      	str	r2, [r4, #16]
 800b364:	2201      	movs	r2, #1
 800b366:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b36a:	615a      	str	r2, [r3, #20]
 800b36c:	e7bd      	b.n	800b2ea <__gethex+0x3b6>
 800b36e:	6922      	ldr	r2, [r4, #16]
 800b370:	455a      	cmp	r2, fp
 800b372:	dd0b      	ble.n	800b38c <__gethex+0x458>
 800b374:	2101      	movs	r1, #1
 800b376:	4620      	mov	r0, r4
 800b378:	f7ff fd74 	bl	800ae64 <rshift>
 800b37c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b380:	3501      	adds	r5, #1
 800b382:	42ab      	cmp	r3, r5
 800b384:	f6ff aed5 	blt.w	800b132 <__gethex+0x1fe>
 800b388:	2701      	movs	r7, #1
 800b38a:	e7c2      	b.n	800b312 <__gethex+0x3de>
 800b38c:	f016 061f 	ands.w	r6, r6, #31
 800b390:	d0fa      	beq.n	800b388 <__gethex+0x454>
 800b392:	449a      	add	sl, r3
 800b394:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b398:	f000 f9fa 	bl	800b790 <__hi0bits>
 800b39c:	f1c6 0620 	rsb	r6, r6, #32
 800b3a0:	42b0      	cmp	r0, r6
 800b3a2:	dbe7      	blt.n	800b374 <__gethex+0x440>
 800b3a4:	e7f0      	b.n	800b388 <__gethex+0x454>
 800b3a6:	bf00      	nop
 800b3a8:	0800d55c 	.word	0x0800d55c

0800b3ac <L_shift>:
 800b3ac:	f1c2 0208 	rsb	r2, r2, #8
 800b3b0:	0092      	lsls	r2, r2, #2
 800b3b2:	b570      	push	{r4, r5, r6, lr}
 800b3b4:	f1c2 0620 	rsb	r6, r2, #32
 800b3b8:	6843      	ldr	r3, [r0, #4]
 800b3ba:	6804      	ldr	r4, [r0, #0]
 800b3bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b3c0:	432c      	orrs	r4, r5
 800b3c2:	40d3      	lsrs	r3, r2
 800b3c4:	6004      	str	r4, [r0, #0]
 800b3c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ca:	4288      	cmp	r0, r1
 800b3cc:	d3f4      	bcc.n	800b3b8 <L_shift+0xc>
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}

0800b3d0 <__match>:
 800b3d0:	b530      	push	{r4, r5, lr}
 800b3d2:	6803      	ldr	r3, [r0, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3da:	b914      	cbnz	r4, 800b3e2 <__match+0x12>
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	2001      	movs	r0, #1
 800b3e0:	bd30      	pop	{r4, r5, pc}
 800b3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3ea:	2d19      	cmp	r5, #25
 800b3ec:	bf98      	it	ls
 800b3ee:	3220      	addls	r2, #32
 800b3f0:	42a2      	cmp	r2, r4
 800b3f2:	d0f0      	beq.n	800b3d6 <__match+0x6>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e7f3      	b.n	800b3e0 <__match+0x10>

0800b3f8 <__hexnan>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	2500      	movs	r5, #0
 800b3fe:	680b      	ldr	r3, [r1, #0]
 800b400:	4682      	mov	sl, r0
 800b402:	115e      	asrs	r6, r3, #5
 800b404:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b408:	f013 031f 	ands.w	r3, r3, #31
 800b40c:	bf18      	it	ne
 800b40e:	3604      	addne	r6, #4
 800b410:	1f37      	subs	r7, r6, #4
 800b412:	4690      	mov	r8, r2
 800b414:	46b9      	mov	r9, r7
 800b416:	463c      	mov	r4, r7
 800b418:	46ab      	mov	fp, r5
 800b41a:	b087      	sub	sp, #28
 800b41c:	6801      	ldr	r1, [r0, #0]
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	f846 5c04 	str.w	r5, [r6, #-4]
 800b424:	9502      	str	r5, [sp, #8]
 800b426:	784a      	ldrb	r2, [r1, #1]
 800b428:	1c4b      	adds	r3, r1, #1
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	b342      	cbz	r2, 800b480 <__hexnan+0x88>
 800b42e:	4610      	mov	r0, r2
 800b430:	9105      	str	r1, [sp, #20]
 800b432:	9204      	str	r2, [sp, #16]
 800b434:	f7ff fd69 	bl	800af0a <__hexdig_fun>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d14f      	bne.n	800b4dc <__hexnan+0xe4>
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	9905      	ldr	r1, [sp, #20]
 800b440:	2a20      	cmp	r2, #32
 800b442:	d818      	bhi.n	800b476 <__hexnan+0x7e>
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	459b      	cmp	fp, r3
 800b448:	dd13      	ble.n	800b472 <__hexnan+0x7a>
 800b44a:	454c      	cmp	r4, r9
 800b44c:	d206      	bcs.n	800b45c <__hexnan+0x64>
 800b44e:	2d07      	cmp	r5, #7
 800b450:	dc04      	bgt.n	800b45c <__hexnan+0x64>
 800b452:	462a      	mov	r2, r5
 800b454:	4649      	mov	r1, r9
 800b456:	4620      	mov	r0, r4
 800b458:	f7ff ffa8 	bl	800b3ac <L_shift>
 800b45c:	4544      	cmp	r4, r8
 800b45e:	d950      	bls.n	800b502 <__hexnan+0x10a>
 800b460:	2300      	movs	r3, #0
 800b462:	f1a4 0904 	sub.w	r9, r4, #4
 800b466:	f844 3c04 	str.w	r3, [r4, #-4]
 800b46a:	461d      	mov	r5, r3
 800b46c:	464c      	mov	r4, r9
 800b46e:	f8cd b008 	str.w	fp, [sp, #8]
 800b472:	9903      	ldr	r1, [sp, #12]
 800b474:	e7d7      	b.n	800b426 <__hexnan+0x2e>
 800b476:	2a29      	cmp	r2, #41	; 0x29
 800b478:	d156      	bne.n	800b528 <__hexnan+0x130>
 800b47a:	3102      	adds	r1, #2
 800b47c:	f8ca 1000 	str.w	r1, [sl]
 800b480:	f1bb 0f00 	cmp.w	fp, #0
 800b484:	d050      	beq.n	800b528 <__hexnan+0x130>
 800b486:	454c      	cmp	r4, r9
 800b488:	d206      	bcs.n	800b498 <__hexnan+0xa0>
 800b48a:	2d07      	cmp	r5, #7
 800b48c:	dc04      	bgt.n	800b498 <__hexnan+0xa0>
 800b48e:	462a      	mov	r2, r5
 800b490:	4649      	mov	r1, r9
 800b492:	4620      	mov	r0, r4
 800b494:	f7ff ff8a 	bl	800b3ac <L_shift>
 800b498:	4544      	cmp	r4, r8
 800b49a:	d934      	bls.n	800b506 <__hexnan+0x10e>
 800b49c:	4623      	mov	r3, r4
 800b49e:	f1a8 0204 	sub.w	r2, r8, #4
 800b4a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4a6:	429f      	cmp	r7, r3
 800b4a8:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ac:	d2f9      	bcs.n	800b4a2 <__hexnan+0xaa>
 800b4ae:	1b3b      	subs	r3, r7, r4
 800b4b0:	f023 0303 	bic.w	r3, r3, #3
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	3401      	adds	r4, #1
 800b4b8:	3e03      	subs	r6, #3
 800b4ba:	42b4      	cmp	r4, r6
 800b4bc:	bf88      	it	hi
 800b4be:	2304      	movhi	r3, #4
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4443      	add	r3, r8
 800b4c4:	f843 2b04 	str.w	r2, [r3], #4
 800b4c8:	429f      	cmp	r7, r3
 800b4ca:	d2fb      	bcs.n	800b4c4 <__hexnan+0xcc>
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	b91b      	cbnz	r3, 800b4d8 <__hexnan+0xe0>
 800b4d0:	4547      	cmp	r7, r8
 800b4d2:	d127      	bne.n	800b524 <__hexnan+0x12c>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	2005      	movs	r0, #5
 800b4da:	e026      	b.n	800b52a <__hexnan+0x132>
 800b4dc:	3501      	adds	r5, #1
 800b4de:	2d08      	cmp	r5, #8
 800b4e0:	f10b 0b01 	add.w	fp, fp, #1
 800b4e4:	dd06      	ble.n	800b4f4 <__hexnan+0xfc>
 800b4e6:	4544      	cmp	r4, r8
 800b4e8:	d9c3      	bls.n	800b472 <__hexnan+0x7a>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2501      	movs	r5, #1
 800b4ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4f2:	3c04      	subs	r4, #4
 800b4f4:	6822      	ldr	r2, [r4, #0]
 800b4f6:	f000 000f 	and.w	r0, r0, #15
 800b4fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4fe:	6022      	str	r2, [r4, #0]
 800b500:	e7b7      	b.n	800b472 <__hexnan+0x7a>
 800b502:	2508      	movs	r5, #8
 800b504:	e7b5      	b.n	800b472 <__hexnan+0x7a>
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0df      	beq.n	800b4cc <__hexnan+0xd4>
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
 800b510:	f1c3 0320 	rsb	r3, r3, #32
 800b514:	fa22 f303 	lsr.w	r3, r2, r3
 800b518:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b51c:	401a      	ands	r2, r3
 800b51e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b522:	e7d3      	b.n	800b4cc <__hexnan+0xd4>
 800b524:	3f04      	subs	r7, #4
 800b526:	e7d1      	b.n	800b4cc <__hexnan+0xd4>
 800b528:	2004      	movs	r0, #4
 800b52a:	b007      	add	sp, #28
 800b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b530 <_localeconv_r>:
 800b530:	4800      	ldr	r0, [pc, #0]	; (800b534 <_localeconv_r+0x4>)
 800b532:	4770      	bx	lr
 800b534:	20000164 	.word	0x20000164

0800b538 <malloc>:
 800b538:	4b02      	ldr	r3, [pc, #8]	; (800b544 <malloc+0xc>)
 800b53a:	4601      	mov	r1, r0
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	f000 bd43 	b.w	800bfc8 <_malloc_r>
 800b542:	bf00      	nop
 800b544:	2000000c 	.word	0x2000000c

0800b548 <__ascii_mbtowc>:
 800b548:	b082      	sub	sp, #8
 800b54a:	b901      	cbnz	r1, 800b54e <__ascii_mbtowc+0x6>
 800b54c:	a901      	add	r1, sp, #4
 800b54e:	b142      	cbz	r2, 800b562 <__ascii_mbtowc+0x1a>
 800b550:	b14b      	cbz	r3, 800b566 <__ascii_mbtowc+0x1e>
 800b552:	7813      	ldrb	r3, [r2, #0]
 800b554:	600b      	str	r3, [r1, #0]
 800b556:	7812      	ldrb	r2, [r2, #0]
 800b558:	1e10      	subs	r0, r2, #0
 800b55a:	bf18      	it	ne
 800b55c:	2001      	movne	r0, #1
 800b55e:	b002      	add	sp, #8
 800b560:	4770      	bx	lr
 800b562:	4610      	mov	r0, r2
 800b564:	e7fb      	b.n	800b55e <__ascii_mbtowc+0x16>
 800b566:	f06f 0001 	mvn.w	r0, #1
 800b56a:	e7f8      	b.n	800b55e <__ascii_mbtowc+0x16>

0800b56c <memchr>:
 800b56c:	4603      	mov	r3, r0
 800b56e:	b510      	push	{r4, lr}
 800b570:	b2c9      	uxtb	r1, r1
 800b572:	4402      	add	r2, r0
 800b574:	4293      	cmp	r3, r2
 800b576:	4618      	mov	r0, r3
 800b578:	d101      	bne.n	800b57e <memchr+0x12>
 800b57a:	2000      	movs	r0, #0
 800b57c:	e003      	b.n	800b586 <memchr+0x1a>
 800b57e:	7804      	ldrb	r4, [r0, #0]
 800b580:	3301      	adds	r3, #1
 800b582:	428c      	cmp	r4, r1
 800b584:	d1f6      	bne.n	800b574 <memchr+0x8>
 800b586:	bd10      	pop	{r4, pc}

0800b588 <memcpy>:
 800b588:	440a      	add	r2, r1
 800b58a:	4291      	cmp	r1, r2
 800b58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b590:	d100      	bne.n	800b594 <memcpy+0xc>
 800b592:	4770      	bx	lr
 800b594:	b510      	push	{r4, lr}
 800b596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b59a:	4291      	cmp	r1, r2
 800b59c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5a0:	d1f9      	bne.n	800b596 <memcpy+0xe>
 800b5a2:	bd10      	pop	{r4, pc}

0800b5a4 <_Balloc>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	b976      	cbnz	r6, 800b5cc <_Balloc+0x28>
 800b5ae:	2010      	movs	r0, #16
 800b5b0:	f7ff ffc2 	bl	800b538 <malloc>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	6260      	str	r0, [r4, #36]	; 0x24
 800b5b8:	b920      	cbnz	r0, 800b5c4 <_Balloc+0x20>
 800b5ba:	2166      	movs	r1, #102	; 0x66
 800b5bc:	4b17      	ldr	r3, [pc, #92]	; (800b61c <_Balloc+0x78>)
 800b5be:	4818      	ldr	r0, [pc, #96]	; (800b620 <_Balloc+0x7c>)
 800b5c0:	f000 feee 	bl	800c3a0 <__assert_func>
 800b5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5c8:	6006      	str	r6, [r0, #0]
 800b5ca:	60c6      	str	r6, [r0, #12]
 800b5cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5ce:	68f3      	ldr	r3, [r6, #12]
 800b5d0:	b183      	cbz	r3, 800b5f4 <_Balloc+0x50>
 800b5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5da:	b9b8      	cbnz	r0, 800b60c <_Balloc+0x68>
 800b5dc:	2101      	movs	r1, #1
 800b5de:	fa01 f605 	lsl.w	r6, r1, r5
 800b5e2:	1d72      	adds	r2, r6, #5
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	0092      	lsls	r2, r2, #2
 800b5e8:	f000 fc94 	bl	800bf14 <_calloc_r>
 800b5ec:	b160      	cbz	r0, 800b608 <_Balloc+0x64>
 800b5ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5f2:	e00e      	b.n	800b612 <_Balloc+0x6e>
 800b5f4:	2221      	movs	r2, #33	; 0x21
 800b5f6:	2104      	movs	r1, #4
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f000 fc8b 	bl	800bf14 <_calloc_r>
 800b5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b600:	60f0      	str	r0, [r6, #12]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e4      	bne.n	800b5d2 <_Balloc+0x2e>
 800b608:	2000      	movs	r0, #0
 800b60a:	bd70      	pop	{r4, r5, r6, pc}
 800b60c:	6802      	ldr	r2, [r0, #0]
 800b60e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b612:	2300      	movs	r3, #0
 800b614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b618:	e7f7      	b.n	800b60a <_Balloc+0x66>
 800b61a:	bf00      	nop
 800b61c:	0800d4e6 	.word	0x0800d4e6
 800b620:	0800d5ec 	.word	0x0800d5ec

0800b624 <_Bfree>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b628:	4605      	mov	r5, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	b976      	cbnz	r6, 800b64c <_Bfree+0x28>
 800b62e:	2010      	movs	r0, #16
 800b630:	f7ff ff82 	bl	800b538 <malloc>
 800b634:	4602      	mov	r2, r0
 800b636:	6268      	str	r0, [r5, #36]	; 0x24
 800b638:	b920      	cbnz	r0, 800b644 <_Bfree+0x20>
 800b63a:	218a      	movs	r1, #138	; 0x8a
 800b63c:	4b08      	ldr	r3, [pc, #32]	; (800b660 <_Bfree+0x3c>)
 800b63e:	4809      	ldr	r0, [pc, #36]	; (800b664 <_Bfree+0x40>)
 800b640:	f000 feae 	bl	800c3a0 <__assert_func>
 800b644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b648:	6006      	str	r6, [r0, #0]
 800b64a:	60c6      	str	r6, [r0, #12]
 800b64c:	b13c      	cbz	r4, 800b65e <_Bfree+0x3a>
 800b64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b650:	6862      	ldr	r2, [r4, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b658:	6021      	str	r1, [r4, #0]
 800b65a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	0800d4e6 	.word	0x0800d4e6
 800b664:	0800d5ec 	.word	0x0800d5ec

0800b668 <__multadd>:
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	4698      	mov	r8, r3
 800b66e:	460c      	mov	r4, r1
 800b670:	2300      	movs	r3, #0
 800b672:	690e      	ldr	r6, [r1, #16]
 800b674:	4607      	mov	r7, r0
 800b676:	f101 0014 	add.w	r0, r1, #20
 800b67a:	6805      	ldr	r5, [r0, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	b2a9      	uxth	r1, r5
 800b680:	fb02 8101 	mla	r1, r2, r1, r8
 800b684:	0c2d      	lsrs	r5, r5, #16
 800b686:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b68a:	fb02 c505 	mla	r5, r2, r5, ip
 800b68e:	b289      	uxth	r1, r1
 800b690:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b694:	429e      	cmp	r6, r3
 800b696:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b69a:	f840 1b04 	str.w	r1, [r0], #4
 800b69e:	dcec      	bgt.n	800b67a <__multadd+0x12>
 800b6a0:	f1b8 0f00 	cmp.w	r8, #0
 800b6a4:	d022      	beq.n	800b6ec <__multadd+0x84>
 800b6a6:	68a3      	ldr	r3, [r4, #8]
 800b6a8:	42b3      	cmp	r3, r6
 800b6aa:	dc19      	bgt.n	800b6e0 <__multadd+0x78>
 800b6ac:	6861      	ldr	r1, [r4, #4]
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	3101      	adds	r1, #1
 800b6b2:	f7ff ff77 	bl	800b5a4 <_Balloc>
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	b928      	cbnz	r0, 800b6c6 <__multadd+0x5e>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	21b5      	movs	r1, #181	; 0xb5
 800b6be:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <__multadd+0x8c>)
 800b6c0:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <__multadd+0x90>)
 800b6c2:	f000 fe6d 	bl	800c3a0 <__assert_func>
 800b6c6:	6922      	ldr	r2, [r4, #16]
 800b6c8:	f104 010c 	add.w	r1, r4, #12
 800b6cc:	3202      	adds	r2, #2
 800b6ce:	0092      	lsls	r2, r2, #2
 800b6d0:	300c      	adds	r0, #12
 800b6d2:	f7ff ff59 	bl	800b588 <memcpy>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7ff ffa3 	bl	800b624 <_Bfree>
 800b6de:	462c      	mov	r4, r5
 800b6e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b6e4:	3601      	adds	r6, #1
 800b6e6:	f8c3 8014 	str.w	r8, [r3, #20]
 800b6ea:	6126      	str	r6, [r4, #16]
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0800d55c 	.word	0x0800d55c
 800b6f8:	0800d5ec 	.word	0x0800d5ec

0800b6fc <__s2b>:
 800b6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b700:	4615      	mov	r5, r2
 800b702:	2209      	movs	r2, #9
 800b704:	461f      	mov	r7, r3
 800b706:	3308      	adds	r3, #8
 800b708:	460c      	mov	r4, r1
 800b70a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b70e:	4606      	mov	r6, r0
 800b710:	2201      	movs	r2, #1
 800b712:	2100      	movs	r1, #0
 800b714:	429a      	cmp	r2, r3
 800b716:	db09      	blt.n	800b72c <__s2b+0x30>
 800b718:	4630      	mov	r0, r6
 800b71a:	f7ff ff43 	bl	800b5a4 <_Balloc>
 800b71e:	b940      	cbnz	r0, 800b732 <__s2b+0x36>
 800b720:	4602      	mov	r2, r0
 800b722:	21ce      	movs	r1, #206	; 0xce
 800b724:	4b18      	ldr	r3, [pc, #96]	; (800b788 <__s2b+0x8c>)
 800b726:	4819      	ldr	r0, [pc, #100]	; (800b78c <__s2b+0x90>)
 800b728:	f000 fe3a 	bl	800c3a0 <__assert_func>
 800b72c:	0052      	lsls	r2, r2, #1
 800b72e:	3101      	adds	r1, #1
 800b730:	e7f0      	b.n	800b714 <__s2b+0x18>
 800b732:	9b08      	ldr	r3, [sp, #32]
 800b734:	2d09      	cmp	r5, #9
 800b736:	6143      	str	r3, [r0, #20]
 800b738:	f04f 0301 	mov.w	r3, #1
 800b73c:	6103      	str	r3, [r0, #16]
 800b73e:	dd16      	ble.n	800b76e <__s2b+0x72>
 800b740:	f104 0909 	add.w	r9, r4, #9
 800b744:	46c8      	mov	r8, r9
 800b746:	442c      	add	r4, r5
 800b748:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b74c:	4601      	mov	r1, r0
 800b74e:	220a      	movs	r2, #10
 800b750:	4630      	mov	r0, r6
 800b752:	3b30      	subs	r3, #48	; 0x30
 800b754:	f7ff ff88 	bl	800b668 <__multadd>
 800b758:	45a0      	cmp	r8, r4
 800b75a:	d1f5      	bne.n	800b748 <__s2b+0x4c>
 800b75c:	f1a5 0408 	sub.w	r4, r5, #8
 800b760:	444c      	add	r4, r9
 800b762:	1b2d      	subs	r5, r5, r4
 800b764:	1963      	adds	r3, r4, r5
 800b766:	42bb      	cmp	r3, r7
 800b768:	db04      	blt.n	800b774 <__s2b+0x78>
 800b76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b76e:	2509      	movs	r5, #9
 800b770:	340a      	adds	r4, #10
 800b772:	e7f6      	b.n	800b762 <__s2b+0x66>
 800b774:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b778:	4601      	mov	r1, r0
 800b77a:	220a      	movs	r2, #10
 800b77c:	4630      	mov	r0, r6
 800b77e:	3b30      	subs	r3, #48	; 0x30
 800b780:	f7ff ff72 	bl	800b668 <__multadd>
 800b784:	e7ee      	b.n	800b764 <__s2b+0x68>
 800b786:	bf00      	nop
 800b788:	0800d55c 	.word	0x0800d55c
 800b78c:	0800d5ec 	.word	0x0800d5ec

0800b790 <__hi0bits>:
 800b790:	0c02      	lsrs	r2, r0, #16
 800b792:	0412      	lsls	r2, r2, #16
 800b794:	4603      	mov	r3, r0
 800b796:	b9ca      	cbnz	r2, 800b7cc <__hi0bits+0x3c>
 800b798:	0403      	lsls	r3, r0, #16
 800b79a:	2010      	movs	r0, #16
 800b79c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b7a0:	bf04      	itt	eq
 800b7a2:	021b      	lsleq	r3, r3, #8
 800b7a4:	3008      	addeq	r0, #8
 800b7a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b7aa:	bf04      	itt	eq
 800b7ac:	011b      	lsleq	r3, r3, #4
 800b7ae:	3004      	addeq	r0, #4
 800b7b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b7b4:	bf04      	itt	eq
 800b7b6:	009b      	lsleq	r3, r3, #2
 800b7b8:	3002      	addeq	r0, #2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	db05      	blt.n	800b7ca <__hi0bits+0x3a>
 800b7be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b7c2:	f100 0001 	add.w	r0, r0, #1
 800b7c6:	bf08      	it	eq
 800b7c8:	2020      	moveq	r0, #32
 800b7ca:	4770      	bx	lr
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	e7e5      	b.n	800b79c <__hi0bits+0xc>

0800b7d0 <__lo0bits>:
 800b7d0:	6803      	ldr	r3, [r0, #0]
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	f013 0007 	ands.w	r0, r3, #7
 800b7d8:	d00b      	beq.n	800b7f2 <__lo0bits+0x22>
 800b7da:	07d9      	lsls	r1, r3, #31
 800b7dc:	d422      	bmi.n	800b824 <__lo0bits+0x54>
 800b7de:	0798      	lsls	r0, r3, #30
 800b7e0:	bf49      	itett	mi
 800b7e2:	085b      	lsrmi	r3, r3, #1
 800b7e4:	089b      	lsrpl	r3, r3, #2
 800b7e6:	2001      	movmi	r0, #1
 800b7e8:	6013      	strmi	r3, [r2, #0]
 800b7ea:	bf5c      	itt	pl
 800b7ec:	2002      	movpl	r0, #2
 800b7ee:	6013      	strpl	r3, [r2, #0]
 800b7f0:	4770      	bx	lr
 800b7f2:	b299      	uxth	r1, r3
 800b7f4:	b909      	cbnz	r1, 800b7fa <__lo0bits+0x2a>
 800b7f6:	2010      	movs	r0, #16
 800b7f8:	0c1b      	lsrs	r3, r3, #16
 800b7fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b7fe:	bf04      	itt	eq
 800b800:	0a1b      	lsreq	r3, r3, #8
 800b802:	3008      	addeq	r0, #8
 800b804:	0719      	lsls	r1, r3, #28
 800b806:	bf04      	itt	eq
 800b808:	091b      	lsreq	r3, r3, #4
 800b80a:	3004      	addeq	r0, #4
 800b80c:	0799      	lsls	r1, r3, #30
 800b80e:	bf04      	itt	eq
 800b810:	089b      	lsreq	r3, r3, #2
 800b812:	3002      	addeq	r0, #2
 800b814:	07d9      	lsls	r1, r3, #31
 800b816:	d403      	bmi.n	800b820 <__lo0bits+0x50>
 800b818:	085b      	lsrs	r3, r3, #1
 800b81a:	f100 0001 	add.w	r0, r0, #1
 800b81e:	d003      	beq.n	800b828 <__lo0bits+0x58>
 800b820:	6013      	str	r3, [r2, #0]
 800b822:	4770      	bx	lr
 800b824:	2000      	movs	r0, #0
 800b826:	4770      	bx	lr
 800b828:	2020      	movs	r0, #32
 800b82a:	4770      	bx	lr

0800b82c <__i2b>:
 800b82c:	b510      	push	{r4, lr}
 800b82e:	460c      	mov	r4, r1
 800b830:	2101      	movs	r1, #1
 800b832:	f7ff feb7 	bl	800b5a4 <_Balloc>
 800b836:	4602      	mov	r2, r0
 800b838:	b928      	cbnz	r0, 800b846 <__i2b+0x1a>
 800b83a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b83e:	4b04      	ldr	r3, [pc, #16]	; (800b850 <__i2b+0x24>)
 800b840:	4804      	ldr	r0, [pc, #16]	; (800b854 <__i2b+0x28>)
 800b842:	f000 fdad 	bl	800c3a0 <__assert_func>
 800b846:	2301      	movs	r3, #1
 800b848:	6144      	str	r4, [r0, #20]
 800b84a:	6103      	str	r3, [r0, #16]
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	bf00      	nop
 800b850:	0800d55c 	.word	0x0800d55c
 800b854:	0800d5ec 	.word	0x0800d5ec

0800b858 <__multiply>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	4614      	mov	r4, r2
 800b85e:	690a      	ldr	r2, [r1, #16]
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	460d      	mov	r5, r1
 800b864:	429a      	cmp	r2, r3
 800b866:	bfbe      	ittt	lt
 800b868:	460b      	movlt	r3, r1
 800b86a:	4625      	movlt	r5, r4
 800b86c:	461c      	movlt	r4, r3
 800b86e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b872:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b876:	68ab      	ldr	r3, [r5, #8]
 800b878:	6869      	ldr	r1, [r5, #4]
 800b87a:	eb0a 0709 	add.w	r7, sl, r9
 800b87e:	42bb      	cmp	r3, r7
 800b880:	b085      	sub	sp, #20
 800b882:	bfb8      	it	lt
 800b884:	3101      	addlt	r1, #1
 800b886:	f7ff fe8d 	bl	800b5a4 <_Balloc>
 800b88a:	b930      	cbnz	r0, 800b89a <__multiply+0x42>
 800b88c:	4602      	mov	r2, r0
 800b88e:	f240 115d 	movw	r1, #349	; 0x15d
 800b892:	4b41      	ldr	r3, [pc, #260]	; (800b998 <__multiply+0x140>)
 800b894:	4841      	ldr	r0, [pc, #260]	; (800b99c <__multiply+0x144>)
 800b896:	f000 fd83 	bl	800c3a0 <__assert_func>
 800b89a:	f100 0614 	add.w	r6, r0, #20
 800b89e:	4633      	mov	r3, r6
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b8a6:	4543      	cmp	r3, r8
 800b8a8:	d31e      	bcc.n	800b8e8 <__multiply+0x90>
 800b8aa:	f105 0c14 	add.w	ip, r5, #20
 800b8ae:	f104 0314 	add.w	r3, r4, #20
 800b8b2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b8b6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b8ba:	9202      	str	r2, [sp, #8]
 800b8bc:	ebac 0205 	sub.w	r2, ip, r5
 800b8c0:	3a15      	subs	r2, #21
 800b8c2:	f022 0203 	bic.w	r2, r2, #3
 800b8c6:	3204      	adds	r2, #4
 800b8c8:	f105 0115 	add.w	r1, r5, #21
 800b8cc:	458c      	cmp	ip, r1
 800b8ce:	bf38      	it	cc
 800b8d0:	2204      	movcc	r2, #4
 800b8d2:	9201      	str	r2, [sp, #4]
 800b8d4:	9a02      	ldr	r2, [sp, #8]
 800b8d6:	9303      	str	r3, [sp, #12]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d808      	bhi.n	800b8ee <__multiply+0x96>
 800b8dc:	2f00      	cmp	r7, #0
 800b8de:	dc55      	bgt.n	800b98c <__multiply+0x134>
 800b8e0:	6107      	str	r7, [r0, #16]
 800b8e2:	b005      	add	sp, #20
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	f843 2b04 	str.w	r2, [r3], #4
 800b8ec:	e7db      	b.n	800b8a6 <__multiply+0x4e>
 800b8ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8f2:	f1ba 0f00 	cmp.w	sl, #0
 800b8f6:	d020      	beq.n	800b93a <__multiply+0xe2>
 800b8f8:	46b1      	mov	r9, r6
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f105 0e14 	add.w	lr, r5, #20
 800b900:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b904:	f8d9 b000 	ldr.w	fp, [r9]
 800b908:	b2a1      	uxth	r1, r4
 800b90a:	fa1f fb8b 	uxth.w	fp, fp
 800b90e:	fb0a b101 	mla	r1, sl, r1, fp
 800b912:	4411      	add	r1, r2
 800b914:	f8d9 2000 	ldr.w	r2, [r9]
 800b918:	0c24      	lsrs	r4, r4, #16
 800b91a:	0c12      	lsrs	r2, r2, #16
 800b91c:	fb0a 2404 	mla	r4, sl, r4, r2
 800b920:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b924:	b289      	uxth	r1, r1
 800b926:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b92a:	45f4      	cmp	ip, lr
 800b92c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b930:	f849 1b04 	str.w	r1, [r9], #4
 800b934:	d8e4      	bhi.n	800b900 <__multiply+0xa8>
 800b936:	9901      	ldr	r1, [sp, #4]
 800b938:	5072      	str	r2, [r6, r1]
 800b93a:	9a03      	ldr	r2, [sp, #12]
 800b93c:	3304      	adds	r3, #4
 800b93e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b942:	f1b9 0f00 	cmp.w	r9, #0
 800b946:	d01f      	beq.n	800b988 <__multiply+0x130>
 800b948:	46b6      	mov	lr, r6
 800b94a:	f04f 0a00 	mov.w	sl, #0
 800b94e:	6834      	ldr	r4, [r6, #0]
 800b950:	f105 0114 	add.w	r1, r5, #20
 800b954:	880a      	ldrh	r2, [r1, #0]
 800b956:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b95a:	b2a4      	uxth	r4, r4
 800b95c:	fb09 b202 	mla	r2, r9, r2, fp
 800b960:	4492      	add	sl, r2
 800b962:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b966:	f84e 4b04 	str.w	r4, [lr], #4
 800b96a:	f851 4b04 	ldr.w	r4, [r1], #4
 800b96e:	f8be 2000 	ldrh.w	r2, [lr]
 800b972:	0c24      	lsrs	r4, r4, #16
 800b974:	fb09 2404 	mla	r4, r9, r4, r2
 800b978:	458c      	cmp	ip, r1
 800b97a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b97e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b982:	d8e7      	bhi.n	800b954 <__multiply+0xfc>
 800b984:	9a01      	ldr	r2, [sp, #4]
 800b986:	50b4      	str	r4, [r6, r2]
 800b988:	3604      	adds	r6, #4
 800b98a:	e7a3      	b.n	800b8d4 <__multiply+0x7c>
 800b98c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1a5      	bne.n	800b8e0 <__multiply+0x88>
 800b994:	3f01      	subs	r7, #1
 800b996:	e7a1      	b.n	800b8dc <__multiply+0x84>
 800b998:	0800d55c 	.word	0x0800d55c
 800b99c:	0800d5ec 	.word	0x0800d5ec

0800b9a0 <__pow5mult>:
 800b9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a4:	4615      	mov	r5, r2
 800b9a6:	f012 0203 	ands.w	r2, r2, #3
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	460f      	mov	r7, r1
 800b9ae:	d007      	beq.n	800b9c0 <__pow5mult+0x20>
 800b9b0:	4c25      	ldr	r4, [pc, #148]	; (800ba48 <__pow5mult+0xa8>)
 800b9b2:	3a01      	subs	r2, #1
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ba:	f7ff fe55 	bl	800b668 <__multadd>
 800b9be:	4607      	mov	r7, r0
 800b9c0:	10ad      	asrs	r5, r5, #2
 800b9c2:	d03d      	beq.n	800ba40 <__pow5mult+0xa0>
 800b9c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9c6:	b97c      	cbnz	r4, 800b9e8 <__pow5mult+0x48>
 800b9c8:	2010      	movs	r0, #16
 800b9ca:	f7ff fdb5 	bl	800b538 <malloc>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b9d2:	b928      	cbnz	r0, 800b9e0 <__pow5mult+0x40>
 800b9d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9d8:	4b1c      	ldr	r3, [pc, #112]	; (800ba4c <__pow5mult+0xac>)
 800b9da:	481d      	ldr	r0, [pc, #116]	; (800ba50 <__pow5mult+0xb0>)
 800b9dc:	f000 fce0 	bl	800c3a0 <__assert_func>
 800b9e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9e4:	6004      	str	r4, [r0, #0]
 800b9e6:	60c4      	str	r4, [r0, #12]
 800b9e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9f0:	b94c      	cbnz	r4, 800ba06 <__pow5mult+0x66>
 800b9f2:	f240 2171 	movw	r1, #625	; 0x271
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff ff18 	bl	800b82c <__i2b>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4604      	mov	r4, r0
 800ba00:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba04:	6003      	str	r3, [r0, #0]
 800ba06:	f04f 0900 	mov.w	r9, #0
 800ba0a:	07eb      	lsls	r3, r5, #31
 800ba0c:	d50a      	bpl.n	800ba24 <__pow5mult+0x84>
 800ba0e:	4639      	mov	r1, r7
 800ba10:	4622      	mov	r2, r4
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7ff ff20 	bl	800b858 <__multiply>
 800ba18:	4680      	mov	r8, r0
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f7ff fe01 	bl	800b624 <_Bfree>
 800ba22:	4647      	mov	r7, r8
 800ba24:	106d      	asrs	r5, r5, #1
 800ba26:	d00b      	beq.n	800ba40 <__pow5mult+0xa0>
 800ba28:	6820      	ldr	r0, [r4, #0]
 800ba2a:	b938      	cbnz	r0, 800ba3c <__pow5mult+0x9c>
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4630      	mov	r0, r6
 800ba32:	f7ff ff11 	bl	800b858 <__multiply>
 800ba36:	6020      	str	r0, [r4, #0]
 800ba38:	f8c0 9000 	str.w	r9, [r0]
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	e7e4      	b.n	800ba0a <__pow5mult+0x6a>
 800ba40:	4638      	mov	r0, r7
 800ba42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba46:	bf00      	nop
 800ba48:	0800d740 	.word	0x0800d740
 800ba4c:	0800d4e6 	.word	0x0800d4e6
 800ba50:	0800d5ec 	.word	0x0800d5ec

0800ba54 <__lshift>:
 800ba54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba58:	460c      	mov	r4, r1
 800ba5a:	4607      	mov	r7, r0
 800ba5c:	4691      	mov	r9, r2
 800ba5e:	6923      	ldr	r3, [r4, #16]
 800ba60:	6849      	ldr	r1, [r1, #4]
 800ba62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba6c:	f108 0601 	add.w	r6, r8, #1
 800ba70:	42b3      	cmp	r3, r6
 800ba72:	db0b      	blt.n	800ba8c <__lshift+0x38>
 800ba74:	4638      	mov	r0, r7
 800ba76:	f7ff fd95 	bl	800b5a4 <_Balloc>
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	b948      	cbnz	r0, 800ba92 <__lshift+0x3e>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba84:	4b27      	ldr	r3, [pc, #156]	; (800bb24 <__lshift+0xd0>)
 800ba86:	4828      	ldr	r0, [pc, #160]	; (800bb28 <__lshift+0xd4>)
 800ba88:	f000 fc8a 	bl	800c3a0 <__assert_func>
 800ba8c:	3101      	adds	r1, #1
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	e7ee      	b.n	800ba70 <__lshift+0x1c>
 800ba92:	2300      	movs	r3, #0
 800ba94:	f100 0114 	add.w	r1, r0, #20
 800ba98:	f100 0210 	add.w	r2, r0, #16
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	4553      	cmp	r3, sl
 800baa0:	db33      	blt.n	800bb0a <__lshift+0xb6>
 800baa2:	6920      	ldr	r0, [r4, #16]
 800baa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baa8:	f104 0314 	add.w	r3, r4, #20
 800baac:	f019 091f 	ands.w	r9, r9, #31
 800bab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bab8:	d02b      	beq.n	800bb12 <__lshift+0xbe>
 800baba:	468a      	mov	sl, r1
 800babc:	2200      	movs	r2, #0
 800babe:	f1c9 0e20 	rsb	lr, r9, #32
 800bac2:	6818      	ldr	r0, [r3, #0]
 800bac4:	fa00 f009 	lsl.w	r0, r0, r9
 800bac8:	4302      	orrs	r2, r0
 800baca:	f84a 2b04 	str.w	r2, [sl], #4
 800bace:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad2:	459c      	cmp	ip, r3
 800bad4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bad8:	d8f3      	bhi.n	800bac2 <__lshift+0x6e>
 800bada:	ebac 0304 	sub.w	r3, ip, r4
 800bade:	3b15      	subs	r3, #21
 800bae0:	f023 0303 	bic.w	r3, r3, #3
 800bae4:	3304      	adds	r3, #4
 800bae6:	f104 0015 	add.w	r0, r4, #21
 800baea:	4584      	cmp	ip, r0
 800baec:	bf38      	it	cc
 800baee:	2304      	movcc	r3, #4
 800baf0:	50ca      	str	r2, [r1, r3]
 800baf2:	b10a      	cbz	r2, 800baf8 <__lshift+0xa4>
 800baf4:	f108 0602 	add.w	r6, r8, #2
 800baf8:	3e01      	subs	r6, #1
 800bafa:	4638      	mov	r0, r7
 800bafc:	4621      	mov	r1, r4
 800bafe:	612e      	str	r6, [r5, #16]
 800bb00:	f7ff fd90 	bl	800b624 <_Bfree>
 800bb04:	4628      	mov	r0, r5
 800bb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb0e:	3301      	adds	r3, #1
 800bb10:	e7c5      	b.n	800ba9e <__lshift+0x4a>
 800bb12:	3904      	subs	r1, #4
 800bb14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb18:	459c      	cmp	ip, r3
 800bb1a:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb1e:	d8f9      	bhi.n	800bb14 <__lshift+0xc0>
 800bb20:	e7ea      	b.n	800baf8 <__lshift+0xa4>
 800bb22:	bf00      	nop
 800bb24:	0800d55c 	.word	0x0800d55c
 800bb28:	0800d5ec 	.word	0x0800d5ec

0800bb2c <__mcmp>:
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	690a      	ldr	r2, [r1, #16]
 800bb30:	6900      	ldr	r0, [r0, #16]
 800bb32:	b530      	push	{r4, r5, lr}
 800bb34:	1a80      	subs	r0, r0, r2
 800bb36:	d10d      	bne.n	800bb54 <__mcmp+0x28>
 800bb38:	3314      	adds	r3, #20
 800bb3a:	3114      	adds	r1, #20
 800bb3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb4c:	4295      	cmp	r5, r2
 800bb4e:	d002      	beq.n	800bb56 <__mcmp+0x2a>
 800bb50:	d304      	bcc.n	800bb5c <__mcmp+0x30>
 800bb52:	2001      	movs	r0, #1
 800bb54:	bd30      	pop	{r4, r5, pc}
 800bb56:	42a3      	cmp	r3, r4
 800bb58:	d3f4      	bcc.n	800bb44 <__mcmp+0x18>
 800bb5a:	e7fb      	b.n	800bb54 <__mcmp+0x28>
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb60:	e7f8      	b.n	800bb54 <__mcmp+0x28>
	...

0800bb64 <__mdiff>:
 800bb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	460c      	mov	r4, r1
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4620      	mov	r0, r4
 800bb70:	4692      	mov	sl, r2
 800bb72:	f7ff ffdb 	bl	800bb2c <__mcmp>
 800bb76:	1e05      	subs	r5, r0, #0
 800bb78:	d111      	bne.n	800bb9e <__mdiff+0x3a>
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff fd11 	bl	800b5a4 <_Balloc>
 800bb82:	4602      	mov	r2, r0
 800bb84:	b928      	cbnz	r0, 800bb92 <__mdiff+0x2e>
 800bb86:	f240 2132 	movw	r1, #562	; 0x232
 800bb8a:	4b3c      	ldr	r3, [pc, #240]	; (800bc7c <__mdiff+0x118>)
 800bb8c:	483c      	ldr	r0, [pc, #240]	; (800bc80 <__mdiff+0x11c>)
 800bb8e:	f000 fc07 	bl	800c3a0 <__assert_func>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb98:	4610      	mov	r0, r2
 800bb9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9e:	bfa4      	itt	ge
 800bba0:	4653      	movge	r3, sl
 800bba2:	46a2      	movge	sl, r4
 800bba4:	4630      	mov	r0, r6
 800bba6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bbaa:	bfa6      	itte	ge
 800bbac:	461c      	movge	r4, r3
 800bbae:	2500      	movge	r5, #0
 800bbb0:	2501      	movlt	r5, #1
 800bbb2:	f7ff fcf7 	bl	800b5a4 <_Balloc>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	b918      	cbnz	r0, 800bbc2 <__mdiff+0x5e>
 800bbba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbbe:	4b2f      	ldr	r3, [pc, #188]	; (800bc7c <__mdiff+0x118>)
 800bbc0:	e7e4      	b.n	800bb8c <__mdiff+0x28>
 800bbc2:	f100 0814 	add.w	r8, r0, #20
 800bbc6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bbca:	60c5      	str	r5, [r0, #12]
 800bbcc:	f04f 0c00 	mov.w	ip, #0
 800bbd0:	f10a 0514 	add.w	r5, sl, #20
 800bbd4:	f10a 0010 	add.w	r0, sl, #16
 800bbd8:	46c2      	mov	sl, r8
 800bbda:	6926      	ldr	r6, [r4, #16]
 800bbdc:	f104 0914 	add.w	r9, r4, #20
 800bbe0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bbe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbe8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bbec:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbf0:	fa1f f18b 	uxth.w	r1, fp
 800bbf4:	4461      	add	r1, ip
 800bbf6:	fa1f fc83 	uxth.w	ip, r3
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	eba1 010c 	sub.w	r1, r1, ip
 800bc00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc04:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bc08:	b289      	uxth	r1, r1
 800bc0a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bc0e:	454e      	cmp	r6, r9
 800bc10:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bc14:	f84a 3b04 	str.w	r3, [sl], #4
 800bc18:	d8e6      	bhi.n	800bbe8 <__mdiff+0x84>
 800bc1a:	1b33      	subs	r3, r6, r4
 800bc1c:	3b15      	subs	r3, #21
 800bc1e:	f023 0303 	bic.w	r3, r3, #3
 800bc22:	3415      	adds	r4, #21
 800bc24:	3304      	adds	r3, #4
 800bc26:	42a6      	cmp	r6, r4
 800bc28:	bf38      	it	cc
 800bc2a:	2304      	movcc	r3, #4
 800bc2c:	441d      	add	r5, r3
 800bc2e:	4443      	add	r3, r8
 800bc30:	461e      	mov	r6, r3
 800bc32:	462c      	mov	r4, r5
 800bc34:	4574      	cmp	r4, lr
 800bc36:	d30e      	bcc.n	800bc56 <__mdiff+0xf2>
 800bc38:	f10e 0103 	add.w	r1, lr, #3
 800bc3c:	1b49      	subs	r1, r1, r5
 800bc3e:	f021 0103 	bic.w	r1, r1, #3
 800bc42:	3d03      	subs	r5, #3
 800bc44:	45ae      	cmp	lr, r5
 800bc46:	bf38      	it	cc
 800bc48:	2100      	movcc	r1, #0
 800bc4a:	4419      	add	r1, r3
 800bc4c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bc50:	b18b      	cbz	r3, 800bc76 <__mdiff+0x112>
 800bc52:	6117      	str	r7, [r2, #16]
 800bc54:	e7a0      	b.n	800bb98 <__mdiff+0x34>
 800bc56:	f854 8b04 	ldr.w	r8, [r4], #4
 800bc5a:	fa1f f188 	uxth.w	r1, r8
 800bc5e:	4461      	add	r1, ip
 800bc60:	1408      	asrs	r0, r1, #16
 800bc62:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bc66:	b289      	uxth	r1, r1
 800bc68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc70:	f846 1b04 	str.w	r1, [r6], #4
 800bc74:	e7de      	b.n	800bc34 <__mdiff+0xd0>
 800bc76:	3f01      	subs	r7, #1
 800bc78:	e7e8      	b.n	800bc4c <__mdiff+0xe8>
 800bc7a:	bf00      	nop
 800bc7c:	0800d55c 	.word	0x0800d55c
 800bc80:	0800d5ec 	.word	0x0800d5ec

0800bc84 <__ulp>:
 800bc84:	4b11      	ldr	r3, [pc, #68]	; (800bccc <__ulp+0x48>)
 800bc86:	400b      	ands	r3, r1
 800bc88:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dd02      	ble.n	800bc96 <__ulp+0x12>
 800bc90:	2000      	movs	r0, #0
 800bc92:	4619      	mov	r1, r3
 800bc94:	4770      	bx	lr
 800bc96:	425b      	negs	r3, r3
 800bc98:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bc9c:	f04f 0000 	mov.w	r0, #0
 800bca0:	f04f 0100 	mov.w	r1, #0
 800bca4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bca8:	da04      	bge.n	800bcb4 <__ulp+0x30>
 800bcaa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcae:	fa43 f102 	asr.w	r1, r3, r2
 800bcb2:	4770      	bx	lr
 800bcb4:	f1a2 0314 	sub.w	r3, r2, #20
 800bcb8:	2b1e      	cmp	r3, #30
 800bcba:	bfd6      	itet	le
 800bcbc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bcc0:	2301      	movgt	r3, #1
 800bcc2:	fa22 f303 	lsrle.w	r3, r2, r3
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	7ff00000 	.word	0x7ff00000

0800bcd0 <__b2d>:
 800bcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd4:	6907      	ldr	r7, [r0, #16]
 800bcd6:	f100 0914 	add.w	r9, r0, #20
 800bcda:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bcde:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bce2:	f1a7 0804 	sub.w	r8, r7, #4
 800bce6:	4630      	mov	r0, r6
 800bce8:	f7ff fd52 	bl	800b790 <__hi0bits>
 800bcec:	f1c0 0320 	rsb	r3, r0, #32
 800bcf0:	280a      	cmp	r0, #10
 800bcf2:	600b      	str	r3, [r1, #0]
 800bcf4:	491f      	ldr	r1, [pc, #124]	; (800bd74 <__b2d+0xa4>)
 800bcf6:	dc17      	bgt.n	800bd28 <__b2d+0x58>
 800bcf8:	45c1      	cmp	r9, r8
 800bcfa:	bf28      	it	cs
 800bcfc:	2200      	movcs	r2, #0
 800bcfe:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd02:	fa26 f30c 	lsr.w	r3, r6, ip
 800bd06:	bf38      	it	cc
 800bd08:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bd0c:	ea43 0501 	orr.w	r5, r3, r1
 800bd10:	f100 0315 	add.w	r3, r0, #21
 800bd14:	fa06 f303 	lsl.w	r3, r6, r3
 800bd18:	fa22 f20c 	lsr.w	r2, r2, ip
 800bd1c:	ea43 0402 	orr.w	r4, r3, r2
 800bd20:	4620      	mov	r0, r4
 800bd22:	4629      	mov	r1, r5
 800bd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd28:	45c1      	cmp	r9, r8
 800bd2a:	bf2e      	itee	cs
 800bd2c:	2200      	movcs	r2, #0
 800bd2e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bd32:	f1a7 0808 	subcc.w	r8, r7, #8
 800bd36:	f1b0 030b 	subs.w	r3, r0, #11
 800bd3a:	d016      	beq.n	800bd6a <__b2d+0x9a>
 800bd3c:	f1c3 0720 	rsb	r7, r3, #32
 800bd40:	fa22 f107 	lsr.w	r1, r2, r7
 800bd44:	45c8      	cmp	r8, r9
 800bd46:	fa06 f603 	lsl.w	r6, r6, r3
 800bd4a:	ea46 0601 	orr.w	r6, r6, r1
 800bd4e:	bf94      	ite	ls
 800bd50:	2100      	movls	r1, #0
 800bd52:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bd56:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bd5a:	fa02 f003 	lsl.w	r0, r2, r3
 800bd5e:	40f9      	lsrs	r1, r7
 800bd60:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd64:	ea40 0401 	orr.w	r4, r0, r1
 800bd68:	e7da      	b.n	800bd20 <__b2d+0x50>
 800bd6a:	4614      	mov	r4, r2
 800bd6c:	ea46 0501 	orr.w	r5, r6, r1
 800bd70:	e7d6      	b.n	800bd20 <__b2d+0x50>
 800bd72:	bf00      	nop
 800bd74:	3ff00000 	.word	0x3ff00000

0800bd78 <__d2b>:
 800bd78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bd82:	4690      	mov	r8, r2
 800bd84:	461d      	mov	r5, r3
 800bd86:	f7ff fc0d 	bl	800b5a4 <_Balloc>
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	b930      	cbnz	r0, 800bd9c <__d2b+0x24>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	f240 310a 	movw	r1, #778	; 0x30a
 800bd94:	4b24      	ldr	r3, [pc, #144]	; (800be28 <__d2b+0xb0>)
 800bd96:	4825      	ldr	r0, [pc, #148]	; (800be2c <__d2b+0xb4>)
 800bd98:	f000 fb02 	bl	800c3a0 <__assert_func>
 800bd9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bda0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bda4:	bb2d      	cbnz	r5, 800bdf2 <__d2b+0x7a>
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	f1b8 0300 	subs.w	r3, r8, #0
 800bdac:	d026      	beq.n	800bdfc <__d2b+0x84>
 800bdae:	4668      	mov	r0, sp
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	f7ff fd0d 	bl	800b7d0 <__lo0bits>
 800bdb6:	9900      	ldr	r1, [sp, #0]
 800bdb8:	b1f0      	cbz	r0, 800bdf8 <__d2b+0x80>
 800bdba:	9a01      	ldr	r2, [sp, #4]
 800bdbc:	f1c0 0320 	rsb	r3, r0, #32
 800bdc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc4:	430b      	orrs	r3, r1
 800bdc6:	40c2      	lsrs	r2, r0
 800bdc8:	6163      	str	r3, [r4, #20]
 800bdca:	9201      	str	r2, [sp, #4]
 800bdcc:	9b01      	ldr	r3, [sp, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bf14      	ite	ne
 800bdd2:	2102      	movne	r1, #2
 800bdd4:	2101      	moveq	r1, #1
 800bdd6:	61a3      	str	r3, [r4, #24]
 800bdd8:	6121      	str	r1, [r4, #16]
 800bdda:	b1c5      	cbz	r5, 800be0e <__d2b+0x96>
 800bddc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bde0:	4405      	add	r5, r0
 800bde2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bde6:	603d      	str	r5, [r7, #0]
 800bde8:	6030      	str	r0, [r6, #0]
 800bdea:	4620      	mov	r0, r4
 800bdec:	b002      	add	sp, #8
 800bdee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdf6:	e7d6      	b.n	800bda6 <__d2b+0x2e>
 800bdf8:	6161      	str	r1, [r4, #20]
 800bdfa:	e7e7      	b.n	800bdcc <__d2b+0x54>
 800bdfc:	a801      	add	r0, sp, #4
 800bdfe:	f7ff fce7 	bl	800b7d0 <__lo0bits>
 800be02:	2101      	movs	r1, #1
 800be04:	9b01      	ldr	r3, [sp, #4]
 800be06:	6121      	str	r1, [r4, #16]
 800be08:	6163      	str	r3, [r4, #20]
 800be0a:	3020      	adds	r0, #32
 800be0c:	e7e5      	b.n	800bdda <__d2b+0x62>
 800be0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800be12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be16:	6038      	str	r0, [r7, #0]
 800be18:	6918      	ldr	r0, [r3, #16]
 800be1a:	f7ff fcb9 	bl	800b790 <__hi0bits>
 800be1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800be22:	6031      	str	r1, [r6, #0]
 800be24:	e7e1      	b.n	800bdea <__d2b+0x72>
 800be26:	bf00      	nop
 800be28:	0800d55c 	.word	0x0800d55c
 800be2c:	0800d5ec 	.word	0x0800d5ec

0800be30 <__ratio>:
 800be30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	4688      	mov	r8, r1
 800be36:	4669      	mov	r1, sp
 800be38:	4681      	mov	r9, r0
 800be3a:	f7ff ff49 	bl	800bcd0 <__b2d>
 800be3e:	460f      	mov	r7, r1
 800be40:	4604      	mov	r4, r0
 800be42:	460d      	mov	r5, r1
 800be44:	4640      	mov	r0, r8
 800be46:	a901      	add	r1, sp, #4
 800be48:	f7ff ff42 	bl	800bcd0 <__b2d>
 800be4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be54:	468b      	mov	fp, r1
 800be56:	eba3 0c02 	sub.w	ip, r3, r2
 800be5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be5e:	1a9b      	subs	r3, r3, r2
 800be60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be64:	2b00      	cmp	r3, #0
 800be66:	bfd5      	itete	le
 800be68:	460a      	movle	r2, r1
 800be6a:	462a      	movgt	r2, r5
 800be6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be70:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be74:	bfd8      	it	le
 800be76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be7a:	465b      	mov	r3, fp
 800be7c:	4602      	mov	r2, r0
 800be7e:	4639      	mov	r1, r7
 800be80:	4620      	mov	r0, r4
 800be82:	f7f4 fc6b 	bl	800075c <__aeabi_ddiv>
 800be86:	b003      	add	sp, #12
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be8c <__copybits>:
 800be8c:	3901      	subs	r1, #1
 800be8e:	b570      	push	{r4, r5, r6, lr}
 800be90:	1149      	asrs	r1, r1, #5
 800be92:	6914      	ldr	r4, [r2, #16]
 800be94:	3101      	adds	r1, #1
 800be96:	f102 0314 	add.w	r3, r2, #20
 800be9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bea2:	1f05      	subs	r5, r0, #4
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	d30c      	bcc.n	800bec2 <__copybits+0x36>
 800bea8:	1aa3      	subs	r3, r4, r2
 800beaa:	3b11      	subs	r3, #17
 800beac:	f023 0303 	bic.w	r3, r3, #3
 800beb0:	3211      	adds	r2, #17
 800beb2:	42a2      	cmp	r2, r4
 800beb4:	bf88      	it	hi
 800beb6:	2300      	movhi	r3, #0
 800beb8:	4418      	add	r0, r3
 800beba:	2300      	movs	r3, #0
 800bebc:	4288      	cmp	r0, r1
 800bebe:	d305      	bcc.n	800becc <__copybits+0x40>
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	f853 6b04 	ldr.w	r6, [r3], #4
 800bec6:	f845 6f04 	str.w	r6, [r5, #4]!
 800beca:	e7eb      	b.n	800bea4 <__copybits+0x18>
 800becc:	f840 3b04 	str.w	r3, [r0], #4
 800bed0:	e7f4      	b.n	800bebc <__copybits+0x30>

0800bed2 <__any_on>:
 800bed2:	f100 0214 	add.w	r2, r0, #20
 800bed6:	6900      	ldr	r0, [r0, #16]
 800bed8:	114b      	asrs	r3, r1, #5
 800beda:	4298      	cmp	r0, r3
 800bedc:	b510      	push	{r4, lr}
 800bede:	db11      	blt.n	800bf04 <__any_on+0x32>
 800bee0:	dd0a      	ble.n	800bef8 <__any_on+0x26>
 800bee2:	f011 011f 	ands.w	r1, r1, #31
 800bee6:	d007      	beq.n	800bef8 <__any_on+0x26>
 800bee8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beec:	fa24 f001 	lsr.w	r0, r4, r1
 800bef0:	fa00 f101 	lsl.w	r1, r0, r1
 800bef4:	428c      	cmp	r4, r1
 800bef6:	d10b      	bne.n	800bf10 <__any_on+0x3e>
 800bef8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800befc:	4293      	cmp	r3, r2
 800befe:	d803      	bhi.n	800bf08 <__any_on+0x36>
 800bf00:	2000      	movs	r0, #0
 800bf02:	bd10      	pop	{r4, pc}
 800bf04:	4603      	mov	r3, r0
 800bf06:	e7f7      	b.n	800bef8 <__any_on+0x26>
 800bf08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf0c:	2900      	cmp	r1, #0
 800bf0e:	d0f5      	beq.n	800befc <__any_on+0x2a>
 800bf10:	2001      	movs	r0, #1
 800bf12:	e7f6      	b.n	800bf02 <__any_on+0x30>

0800bf14 <_calloc_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	fb02 f501 	mul.w	r5, r2, r1
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f000 f854 	bl	800bfc8 <_malloc_r>
 800bf20:	4604      	mov	r4, r0
 800bf22:	b118      	cbz	r0, 800bf2c <_calloc_r+0x18>
 800bf24:	462a      	mov	r2, r5
 800bf26:	2100      	movs	r1, #0
 800bf28:	f7fc fb94 	bl	8008654 <memset>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}

0800bf30 <_free_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4605      	mov	r5, r0
 800bf34:	2900      	cmp	r1, #0
 800bf36:	d043      	beq.n	800bfc0 <_free_r+0x90>
 800bf38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf3c:	1f0c      	subs	r4, r1, #4
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfb8      	it	lt
 800bf42:	18e4      	addlt	r4, r4, r3
 800bf44:	f000 fa76 	bl	800c434 <__malloc_lock>
 800bf48:	4a1e      	ldr	r2, [pc, #120]	; (800bfc4 <_free_r+0x94>)
 800bf4a:	6813      	ldr	r3, [r2, #0]
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	b933      	cbnz	r3, 800bf5e <_free_r+0x2e>
 800bf50:	6063      	str	r3, [r4, #4]
 800bf52:	6014      	str	r4, [r2, #0]
 800bf54:	4628      	mov	r0, r5
 800bf56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf5a:	f000 ba71 	b.w	800c440 <__malloc_unlock>
 800bf5e:	42a3      	cmp	r3, r4
 800bf60:	d90a      	bls.n	800bf78 <_free_r+0x48>
 800bf62:	6821      	ldr	r1, [r4, #0]
 800bf64:	1862      	adds	r2, r4, r1
 800bf66:	4293      	cmp	r3, r2
 800bf68:	bf01      	itttt	eq
 800bf6a:	681a      	ldreq	r2, [r3, #0]
 800bf6c:	685b      	ldreq	r3, [r3, #4]
 800bf6e:	1852      	addeq	r2, r2, r1
 800bf70:	6022      	streq	r2, [r4, #0]
 800bf72:	6063      	str	r3, [r4, #4]
 800bf74:	6004      	str	r4, [r0, #0]
 800bf76:	e7ed      	b.n	800bf54 <_free_r+0x24>
 800bf78:	461a      	mov	r2, r3
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	b10b      	cbz	r3, 800bf82 <_free_r+0x52>
 800bf7e:	42a3      	cmp	r3, r4
 800bf80:	d9fa      	bls.n	800bf78 <_free_r+0x48>
 800bf82:	6811      	ldr	r1, [r2, #0]
 800bf84:	1850      	adds	r0, r2, r1
 800bf86:	42a0      	cmp	r0, r4
 800bf88:	d10b      	bne.n	800bfa2 <_free_r+0x72>
 800bf8a:	6820      	ldr	r0, [r4, #0]
 800bf8c:	4401      	add	r1, r0
 800bf8e:	1850      	adds	r0, r2, r1
 800bf90:	4283      	cmp	r3, r0
 800bf92:	6011      	str	r1, [r2, #0]
 800bf94:	d1de      	bne.n	800bf54 <_free_r+0x24>
 800bf96:	6818      	ldr	r0, [r3, #0]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	4401      	add	r1, r0
 800bf9c:	6011      	str	r1, [r2, #0]
 800bf9e:	6053      	str	r3, [r2, #4]
 800bfa0:	e7d8      	b.n	800bf54 <_free_r+0x24>
 800bfa2:	d902      	bls.n	800bfaa <_free_r+0x7a>
 800bfa4:	230c      	movs	r3, #12
 800bfa6:	602b      	str	r3, [r5, #0]
 800bfa8:	e7d4      	b.n	800bf54 <_free_r+0x24>
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	1821      	adds	r1, r4, r0
 800bfae:	428b      	cmp	r3, r1
 800bfb0:	bf01      	itttt	eq
 800bfb2:	6819      	ldreq	r1, [r3, #0]
 800bfb4:	685b      	ldreq	r3, [r3, #4]
 800bfb6:	1809      	addeq	r1, r1, r0
 800bfb8:	6021      	streq	r1, [r4, #0]
 800bfba:	6063      	str	r3, [r4, #4]
 800bfbc:	6054      	str	r4, [r2, #4]
 800bfbe:	e7c9      	b.n	800bf54 <_free_r+0x24>
 800bfc0:	bd38      	pop	{r3, r4, r5, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000218 	.word	0x20000218

0800bfc8 <_malloc_r>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	1ccd      	adds	r5, r1, #3
 800bfcc:	f025 0503 	bic.w	r5, r5, #3
 800bfd0:	3508      	adds	r5, #8
 800bfd2:	2d0c      	cmp	r5, #12
 800bfd4:	bf38      	it	cc
 800bfd6:	250c      	movcc	r5, #12
 800bfd8:	2d00      	cmp	r5, #0
 800bfda:	4606      	mov	r6, r0
 800bfdc:	db01      	blt.n	800bfe2 <_malloc_r+0x1a>
 800bfde:	42a9      	cmp	r1, r5
 800bfe0:	d903      	bls.n	800bfea <_malloc_r+0x22>
 800bfe2:	230c      	movs	r3, #12
 800bfe4:	6033      	str	r3, [r6, #0]
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfea:	f000 fa23 	bl	800c434 <__malloc_lock>
 800bfee:	4921      	ldr	r1, [pc, #132]	; (800c074 <_malloc_r+0xac>)
 800bff0:	680a      	ldr	r2, [r1, #0]
 800bff2:	4614      	mov	r4, r2
 800bff4:	b99c      	cbnz	r4, 800c01e <_malloc_r+0x56>
 800bff6:	4f20      	ldr	r7, [pc, #128]	; (800c078 <_malloc_r+0xb0>)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	b923      	cbnz	r3, 800c006 <_malloc_r+0x3e>
 800bffc:	4621      	mov	r1, r4
 800bffe:	4630      	mov	r0, r6
 800c000:	f000 f99e 	bl	800c340 <_sbrk_r>
 800c004:	6038      	str	r0, [r7, #0]
 800c006:	4629      	mov	r1, r5
 800c008:	4630      	mov	r0, r6
 800c00a:	f000 f999 	bl	800c340 <_sbrk_r>
 800c00e:	1c43      	adds	r3, r0, #1
 800c010:	d123      	bne.n	800c05a <_malloc_r+0x92>
 800c012:	230c      	movs	r3, #12
 800c014:	4630      	mov	r0, r6
 800c016:	6033      	str	r3, [r6, #0]
 800c018:	f000 fa12 	bl	800c440 <__malloc_unlock>
 800c01c:	e7e3      	b.n	800bfe6 <_malloc_r+0x1e>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	1b5b      	subs	r3, r3, r5
 800c022:	d417      	bmi.n	800c054 <_malloc_r+0x8c>
 800c024:	2b0b      	cmp	r3, #11
 800c026:	d903      	bls.n	800c030 <_malloc_r+0x68>
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	441c      	add	r4, r3
 800c02c:	6025      	str	r5, [r4, #0]
 800c02e:	e004      	b.n	800c03a <_malloc_r+0x72>
 800c030:	6863      	ldr	r3, [r4, #4]
 800c032:	42a2      	cmp	r2, r4
 800c034:	bf0c      	ite	eq
 800c036:	600b      	streq	r3, [r1, #0]
 800c038:	6053      	strne	r3, [r2, #4]
 800c03a:	4630      	mov	r0, r6
 800c03c:	f000 fa00 	bl	800c440 <__malloc_unlock>
 800c040:	f104 000b 	add.w	r0, r4, #11
 800c044:	1d23      	adds	r3, r4, #4
 800c046:	f020 0007 	bic.w	r0, r0, #7
 800c04a:	1ac2      	subs	r2, r0, r3
 800c04c:	d0cc      	beq.n	800bfe8 <_malloc_r+0x20>
 800c04e:	1a1b      	subs	r3, r3, r0
 800c050:	50a3      	str	r3, [r4, r2]
 800c052:	e7c9      	b.n	800bfe8 <_malloc_r+0x20>
 800c054:	4622      	mov	r2, r4
 800c056:	6864      	ldr	r4, [r4, #4]
 800c058:	e7cc      	b.n	800bff4 <_malloc_r+0x2c>
 800c05a:	1cc4      	adds	r4, r0, #3
 800c05c:	f024 0403 	bic.w	r4, r4, #3
 800c060:	42a0      	cmp	r0, r4
 800c062:	d0e3      	beq.n	800c02c <_malloc_r+0x64>
 800c064:	1a21      	subs	r1, r4, r0
 800c066:	4630      	mov	r0, r6
 800c068:	f000 f96a 	bl	800c340 <_sbrk_r>
 800c06c:	3001      	adds	r0, #1
 800c06e:	d1dd      	bne.n	800c02c <_malloc_r+0x64>
 800c070:	e7cf      	b.n	800c012 <_malloc_r+0x4a>
 800c072:	bf00      	nop
 800c074:	20000218 	.word	0x20000218
 800c078:	2000021c 	.word	0x2000021c

0800c07c <__ssputs_r>:
 800c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c080:	688e      	ldr	r6, [r1, #8]
 800c082:	4682      	mov	sl, r0
 800c084:	429e      	cmp	r6, r3
 800c086:	460c      	mov	r4, r1
 800c088:	4690      	mov	r8, r2
 800c08a:	461f      	mov	r7, r3
 800c08c:	d838      	bhi.n	800c100 <__ssputs_r+0x84>
 800c08e:	898a      	ldrh	r2, [r1, #12]
 800c090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c094:	d032      	beq.n	800c0fc <__ssputs_r+0x80>
 800c096:	6825      	ldr	r5, [r4, #0]
 800c098:	6909      	ldr	r1, [r1, #16]
 800c09a:	3301      	adds	r3, #1
 800c09c:	eba5 0901 	sub.w	r9, r5, r1
 800c0a0:	6965      	ldr	r5, [r4, #20]
 800c0a2:	444b      	add	r3, r9
 800c0a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0ac:	106d      	asrs	r5, r5, #1
 800c0ae:	429d      	cmp	r5, r3
 800c0b0:	bf38      	it	cc
 800c0b2:	461d      	movcc	r5, r3
 800c0b4:	0553      	lsls	r3, r2, #21
 800c0b6:	d531      	bpl.n	800c11c <__ssputs_r+0xa0>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7ff ff85 	bl	800bfc8 <_malloc_r>
 800c0be:	4606      	mov	r6, r0
 800c0c0:	b950      	cbnz	r0, 800c0d8 <__ssputs_r+0x5c>
 800c0c2:	230c      	movs	r3, #12
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	f8ca 3000 	str.w	r3, [sl]
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0d2:	81a3      	strh	r3, [r4, #12]
 800c0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d8:	464a      	mov	r2, r9
 800c0da:	6921      	ldr	r1, [r4, #16]
 800c0dc:	f7ff fa54 	bl	800b588 <memcpy>
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	6126      	str	r6, [r4, #16]
 800c0ee:	444e      	add	r6, r9
 800c0f0:	6026      	str	r6, [r4, #0]
 800c0f2:	463e      	mov	r6, r7
 800c0f4:	6165      	str	r5, [r4, #20]
 800c0f6:	eba5 0509 	sub.w	r5, r5, r9
 800c0fa:	60a5      	str	r5, [r4, #8]
 800c0fc:	42be      	cmp	r6, r7
 800c0fe:	d900      	bls.n	800c102 <__ssputs_r+0x86>
 800c100:	463e      	mov	r6, r7
 800c102:	4632      	mov	r2, r6
 800c104:	4641      	mov	r1, r8
 800c106:	6820      	ldr	r0, [r4, #0]
 800c108:	f000 f97a 	bl	800c400 <memmove>
 800c10c:	68a3      	ldr	r3, [r4, #8]
 800c10e:	6822      	ldr	r2, [r4, #0]
 800c110:	1b9b      	subs	r3, r3, r6
 800c112:	4432      	add	r2, r6
 800c114:	2000      	movs	r0, #0
 800c116:	60a3      	str	r3, [r4, #8]
 800c118:	6022      	str	r2, [r4, #0]
 800c11a:	e7db      	b.n	800c0d4 <__ssputs_r+0x58>
 800c11c:	462a      	mov	r2, r5
 800c11e:	f000 f995 	bl	800c44c <_realloc_r>
 800c122:	4606      	mov	r6, r0
 800c124:	2800      	cmp	r0, #0
 800c126:	d1e1      	bne.n	800c0ec <__ssputs_r+0x70>
 800c128:	4650      	mov	r0, sl
 800c12a:	6921      	ldr	r1, [r4, #16]
 800c12c:	f7ff ff00 	bl	800bf30 <_free_r>
 800c130:	e7c7      	b.n	800c0c2 <__ssputs_r+0x46>
	...

0800c134 <_svfiprintf_r>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	4698      	mov	r8, r3
 800c13a:	898b      	ldrh	r3, [r1, #12]
 800c13c:	4607      	mov	r7, r0
 800c13e:	061b      	lsls	r3, r3, #24
 800c140:	460d      	mov	r5, r1
 800c142:	4614      	mov	r4, r2
 800c144:	b09d      	sub	sp, #116	; 0x74
 800c146:	d50e      	bpl.n	800c166 <_svfiprintf_r+0x32>
 800c148:	690b      	ldr	r3, [r1, #16]
 800c14a:	b963      	cbnz	r3, 800c166 <_svfiprintf_r+0x32>
 800c14c:	2140      	movs	r1, #64	; 0x40
 800c14e:	f7ff ff3b 	bl	800bfc8 <_malloc_r>
 800c152:	6028      	str	r0, [r5, #0]
 800c154:	6128      	str	r0, [r5, #16]
 800c156:	b920      	cbnz	r0, 800c162 <_svfiprintf_r+0x2e>
 800c158:	230c      	movs	r3, #12
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295
 800c160:	e0d1      	b.n	800c306 <_svfiprintf_r+0x1d2>
 800c162:	2340      	movs	r3, #64	; 0x40
 800c164:	616b      	str	r3, [r5, #20]
 800c166:	2300      	movs	r3, #0
 800c168:	9309      	str	r3, [sp, #36]	; 0x24
 800c16a:	2320      	movs	r3, #32
 800c16c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c170:	2330      	movs	r3, #48	; 0x30
 800c172:	f04f 0901 	mov.w	r9, #1
 800c176:	f8cd 800c 	str.w	r8, [sp, #12]
 800c17a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c320 <_svfiprintf_r+0x1ec>
 800c17e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c182:	4623      	mov	r3, r4
 800c184:	469a      	mov	sl, r3
 800c186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c18a:	b10a      	cbz	r2, 800c190 <_svfiprintf_r+0x5c>
 800c18c:	2a25      	cmp	r2, #37	; 0x25
 800c18e:	d1f9      	bne.n	800c184 <_svfiprintf_r+0x50>
 800c190:	ebba 0b04 	subs.w	fp, sl, r4
 800c194:	d00b      	beq.n	800c1ae <_svfiprintf_r+0x7a>
 800c196:	465b      	mov	r3, fp
 800c198:	4622      	mov	r2, r4
 800c19a:	4629      	mov	r1, r5
 800c19c:	4638      	mov	r0, r7
 800c19e:	f7ff ff6d 	bl	800c07c <__ssputs_r>
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f000 80aa 	beq.w	800c2fc <_svfiprintf_r+0x1c8>
 800c1a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1aa:	445a      	add	r2, fp
 800c1ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 80a2 	beq.w	800c2fc <_svfiprintf_r+0x1c8>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1c2:	f10a 0a01 	add.w	sl, sl, #1
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	9307      	str	r3, [sp, #28]
 800c1ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c1d0:	4654      	mov	r4, sl
 800c1d2:	2205      	movs	r2, #5
 800c1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d8:	4851      	ldr	r0, [pc, #324]	; (800c320 <_svfiprintf_r+0x1ec>)
 800c1da:	f7ff f9c7 	bl	800b56c <memchr>
 800c1de:	9a04      	ldr	r2, [sp, #16]
 800c1e0:	b9d8      	cbnz	r0, 800c21a <_svfiprintf_r+0xe6>
 800c1e2:	06d0      	lsls	r0, r2, #27
 800c1e4:	bf44      	itt	mi
 800c1e6:	2320      	movmi	r3, #32
 800c1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ec:	0711      	lsls	r1, r2, #28
 800c1ee:	bf44      	itt	mi
 800c1f0:	232b      	movmi	r3, #43	; 0x2b
 800c1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c1fc:	d015      	beq.n	800c22a <_svfiprintf_r+0xf6>
 800c1fe:	4654      	mov	r4, sl
 800c200:	2000      	movs	r0, #0
 800c202:	f04f 0c0a 	mov.w	ip, #10
 800c206:	9a07      	ldr	r2, [sp, #28]
 800c208:	4621      	mov	r1, r4
 800c20a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c20e:	3b30      	subs	r3, #48	; 0x30
 800c210:	2b09      	cmp	r3, #9
 800c212:	d94e      	bls.n	800c2b2 <_svfiprintf_r+0x17e>
 800c214:	b1b0      	cbz	r0, 800c244 <_svfiprintf_r+0x110>
 800c216:	9207      	str	r2, [sp, #28]
 800c218:	e014      	b.n	800c244 <_svfiprintf_r+0x110>
 800c21a:	eba0 0308 	sub.w	r3, r0, r8
 800c21e:	fa09 f303 	lsl.w	r3, r9, r3
 800c222:	4313      	orrs	r3, r2
 800c224:	46a2      	mov	sl, r4
 800c226:	9304      	str	r3, [sp, #16]
 800c228:	e7d2      	b.n	800c1d0 <_svfiprintf_r+0x9c>
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	1d19      	adds	r1, r3, #4
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	9103      	str	r1, [sp, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	bfbb      	ittet	lt
 800c236:	425b      	neglt	r3, r3
 800c238:	f042 0202 	orrlt.w	r2, r2, #2
 800c23c:	9307      	strge	r3, [sp, #28]
 800c23e:	9307      	strlt	r3, [sp, #28]
 800c240:	bfb8      	it	lt
 800c242:	9204      	strlt	r2, [sp, #16]
 800c244:	7823      	ldrb	r3, [r4, #0]
 800c246:	2b2e      	cmp	r3, #46	; 0x2e
 800c248:	d10c      	bne.n	800c264 <_svfiprintf_r+0x130>
 800c24a:	7863      	ldrb	r3, [r4, #1]
 800c24c:	2b2a      	cmp	r3, #42	; 0x2a
 800c24e:	d135      	bne.n	800c2bc <_svfiprintf_r+0x188>
 800c250:	9b03      	ldr	r3, [sp, #12]
 800c252:	3402      	adds	r4, #2
 800c254:	1d1a      	adds	r2, r3, #4
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	9203      	str	r2, [sp, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	bfb8      	it	lt
 800c25e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c262:	9305      	str	r3, [sp, #20]
 800c264:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c330 <_svfiprintf_r+0x1fc>
 800c268:	2203      	movs	r2, #3
 800c26a:	4650      	mov	r0, sl
 800c26c:	7821      	ldrb	r1, [r4, #0]
 800c26e:	f7ff f97d 	bl	800b56c <memchr>
 800c272:	b140      	cbz	r0, 800c286 <_svfiprintf_r+0x152>
 800c274:	2340      	movs	r3, #64	; 0x40
 800c276:	eba0 000a 	sub.w	r0, r0, sl
 800c27a:	fa03 f000 	lsl.w	r0, r3, r0
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	3401      	adds	r4, #1
 800c282:	4303      	orrs	r3, r0
 800c284:	9304      	str	r3, [sp, #16]
 800c286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28a:	2206      	movs	r2, #6
 800c28c:	4825      	ldr	r0, [pc, #148]	; (800c324 <_svfiprintf_r+0x1f0>)
 800c28e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c292:	f7ff f96b 	bl	800b56c <memchr>
 800c296:	2800      	cmp	r0, #0
 800c298:	d038      	beq.n	800c30c <_svfiprintf_r+0x1d8>
 800c29a:	4b23      	ldr	r3, [pc, #140]	; (800c328 <_svfiprintf_r+0x1f4>)
 800c29c:	bb1b      	cbnz	r3, 800c2e6 <_svfiprintf_r+0x1b2>
 800c29e:	9b03      	ldr	r3, [sp, #12]
 800c2a0:	3307      	adds	r3, #7
 800c2a2:	f023 0307 	bic.w	r3, r3, #7
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	9303      	str	r3, [sp, #12]
 800c2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ac:	4433      	add	r3, r6
 800c2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b0:	e767      	b.n	800c182 <_svfiprintf_r+0x4e>
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ba:	e7a5      	b.n	800c208 <_svfiprintf_r+0xd4>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f04f 0c0a 	mov.w	ip, #10
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	3401      	adds	r4, #1
 800c2c6:	9305      	str	r3, [sp, #20]
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2ce:	3a30      	subs	r2, #48	; 0x30
 800c2d0:	2a09      	cmp	r2, #9
 800c2d2:	d903      	bls.n	800c2dc <_svfiprintf_r+0x1a8>
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d0c5      	beq.n	800c264 <_svfiprintf_r+0x130>
 800c2d8:	9105      	str	r1, [sp, #20]
 800c2da:	e7c3      	b.n	800c264 <_svfiprintf_r+0x130>
 800c2dc:	4604      	mov	r4, r0
 800c2de:	2301      	movs	r3, #1
 800c2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2e4:	e7f0      	b.n	800c2c8 <_svfiprintf_r+0x194>
 800c2e6:	ab03      	add	r3, sp, #12
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	4638      	mov	r0, r7
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <_svfiprintf_r+0x1f8>)
 800c2f0:	a904      	add	r1, sp, #16
 800c2f2:	f7fc fa55 	bl	80087a0 <_printf_float>
 800c2f6:	1c42      	adds	r2, r0, #1
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	d1d6      	bne.n	800c2aa <_svfiprintf_r+0x176>
 800c2fc:	89ab      	ldrh	r3, [r5, #12]
 800c2fe:	065b      	lsls	r3, r3, #25
 800c300:	f53f af2c 	bmi.w	800c15c <_svfiprintf_r+0x28>
 800c304:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c306:	b01d      	add	sp, #116	; 0x74
 800c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30c:	ab03      	add	r3, sp, #12
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	462a      	mov	r2, r5
 800c312:	4638      	mov	r0, r7
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <_svfiprintf_r+0x1f8>)
 800c316:	a904      	add	r1, sp, #16
 800c318:	f7fc fcde 	bl	8008cd8 <_printf_i>
 800c31c:	e7eb      	b.n	800c2f6 <_svfiprintf_r+0x1c2>
 800c31e:	bf00      	nop
 800c320:	0800d74c 	.word	0x0800d74c
 800c324:	0800d756 	.word	0x0800d756
 800c328:	080087a1 	.word	0x080087a1
 800c32c:	0800c07d 	.word	0x0800c07d
 800c330:	0800d752 	.word	0x0800d752

0800c334 <nan>:
 800c334:	2000      	movs	r0, #0
 800c336:	4901      	ldr	r1, [pc, #4]	; (800c33c <nan+0x8>)
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	7ff80000 	.word	0x7ff80000

0800c340 <_sbrk_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	2300      	movs	r3, #0
 800c344:	4d05      	ldr	r5, [pc, #20]	; (800c35c <_sbrk_r+0x1c>)
 800c346:	4604      	mov	r4, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	602b      	str	r3, [r5, #0]
 800c34c:	f7f6 fa98 	bl	8002880 <_sbrk>
 800c350:	1c43      	adds	r3, r0, #1
 800c352:	d102      	bne.n	800c35a <_sbrk_r+0x1a>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	b103      	cbz	r3, 800c35a <_sbrk_r+0x1a>
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	200003a0 	.word	0x200003a0

0800c360 <strncmp>:
 800c360:	b510      	push	{r4, lr}
 800c362:	b16a      	cbz	r2, 800c380 <strncmp+0x20>
 800c364:	3901      	subs	r1, #1
 800c366:	1884      	adds	r4, r0, r2
 800c368:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c36c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c370:	4293      	cmp	r3, r2
 800c372:	d103      	bne.n	800c37c <strncmp+0x1c>
 800c374:	42a0      	cmp	r0, r4
 800c376:	d001      	beq.n	800c37c <strncmp+0x1c>
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f5      	bne.n	800c368 <strncmp+0x8>
 800c37c:	1a98      	subs	r0, r3, r2
 800c37e:	bd10      	pop	{r4, pc}
 800c380:	4610      	mov	r0, r2
 800c382:	e7fc      	b.n	800c37e <strncmp+0x1e>

0800c384 <__ascii_wctomb>:
 800c384:	4603      	mov	r3, r0
 800c386:	4608      	mov	r0, r1
 800c388:	b141      	cbz	r1, 800c39c <__ascii_wctomb+0x18>
 800c38a:	2aff      	cmp	r2, #255	; 0xff
 800c38c:	d904      	bls.n	800c398 <__ascii_wctomb+0x14>
 800c38e:	228a      	movs	r2, #138	; 0x8a
 800c390:	f04f 30ff 	mov.w	r0, #4294967295
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	4770      	bx	lr
 800c398:	2001      	movs	r0, #1
 800c39a:	700a      	strb	r2, [r1, #0]
 800c39c:	4770      	bx	lr
	...

0800c3a0 <__assert_func>:
 800c3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3a2:	4614      	mov	r4, r2
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <__assert_func+0x2c>)
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68d8      	ldr	r0, [r3, #12]
 800c3ae:	b14c      	cbz	r4, 800c3c4 <__assert_func+0x24>
 800c3b0:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <__assert_func+0x30>)
 800c3b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3b6:	9100      	str	r1, [sp, #0]
 800c3b8:	462b      	mov	r3, r5
 800c3ba:	4906      	ldr	r1, [pc, #24]	; (800c3d4 <__assert_func+0x34>)
 800c3bc:	f000 f80e 	bl	800c3dc <fiprintf>
 800c3c0:	f000 fa82 	bl	800c8c8 <abort>
 800c3c4:	4b04      	ldr	r3, [pc, #16]	; (800c3d8 <__assert_func+0x38>)
 800c3c6:	461c      	mov	r4, r3
 800c3c8:	e7f3      	b.n	800c3b2 <__assert_func+0x12>
 800c3ca:	bf00      	nop
 800c3cc:	2000000c 	.word	0x2000000c
 800c3d0:	0800d75d 	.word	0x0800d75d
 800c3d4:	0800d76a 	.word	0x0800d76a
 800c3d8:	0800d798 	.word	0x0800d798

0800c3dc <fiprintf>:
 800c3dc:	b40e      	push	{r1, r2, r3}
 800c3de:	b503      	push	{r0, r1, lr}
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	ab03      	add	r3, sp, #12
 800c3e4:	4805      	ldr	r0, [pc, #20]	; (800c3fc <fiprintf+0x20>)
 800c3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	f000 f87b 	bl	800c4e8 <_vfiprintf_r>
 800c3f2:	b002      	add	sp, #8
 800c3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f8:	b003      	add	sp, #12
 800c3fa:	4770      	bx	lr
 800c3fc:	2000000c 	.word	0x2000000c

0800c400 <memmove>:
 800c400:	4288      	cmp	r0, r1
 800c402:	b510      	push	{r4, lr}
 800c404:	eb01 0402 	add.w	r4, r1, r2
 800c408:	d902      	bls.n	800c410 <memmove+0x10>
 800c40a:	4284      	cmp	r4, r0
 800c40c:	4623      	mov	r3, r4
 800c40e:	d807      	bhi.n	800c420 <memmove+0x20>
 800c410:	1e43      	subs	r3, r0, #1
 800c412:	42a1      	cmp	r1, r4
 800c414:	d008      	beq.n	800c428 <memmove+0x28>
 800c416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c41a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c41e:	e7f8      	b.n	800c412 <memmove+0x12>
 800c420:	4601      	mov	r1, r0
 800c422:	4402      	add	r2, r0
 800c424:	428a      	cmp	r2, r1
 800c426:	d100      	bne.n	800c42a <memmove+0x2a>
 800c428:	bd10      	pop	{r4, pc}
 800c42a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c42e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c432:	e7f7      	b.n	800c424 <memmove+0x24>

0800c434 <__malloc_lock>:
 800c434:	4801      	ldr	r0, [pc, #4]	; (800c43c <__malloc_lock+0x8>)
 800c436:	f000 bc07 	b.w	800cc48 <__retarget_lock_acquire_recursive>
 800c43a:	bf00      	nop
 800c43c:	200003a8 	.word	0x200003a8

0800c440 <__malloc_unlock>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__malloc_unlock+0x8>)
 800c442:	f000 bc02 	b.w	800cc4a <__retarget_lock_release_recursive>
 800c446:	bf00      	nop
 800c448:	200003a8 	.word	0x200003a8

0800c44c <_realloc_r>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	4607      	mov	r7, r0
 800c450:	4614      	mov	r4, r2
 800c452:	460e      	mov	r6, r1
 800c454:	b921      	cbnz	r1, 800c460 <_realloc_r+0x14>
 800c456:	4611      	mov	r1, r2
 800c458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c45c:	f7ff bdb4 	b.w	800bfc8 <_malloc_r>
 800c460:	b922      	cbnz	r2, 800c46c <_realloc_r+0x20>
 800c462:	f7ff fd65 	bl	800bf30 <_free_r>
 800c466:	4625      	mov	r5, r4
 800c468:	4628      	mov	r0, r5
 800c46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c46c:	f000 fc52 	bl	800cd14 <_malloc_usable_size_r>
 800c470:	42a0      	cmp	r0, r4
 800c472:	d20f      	bcs.n	800c494 <_realloc_r+0x48>
 800c474:	4621      	mov	r1, r4
 800c476:	4638      	mov	r0, r7
 800c478:	f7ff fda6 	bl	800bfc8 <_malloc_r>
 800c47c:	4605      	mov	r5, r0
 800c47e:	2800      	cmp	r0, #0
 800c480:	d0f2      	beq.n	800c468 <_realloc_r+0x1c>
 800c482:	4631      	mov	r1, r6
 800c484:	4622      	mov	r2, r4
 800c486:	f7ff f87f 	bl	800b588 <memcpy>
 800c48a:	4631      	mov	r1, r6
 800c48c:	4638      	mov	r0, r7
 800c48e:	f7ff fd4f 	bl	800bf30 <_free_r>
 800c492:	e7e9      	b.n	800c468 <_realloc_r+0x1c>
 800c494:	4635      	mov	r5, r6
 800c496:	e7e7      	b.n	800c468 <_realloc_r+0x1c>

0800c498 <__sfputc_r>:
 800c498:	6893      	ldr	r3, [r2, #8]
 800c49a:	b410      	push	{r4}
 800c49c:	3b01      	subs	r3, #1
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	6093      	str	r3, [r2, #8]
 800c4a2:	da07      	bge.n	800c4b4 <__sfputc_r+0x1c>
 800c4a4:	6994      	ldr	r4, [r2, #24]
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	db01      	blt.n	800c4ae <__sfputc_r+0x16>
 800c4aa:	290a      	cmp	r1, #10
 800c4ac:	d102      	bne.n	800c4b4 <__sfputc_r+0x1c>
 800c4ae:	bc10      	pop	{r4}
 800c4b0:	f000 b94a 	b.w	800c748 <__swbuf_r>
 800c4b4:	6813      	ldr	r3, [r2, #0]
 800c4b6:	1c58      	adds	r0, r3, #1
 800c4b8:	6010      	str	r0, [r2, #0]
 800c4ba:	7019      	strb	r1, [r3, #0]
 800c4bc:	4608      	mov	r0, r1
 800c4be:	bc10      	pop	{r4}
 800c4c0:	4770      	bx	lr

0800c4c2 <__sfputs_r>:
 800c4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	460f      	mov	r7, r1
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	18d5      	adds	r5, r2, r3
 800c4cc:	42ac      	cmp	r4, r5
 800c4ce:	d101      	bne.n	800c4d4 <__sfputs_r+0x12>
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e007      	b.n	800c4e4 <__sfputs_r+0x22>
 800c4d4:	463a      	mov	r2, r7
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	f7ff ffdc 	bl	800c498 <__sfputc_r>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d1f3      	bne.n	800c4cc <__sfputs_r+0xa>
 800c4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4e8 <_vfiprintf_r>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	4614      	mov	r4, r2
 800c4f0:	4698      	mov	r8, r3
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	b09d      	sub	sp, #116	; 0x74
 800c4f6:	b118      	cbz	r0, 800c500 <_vfiprintf_r+0x18>
 800c4f8:	6983      	ldr	r3, [r0, #24]
 800c4fa:	b90b      	cbnz	r3, 800c500 <_vfiprintf_r+0x18>
 800c4fc:	f000 fb06 	bl	800cb0c <__sinit>
 800c500:	4b89      	ldr	r3, [pc, #548]	; (800c728 <_vfiprintf_r+0x240>)
 800c502:	429d      	cmp	r5, r3
 800c504:	d11b      	bne.n	800c53e <_vfiprintf_r+0x56>
 800c506:	6875      	ldr	r5, [r6, #4]
 800c508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c50a:	07d9      	lsls	r1, r3, #31
 800c50c:	d405      	bmi.n	800c51a <_vfiprintf_r+0x32>
 800c50e:	89ab      	ldrh	r3, [r5, #12]
 800c510:	059a      	lsls	r2, r3, #22
 800c512:	d402      	bmi.n	800c51a <_vfiprintf_r+0x32>
 800c514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c516:	f000 fb97 	bl	800cc48 <__retarget_lock_acquire_recursive>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	071b      	lsls	r3, r3, #28
 800c51e:	d501      	bpl.n	800c524 <_vfiprintf_r+0x3c>
 800c520:	692b      	ldr	r3, [r5, #16]
 800c522:	b9eb      	cbnz	r3, 800c560 <_vfiprintf_r+0x78>
 800c524:	4629      	mov	r1, r5
 800c526:	4630      	mov	r0, r6
 800c528:	f000 f960 	bl	800c7ec <__swsetup_r>
 800c52c:	b1c0      	cbz	r0, 800c560 <_vfiprintf_r+0x78>
 800c52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c530:	07dc      	lsls	r4, r3, #31
 800c532:	d50e      	bpl.n	800c552 <_vfiprintf_r+0x6a>
 800c534:	f04f 30ff 	mov.w	r0, #4294967295
 800c538:	b01d      	add	sp, #116	; 0x74
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	4b7b      	ldr	r3, [pc, #492]	; (800c72c <_vfiprintf_r+0x244>)
 800c540:	429d      	cmp	r5, r3
 800c542:	d101      	bne.n	800c548 <_vfiprintf_r+0x60>
 800c544:	68b5      	ldr	r5, [r6, #8]
 800c546:	e7df      	b.n	800c508 <_vfiprintf_r+0x20>
 800c548:	4b79      	ldr	r3, [pc, #484]	; (800c730 <_vfiprintf_r+0x248>)
 800c54a:	429d      	cmp	r5, r3
 800c54c:	bf08      	it	eq
 800c54e:	68f5      	ldreq	r5, [r6, #12]
 800c550:	e7da      	b.n	800c508 <_vfiprintf_r+0x20>
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	0598      	lsls	r0, r3, #22
 800c556:	d4ed      	bmi.n	800c534 <_vfiprintf_r+0x4c>
 800c558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c55a:	f000 fb76 	bl	800cc4a <__retarget_lock_release_recursive>
 800c55e:	e7e9      	b.n	800c534 <_vfiprintf_r+0x4c>
 800c560:	2300      	movs	r3, #0
 800c562:	9309      	str	r3, [sp, #36]	; 0x24
 800c564:	2320      	movs	r3, #32
 800c566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c56a:	2330      	movs	r3, #48	; 0x30
 800c56c:	f04f 0901 	mov.w	r9, #1
 800c570:	f8cd 800c 	str.w	r8, [sp, #12]
 800c574:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c734 <_vfiprintf_r+0x24c>
 800c578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c57c:	4623      	mov	r3, r4
 800c57e:	469a      	mov	sl, r3
 800c580:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c584:	b10a      	cbz	r2, 800c58a <_vfiprintf_r+0xa2>
 800c586:	2a25      	cmp	r2, #37	; 0x25
 800c588:	d1f9      	bne.n	800c57e <_vfiprintf_r+0x96>
 800c58a:	ebba 0b04 	subs.w	fp, sl, r4
 800c58e:	d00b      	beq.n	800c5a8 <_vfiprintf_r+0xc0>
 800c590:	465b      	mov	r3, fp
 800c592:	4622      	mov	r2, r4
 800c594:	4629      	mov	r1, r5
 800c596:	4630      	mov	r0, r6
 800c598:	f7ff ff93 	bl	800c4c2 <__sfputs_r>
 800c59c:	3001      	adds	r0, #1
 800c59e:	f000 80aa 	beq.w	800c6f6 <_vfiprintf_r+0x20e>
 800c5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5a4:	445a      	add	r2, fp
 800c5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f000 80a2 	beq.w	800c6f6 <_vfiprintf_r+0x20e>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5bc:	f10a 0a01 	add.w	sl, sl, #1
 800c5c0:	9304      	str	r3, [sp, #16]
 800c5c2:	9307      	str	r3, [sp, #28]
 800c5c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ca:	4654      	mov	r4, sl
 800c5cc:	2205      	movs	r2, #5
 800c5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d2:	4858      	ldr	r0, [pc, #352]	; (800c734 <_vfiprintf_r+0x24c>)
 800c5d4:	f7fe ffca 	bl	800b56c <memchr>
 800c5d8:	9a04      	ldr	r2, [sp, #16]
 800c5da:	b9d8      	cbnz	r0, 800c614 <_vfiprintf_r+0x12c>
 800c5dc:	06d1      	lsls	r1, r2, #27
 800c5de:	bf44      	itt	mi
 800c5e0:	2320      	movmi	r3, #32
 800c5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5e6:	0713      	lsls	r3, r2, #28
 800c5e8:	bf44      	itt	mi
 800c5ea:	232b      	movmi	r3, #43	; 0x2b
 800c5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5f6:	d015      	beq.n	800c624 <_vfiprintf_r+0x13c>
 800c5f8:	4654      	mov	r4, sl
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	f04f 0c0a 	mov.w	ip, #10
 800c600:	9a07      	ldr	r2, [sp, #28]
 800c602:	4621      	mov	r1, r4
 800c604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c608:	3b30      	subs	r3, #48	; 0x30
 800c60a:	2b09      	cmp	r3, #9
 800c60c:	d94e      	bls.n	800c6ac <_vfiprintf_r+0x1c4>
 800c60e:	b1b0      	cbz	r0, 800c63e <_vfiprintf_r+0x156>
 800c610:	9207      	str	r2, [sp, #28]
 800c612:	e014      	b.n	800c63e <_vfiprintf_r+0x156>
 800c614:	eba0 0308 	sub.w	r3, r0, r8
 800c618:	fa09 f303 	lsl.w	r3, r9, r3
 800c61c:	4313      	orrs	r3, r2
 800c61e:	46a2      	mov	sl, r4
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	e7d2      	b.n	800c5ca <_vfiprintf_r+0xe2>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	1d19      	adds	r1, r3, #4
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	9103      	str	r1, [sp, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	bfbb      	ittet	lt
 800c630:	425b      	neglt	r3, r3
 800c632:	f042 0202 	orrlt.w	r2, r2, #2
 800c636:	9307      	strge	r3, [sp, #28]
 800c638:	9307      	strlt	r3, [sp, #28]
 800c63a:	bfb8      	it	lt
 800c63c:	9204      	strlt	r2, [sp, #16]
 800c63e:	7823      	ldrb	r3, [r4, #0]
 800c640:	2b2e      	cmp	r3, #46	; 0x2e
 800c642:	d10c      	bne.n	800c65e <_vfiprintf_r+0x176>
 800c644:	7863      	ldrb	r3, [r4, #1]
 800c646:	2b2a      	cmp	r3, #42	; 0x2a
 800c648:	d135      	bne.n	800c6b6 <_vfiprintf_r+0x1ce>
 800c64a:	9b03      	ldr	r3, [sp, #12]
 800c64c:	3402      	adds	r4, #2
 800c64e:	1d1a      	adds	r2, r3, #4
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	9203      	str	r2, [sp, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bfb8      	it	lt
 800c658:	f04f 33ff 	movlt.w	r3, #4294967295
 800c65c:	9305      	str	r3, [sp, #20]
 800c65e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c744 <_vfiprintf_r+0x25c>
 800c662:	2203      	movs	r2, #3
 800c664:	4650      	mov	r0, sl
 800c666:	7821      	ldrb	r1, [r4, #0]
 800c668:	f7fe ff80 	bl	800b56c <memchr>
 800c66c:	b140      	cbz	r0, 800c680 <_vfiprintf_r+0x198>
 800c66e:	2340      	movs	r3, #64	; 0x40
 800c670:	eba0 000a 	sub.w	r0, r0, sl
 800c674:	fa03 f000 	lsl.w	r0, r3, r0
 800c678:	9b04      	ldr	r3, [sp, #16]
 800c67a:	3401      	adds	r4, #1
 800c67c:	4303      	orrs	r3, r0
 800c67e:	9304      	str	r3, [sp, #16]
 800c680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c684:	2206      	movs	r2, #6
 800c686:	482c      	ldr	r0, [pc, #176]	; (800c738 <_vfiprintf_r+0x250>)
 800c688:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c68c:	f7fe ff6e 	bl	800b56c <memchr>
 800c690:	2800      	cmp	r0, #0
 800c692:	d03f      	beq.n	800c714 <_vfiprintf_r+0x22c>
 800c694:	4b29      	ldr	r3, [pc, #164]	; (800c73c <_vfiprintf_r+0x254>)
 800c696:	bb1b      	cbnz	r3, 800c6e0 <_vfiprintf_r+0x1f8>
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	3307      	adds	r3, #7
 800c69c:	f023 0307 	bic.w	r3, r3, #7
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	9303      	str	r3, [sp, #12]
 800c6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a6:	443b      	add	r3, r7
 800c6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6aa:	e767      	b.n	800c57c <_vfiprintf_r+0x94>
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6b4:	e7a5      	b.n	800c602 <_vfiprintf_r+0x11a>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f04f 0c0a 	mov.w	ip, #10
 800c6bc:	4619      	mov	r1, r3
 800c6be:	3401      	adds	r4, #1
 800c6c0:	9305      	str	r3, [sp, #20]
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6c8:	3a30      	subs	r2, #48	; 0x30
 800c6ca:	2a09      	cmp	r2, #9
 800c6cc:	d903      	bls.n	800c6d6 <_vfiprintf_r+0x1ee>
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0c5      	beq.n	800c65e <_vfiprintf_r+0x176>
 800c6d2:	9105      	str	r1, [sp, #20]
 800c6d4:	e7c3      	b.n	800c65e <_vfiprintf_r+0x176>
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	2301      	movs	r3, #1
 800c6da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6de:	e7f0      	b.n	800c6c2 <_vfiprintf_r+0x1da>
 800c6e0:	ab03      	add	r3, sp, #12
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	462a      	mov	r2, r5
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4b15      	ldr	r3, [pc, #84]	; (800c740 <_vfiprintf_r+0x258>)
 800c6ea:	a904      	add	r1, sp, #16
 800c6ec:	f7fc f858 	bl	80087a0 <_printf_float>
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	1c78      	adds	r0, r7, #1
 800c6f4:	d1d6      	bne.n	800c6a4 <_vfiprintf_r+0x1bc>
 800c6f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f8:	07d9      	lsls	r1, r3, #31
 800c6fa:	d405      	bmi.n	800c708 <_vfiprintf_r+0x220>
 800c6fc:	89ab      	ldrh	r3, [r5, #12]
 800c6fe:	059a      	lsls	r2, r3, #22
 800c700:	d402      	bmi.n	800c708 <_vfiprintf_r+0x220>
 800c702:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c704:	f000 faa1 	bl	800cc4a <__retarget_lock_release_recursive>
 800c708:	89ab      	ldrh	r3, [r5, #12]
 800c70a:	065b      	lsls	r3, r3, #25
 800c70c:	f53f af12 	bmi.w	800c534 <_vfiprintf_r+0x4c>
 800c710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c712:	e711      	b.n	800c538 <_vfiprintf_r+0x50>
 800c714:	ab03      	add	r3, sp, #12
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	4630      	mov	r0, r6
 800c71c:	4b08      	ldr	r3, [pc, #32]	; (800c740 <_vfiprintf_r+0x258>)
 800c71e:	a904      	add	r1, sp, #16
 800c720:	f7fc fada 	bl	8008cd8 <_printf_i>
 800c724:	e7e4      	b.n	800c6f0 <_vfiprintf_r+0x208>
 800c726:	bf00      	nop
 800c728:	0800d7bc 	.word	0x0800d7bc
 800c72c:	0800d7dc 	.word	0x0800d7dc
 800c730:	0800d79c 	.word	0x0800d79c
 800c734:	0800d74c 	.word	0x0800d74c
 800c738:	0800d756 	.word	0x0800d756
 800c73c:	080087a1 	.word	0x080087a1
 800c740:	0800c4c3 	.word	0x0800c4c3
 800c744:	0800d752 	.word	0x0800d752

0800c748 <__swbuf_r>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	460e      	mov	r6, r1
 800c74c:	4614      	mov	r4, r2
 800c74e:	4605      	mov	r5, r0
 800c750:	b118      	cbz	r0, 800c75a <__swbuf_r+0x12>
 800c752:	6983      	ldr	r3, [r0, #24]
 800c754:	b90b      	cbnz	r3, 800c75a <__swbuf_r+0x12>
 800c756:	f000 f9d9 	bl	800cb0c <__sinit>
 800c75a:	4b21      	ldr	r3, [pc, #132]	; (800c7e0 <__swbuf_r+0x98>)
 800c75c:	429c      	cmp	r4, r3
 800c75e:	d12b      	bne.n	800c7b8 <__swbuf_r+0x70>
 800c760:	686c      	ldr	r4, [r5, #4]
 800c762:	69a3      	ldr	r3, [r4, #24]
 800c764:	60a3      	str	r3, [r4, #8]
 800c766:	89a3      	ldrh	r3, [r4, #12]
 800c768:	071a      	lsls	r2, r3, #28
 800c76a:	d52f      	bpl.n	800c7cc <__swbuf_r+0x84>
 800c76c:	6923      	ldr	r3, [r4, #16]
 800c76e:	b36b      	cbz	r3, 800c7cc <__swbuf_r+0x84>
 800c770:	6923      	ldr	r3, [r4, #16]
 800c772:	6820      	ldr	r0, [r4, #0]
 800c774:	b2f6      	uxtb	r6, r6
 800c776:	1ac0      	subs	r0, r0, r3
 800c778:	6963      	ldr	r3, [r4, #20]
 800c77a:	4637      	mov	r7, r6
 800c77c:	4283      	cmp	r3, r0
 800c77e:	dc04      	bgt.n	800c78a <__swbuf_r+0x42>
 800c780:	4621      	mov	r1, r4
 800c782:	4628      	mov	r0, r5
 800c784:	f000 f92e 	bl	800c9e4 <_fflush_r>
 800c788:	bb30      	cbnz	r0, 800c7d8 <__swbuf_r+0x90>
 800c78a:	68a3      	ldr	r3, [r4, #8]
 800c78c:	3001      	adds	r0, #1
 800c78e:	3b01      	subs	r3, #1
 800c790:	60a3      	str	r3, [r4, #8]
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	6022      	str	r2, [r4, #0]
 800c798:	701e      	strb	r6, [r3, #0]
 800c79a:	6963      	ldr	r3, [r4, #20]
 800c79c:	4283      	cmp	r3, r0
 800c79e:	d004      	beq.n	800c7aa <__swbuf_r+0x62>
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	07db      	lsls	r3, r3, #31
 800c7a4:	d506      	bpl.n	800c7b4 <__swbuf_r+0x6c>
 800c7a6:	2e0a      	cmp	r6, #10
 800c7a8:	d104      	bne.n	800c7b4 <__swbuf_r+0x6c>
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f000 f919 	bl	800c9e4 <_fflush_r>
 800c7b2:	b988      	cbnz	r0, 800c7d8 <__swbuf_r+0x90>
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b8:	4b0a      	ldr	r3, [pc, #40]	; (800c7e4 <__swbuf_r+0x9c>)
 800c7ba:	429c      	cmp	r4, r3
 800c7bc:	d101      	bne.n	800c7c2 <__swbuf_r+0x7a>
 800c7be:	68ac      	ldr	r4, [r5, #8]
 800c7c0:	e7cf      	b.n	800c762 <__swbuf_r+0x1a>
 800c7c2:	4b09      	ldr	r3, [pc, #36]	; (800c7e8 <__swbuf_r+0xa0>)
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	bf08      	it	eq
 800c7c8:	68ec      	ldreq	r4, [r5, #12]
 800c7ca:	e7ca      	b.n	800c762 <__swbuf_r+0x1a>
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f000 f80c 	bl	800c7ec <__swsetup_r>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d0cb      	beq.n	800c770 <__swbuf_r+0x28>
 800c7d8:	f04f 37ff 	mov.w	r7, #4294967295
 800c7dc:	e7ea      	b.n	800c7b4 <__swbuf_r+0x6c>
 800c7de:	bf00      	nop
 800c7e0:	0800d7bc 	.word	0x0800d7bc
 800c7e4:	0800d7dc 	.word	0x0800d7dc
 800c7e8:	0800d79c 	.word	0x0800d79c

0800c7ec <__swsetup_r>:
 800c7ec:	4b32      	ldr	r3, [pc, #200]	; (800c8b8 <__swsetup_r+0xcc>)
 800c7ee:	b570      	push	{r4, r5, r6, lr}
 800c7f0:	681d      	ldr	r5, [r3, #0]
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	b125      	cbz	r5, 800c802 <__swsetup_r+0x16>
 800c7f8:	69ab      	ldr	r3, [r5, #24]
 800c7fa:	b913      	cbnz	r3, 800c802 <__swsetup_r+0x16>
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 f985 	bl	800cb0c <__sinit>
 800c802:	4b2e      	ldr	r3, [pc, #184]	; (800c8bc <__swsetup_r+0xd0>)
 800c804:	429c      	cmp	r4, r3
 800c806:	d10f      	bne.n	800c828 <__swsetup_r+0x3c>
 800c808:	686c      	ldr	r4, [r5, #4]
 800c80a:	89a3      	ldrh	r3, [r4, #12]
 800c80c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c810:	0719      	lsls	r1, r3, #28
 800c812:	d42c      	bmi.n	800c86e <__swsetup_r+0x82>
 800c814:	06dd      	lsls	r5, r3, #27
 800c816:	d411      	bmi.n	800c83c <__swsetup_r+0x50>
 800c818:	2309      	movs	r3, #9
 800c81a:	6033      	str	r3, [r6, #0]
 800c81c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	81a3      	strh	r3, [r4, #12]
 800c826:	e03e      	b.n	800c8a6 <__swsetup_r+0xba>
 800c828:	4b25      	ldr	r3, [pc, #148]	; (800c8c0 <__swsetup_r+0xd4>)
 800c82a:	429c      	cmp	r4, r3
 800c82c:	d101      	bne.n	800c832 <__swsetup_r+0x46>
 800c82e:	68ac      	ldr	r4, [r5, #8]
 800c830:	e7eb      	b.n	800c80a <__swsetup_r+0x1e>
 800c832:	4b24      	ldr	r3, [pc, #144]	; (800c8c4 <__swsetup_r+0xd8>)
 800c834:	429c      	cmp	r4, r3
 800c836:	bf08      	it	eq
 800c838:	68ec      	ldreq	r4, [r5, #12]
 800c83a:	e7e6      	b.n	800c80a <__swsetup_r+0x1e>
 800c83c:	0758      	lsls	r0, r3, #29
 800c83e:	d512      	bpl.n	800c866 <__swsetup_r+0x7a>
 800c840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c842:	b141      	cbz	r1, 800c856 <__swsetup_r+0x6a>
 800c844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c848:	4299      	cmp	r1, r3
 800c84a:	d002      	beq.n	800c852 <__swsetup_r+0x66>
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7ff fb6f 	bl	800bf30 <_free_r>
 800c852:	2300      	movs	r3, #0
 800c854:	6363      	str	r3, [r4, #52]	; 0x34
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	2300      	movs	r3, #0
 800c860:	6063      	str	r3, [r4, #4]
 800c862:	6923      	ldr	r3, [r4, #16]
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	f043 0308 	orr.w	r3, r3, #8
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	6923      	ldr	r3, [r4, #16]
 800c870:	b94b      	cbnz	r3, 800c886 <__swsetup_r+0x9a>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c87c:	d003      	beq.n	800c886 <__swsetup_r+0x9a>
 800c87e:	4621      	mov	r1, r4
 800c880:	4630      	mov	r0, r6
 800c882:	f000 fa07 	bl	800cc94 <__smakebuf_r>
 800c886:	89a0      	ldrh	r0, [r4, #12]
 800c888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c88c:	f010 0301 	ands.w	r3, r0, #1
 800c890:	d00a      	beq.n	800c8a8 <__swsetup_r+0xbc>
 800c892:	2300      	movs	r3, #0
 800c894:	60a3      	str	r3, [r4, #8]
 800c896:	6963      	ldr	r3, [r4, #20]
 800c898:	425b      	negs	r3, r3
 800c89a:	61a3      	str	r3, [r4, #24]
 800c89c:	6923      	ldr	r3, [r4, #16]
 800c89e:	b943      	cbnz	r3, 800c8b2 <__swsetup_r+0xc6>
 800c8a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8a4:	d1ba      	bne.n	800c81c <__swsetup_r+0x30>
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	0781      	lsls	r1, r0, #30
 800c8aa:	bf58      	it	pl
 800c8ac:	6963      	ldrpl	r3, [r4, #20]
 800c8ae:	60a3      	str	r3, [r4, #8]
 800c8b0:	e7f4      	b.n	800c89c <__swsetup_r+0xb0>
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	e7f7      	b.n	800c8a6 <__swsetup_r+0xba>
 800c8b6:	bf00      	nop
 800c8b8:	2000000c 	.word	0x2000000c
 800c8bc:	0800d7bc 	.word	0x0800d7bc
 800c8c0:	0800d7dc 	.word	0x0800d7dc
 800c8c4:	0800d79c 	.word	0x0800d79c

0800c8c8 <abort>:
 800c8c8:	2006      	movs	r0, #6
 800c8ca:	b508      	push	{r3, lr}
 800c8cc:	f000 fa52 	bl	800cd74 <raise>
 800c8d0:	2001      	movs	r0, #1
 800c8d2:	f7f5 ff62 	bl	800279a <_exit>
	...

0800c8d8 <__sflush_r>:
 800c8d8:	898a      	ldrh	r2, [r1, #12]
 800c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	4605      	mov	r5, r0
 800c8e0:	0710      	lsls	r0, r2, #28
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	d458      	bmi.n	800c998 <__sflush_r+0xc0>
 800c8e6:	684b      	ldr	r3, [r1, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dc05      	bgt.n	800c8f8 <__sflush_r+0x20>
 800c8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	dc02      	bgt.n	800c8f8 <__sflush_r+0x20>
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8fa:	2e00      	cmp	r6, #0
 800c8fc:	d0f9      	beq.n	800c8f2 <__sflush_r+0x1a>
 800c8fe:	2300      	movs	r3, #0
 800c900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c904:	682f      	ldr	r7, [r5, #0]
 800c906:	602b      	str	r3, [r5, #0]
 800c908:	d032      	beq.n	800c970 <__sflush_r+0x98>
 800c90a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	075a      	lsls	r2, r3, #29
 800c910:	d505      	bpl.n	800c91e <__sflush_r+0x46>
 800c912:	6863      	ldr	r3, [r4, #4]
 800c914:	1ac0      	subs	r0, r0, r3
 800c916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c918:	b10b      	cbz	r3, 800c91e <__sflush_r+0x46>
 800c91a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c91c:	1ac0      	subs	r0, r0, r3
 800c91e:	2300      	movs	r3, #0
 800c920:	4602      	mov	r2, r0
 800c922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c924:	4628      	mov	r0, r5
 800c926:	6a21      	ldr	r1, [r4, #32]
 800c928:	47b0      	blx	r6
 800c92a:	1c43      	adds	r3, r0, #1
 800c92c:	89a3      	ldrh	r3, [r4, #12]
 800c92e:	d106      	bne.n	800c93e <__sflush_r+0x66>
 800c930:	6829      	ldr	r1, [r5, #0]
 800c932:	291d      	cmp	r1, #29
 800c934:	d82c      	bhi.n	800c990 <__sflush_r+0xb8>
 800c936:	4a2a      	ldr	r2, [pc, #168]	; (800c9e0 <__sflush_r+0x108>)
 800c938:	40ca      	lsrs	r2, r1
 800c93a:	07d6      	lsls	r6, r2, #31
 800c93c:	d528      	bpl.n	800c990 <__sflush_r+0xb8>
 800c93e:	2200      	movs	r2, #0
 800c940:	6062      	str	r2, [r4, #4]
 800c942:	6922      	ldr	r2, [r4, #16]
 800c944:	04d9      	lsls	r1, r3, #19
 800c946:	6022      	str	r2, [r4, #0]
 800c948:	d504      	bpl.n	800c954 <__sflush_r+0x7c>
 800c94a:	1c42      	adds	r2, r0, #1
 800c94c:	d101      	bne.n	800c952 <__sflush_r+0x7a>
 800c94e:	682b      	ldr	r3, [r5, #0]
 800c950:	b903      	cbnz	r3, 800c954 <__sflush_r+0x7c>
 800c952:	6560      	str	r0, [r4, #84]	; 0x54
 800c954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c956:	602f      	str	r7, [r5, #0]
 800c958:	2900      	cmp	r1, #0
 800c95a:	d0ca      	beq.n	800c8f2 <__sflush_r+0x1a>
 800c95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c960:	4299      	cmp	r1, r3
 800c962:	d002      	beq.n	800c96a <__sflush_r+0x92>
 800c964:	4628      	mov	r0, r5
 800c966:	f7ff fae3 	bl	800bf30 <_free_r>
 800c96a:	2000      	movs	r0, #0
 800c96c:	6360      	str	r0, [r4, #52]	; 0x34
 800c96e:	e7c1      	b.n	800c8f4 <__sflush_r+0x1c>
 800c970:	6a21      	ldr	r1, [r4, #32]
 800c972:	2301      	movs	r3, #1
 800c974:	4628      	mov	r0, r5
 800c976:	47b0      	blx	r6
 800c978:	1c41      	adds	r1, r0, #1
 800c97a:	d1c7      	bne.n	800c90c <__sflush_r+0x34>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0c4      	beq.n	800c90c <__sflush_r+0x34>
 800c982:	2b1d      	cmp	r3, #29
 800c984:	d001      	beq.n	800c98a <__sflush_r+0xb2>
 800c986:	2b16      	cmp	r3, #22
 800c988:	d101      	bne.n	800c98e <__sflush_r+0xb6>
 800c98a:	602f      	str	r7, [r5, #0]
 800c98c:	e7b1      	b.n	800c8f2 <__sflush_r+0x1a>
 800c98e:	89a3      	ldrh	r3, [r4, #12]
 800c990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c994:	81a3      	strh	r3, [r4, #12]
 800c996:	e7ad      	b.n	800c8f4 <__sflush_r+0x1c>
 800c998:	690f      	ldr	r7, [r1, #16]
 800c99a:	2f00      	cmp	r7, #0
 800c99c:	d0a9      	beq.n	800c8f2 <__sflush_r+0x1a>
 800c99e:	0793      	lsls	r3, r2, #30
 800c9a0:	bf18      	it	ne
 800c9a2:	2300      	movne	r3, #0
 800c9a4:	680e      	ldr	r6, [r1, #0]
 800c9a6:	bf08      	it	eq
 800c9a8:	694b      	ldreq	r3, [r1, #20]
 800c9aa:	eba6 0807 	sub.w	r8, r6, r7
 800c9ae:	600f      	str	r7, [r1, #0]
 800c9b0:	608b      	str	r3, [r1, #8]
 800c9b2:	f1b8 0f00 	cmp.w	r8, #0
 800c9b6:	dd9c      	ble.n	800c8f2 <__sflush_r+0x1a>
 800c9b8:	4643      	mov	r3, r8
 800c9ba:	463a      	mov	r2, r7
 800c9bc:	4628      	mov	r0, r5
 800c9be:	6a21      	ldr	r1, [r4, #32]
 800c9c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9c2:	47b0      	blx	r6
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	dc06      	bgt.n	800c9d6 <__sflush_r+0xfe>
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d2:	81a3      	strh	r3, [r4, #12]
 800c9d4:	e78e      	b.n	800c8f4 <__sflush_r+0x1c>
 800c9d6:	4407      	add	r7, r0
 800c9d8:	eba8 0800 	sub.w	r8, r8, r0
 800c9dc:	e7e9      	b.n	800c9b2 <__sflush_r+0xda>
 800c9de:	bf00      	nop
 800c9e0:	20400001 	.word	0x20400001

0800c9e4 <_fflush_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	690b      	ldr	r3, [r1, #16]
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	b913      	cbnz	r3, 800c9f4 <_fflush_r+0x10>
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	b118      	cbz	r0, 800c9fe <_fflush_r+0x1a>
 800c9f6:	6983      	ldr	r3, [r0, #24]
 800c9f8:	b90b      	cbnz	r3, 800c9fe <_fflush_r+0x1a>
 800c9fa:	f000 f887 	bl	800cb0c <__sinit>
 800c9fe:	4b14      	ldr	r3, [pc, #80]	; (800ca50 <_fflush_r+0x6c>)
 800ca00:	429c      	cmp	r4, r3
 800ca02:	d11b      	bne.n	800ca3c <_fflush_r+0x58>
 800ca04:	686c      	ldr	r4, [r5, #4]
 800ca06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d0ef      	beq.n	800c9ee <_fflush_r+0xa>
 800ca0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca10:	07d0      	lsls	r0, r2, #31
 800ca12:	d404      	bmi.n	800ca1e <_fflush_r+0x3a>
 800ca14:	0599      	lsls	r1, r3, #22
 800ca16:	d402      	bmi.n	800ca1e <_fflush_r+0x3a>
 800ca18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca1a:	f000 f915 	bl	800cc48 <__retarget_lock_acquire_recursive>
 800ca1e:	4628      	mov	r0, r5
 800ca20:	4621      	mov	r1, r4
 800ca22:	f7ff ff59 	bl	800c8d8 <__sflush_r>
 800ca26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca28:	4605      	mov	r5, r0
 800ca2a:	07da      	lsls	r2, r3, #31
 800ca2c:	d4e0      	bmi.n	800c9f0 <_fflush_r+0xc>
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	059b      	lsls	r3, r3, #22
 800ca32:	d4dd      	bmi.n	800c9f0 <_fflush_r+0xc>
 800ca34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca36:	f000 f908 	bl	800cc4a <__retarget_lock_release_recursive>
 800ca3a:	e7d9      	b.n	800c9f0 <_fflush_r+0xc>
 800ca3c:	4b05      	ldr	r3, [pc, #20]	; (800ca54 <_fflush_r+0x70>)
 800ca3e:	429c      	cmp	r4, r3
 800ca40:	d101      	bne.n	800ca46 <_fflush_r+0x62>
 800ca42:	68ac      	ldr	r4, [r5, #8]
 800ca44:	e7df      	b.n	800ca06 <_fflush_r+0x22>
 800ca46:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <_fflush_r+0x74>)
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	bf08      	it	eq
 800ca4c:	68ec      	ldreq	r4, [r5, #12]
 800ca4e:	e7da      	b.n	800ca06 <_fflush_r+0x22>
 800ca50:	0800d7bc 	.word	0x0800d7bc
 800ca54:	0800d7dc 	.word	0x0800d7dc
 800ca58:	0800d79c 	.word	0x0800d79c

0800ca5c <std>:
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	4604      	mov	r4, r0
 800ca62:	e9c0 3300 	strd	r3, r3, [r0]
 800ca66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca6a:	6083      	str	r3, [r0, #8]
 800ca6c:	8181      	strh	r1, [r0, #12]
 800ca6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ca70:	81c2      	strh	r2, [r0, #14]
 800ca72:	6183      	str	r3, [r0, #24]
 800ca74:	4619      	mov	r1, r3
 800ca76:	2208      	movs	r2, #8
 800ca78:	305c      	adds	r0, #92	; 0x5c
 800ca7a:	f7fb fdeb 	bl	8008654 <memset>
 800ca7e:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <std+0x38>)
 800ca80:	6224      	str	r4, [r4, #32]
 800ca82:	6263      	str	r3, [r4, #36]	; 0x24
 800ca84:	4b04      	ldr	r3, [pc, #16]	; (800ca98 <std+0x3c>)
 800ca86:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca88:	4b04      	ldr	r3, [pc, #16]	; (800ca9c <std+0x40>)
 800ca8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca8c:	4b04      	ldr	r3, [pc, #16]	; (800caa0 <std+0x44>)
 800ca8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ca90:	bd10      	pop	{r4, pc}
 800ca92:	bf00      	nop
 800ca94:	0800cdad 	.word	0x0800cdad
 800ca98:	0800cdcf 	.word	0x0800cdcf
 800ca9c:	0800ce07 	.word	0x0800ce07
 800caa0:	0800ce2b 	.word	0x0800ce2b

0800caa4 <_cleanup_r>:
 800caa4:	4901      	ldr	r1, [pc, #4]	; (800caac <_cleanup_r+0x8>)
 800caa6:	f000 b8af 	b.w	800cc08 <_fwalk_reent>
 800caaa:	bf00      	nop
 800caac:	0800c9e5 	.word	0x0800c9e5

0800cab0 <__sfmoreglue>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	2568      	movs	r5, #104	; 0x68
 800cab4:	1e4a      	subs	r2, r1, #1
 800cab6:	4355      	muls	r5, r2
 800cab8:	460e      	mov	r6, r1
 800caba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cabe:	f7ff fa83 	bl	800bfc8 <_malloc_r>
 800cac2:	4604      	mov	r4, r0
 800cac4:	b140      	cbz	r0, 800cad8 <__sfmoreglue+0x28>
 800cac6:	2100      	movs	r1, #0
 800cac8:	e9c0 1600 	strd	r1, r6, [r0]
 800cacc:	300c      	adds	r0, #12
 800cace:	60a0      	str	r0, [r4, #8]
 800cad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cad4:	f7fb fdbe 	bl	8008654 <memset>
 800cad8:	4620      	mov	r0, r4
 800cada:	bd70      	pop	{r4, r5, r6, pc}

0800cadc <__sfp_lock_acquire>:
 800cadc:	4801      	ldr	r0, [pc, #4]	; (800cae4 <__sfp_lock_acquire+0x8>)
 800cade:	f000 b8b3 	b.w	800cc48 <__retarget_lock_acquire_recursive>
 800cae2:	bf00      	nop
 800cae4:	200003ac 	.word	0x200003ac

0800cae8 <__sfp_lock_release>:
 800cae8:	4801      	ldr	r0, [pc, #4]	; (800caf0 <__sfp_lock_release+0x8>)
 800caea:	f000 b8ae 	b.w	800cc4a <__retarget_lock_release_recursive>
 800caee:	bf00      	nop
 800caf0:	200003ac 	.word	0x200003ac

0800caf4 <__sinit_lock_acquire>:
 800caf4:	4801      	ldr	r0, [pc, #4]	; (800cafc <__sinit_lock_acquire+0x8>)
 800caf6:	f000 b8a7 	b.w	800cc48 <__retarget_lock_acquire_recursive>
 800cafa:	bf00      	nop
 800cafc:	200003a7 	.word	0x200003a7

0800cb00 <__sinit_lock_release>:
 800cb00:	4801      	ldr	r0, [pc, #4]	; (800cb08 <__sinit_lock_release+0x8>)
 800cb02:	f000 b8a2 	b.w	800cc4a <__retarget_lock_release_recursive>
 800cb06:	bf00      	nop
 800cb08:	200003a7 	.word	0x200003a7

0800cb0c <__sinit>:
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	4604      	mov	r4, r0
 800cb10:	f7ff fff0 	bl	800caf4 <__sinit_lock_acquire>
 800cb14:	69a3      	ldr	r3, [r4, #24]
 800cb16:	b11b      	cbz	r3, 800cb20 <__sinit+0x14>
 800cb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb1c:	f7ff bff0 	b.w	800cb00 <__sinit_lock_release>
 800cb20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb24:	6523      	str	r3, [r4, #80]	; 0x50
 800cb26:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <__sinit+0x68>)
 800cb28:	4a13      	ldr	r2, [pc, #76]	; (800cb78 <__sinit+0x6c>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb2e:	42a3      	cmp	r3, r4
 800cb30:	bf08      	it	eq
 800cb32:	2301      	moveq	r3, #1
 800cb34:	4620      	mov	r0, r4
 800cb36:	bf08      	it	eq
 800cb38:	61a3      	streq	r3, [r4, #24]
 800cb3a:	f000 f81f 	bl	800cb7c <__sfp>
 800cb3e:	6060      	str	r0, [r4, #4]
 800cb40:	4620      	mov	r0, r4
 800cb42:	f000 f81b 	bl	800cb7c <__sfp>
 800cb46:	60a0      	str	r0, [r4, #8]
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 f817 	bl	800cb7c <__sfp>
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2104      	movs	r1, #4
 800cb52:	60e0      	str	r0, [r4, #12]
 800cb54:	6860      	ldr	r0, [r4, #4]
 800cb56:	f7ff ff81 	bl	800ca5c <std>
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	2109      	movs	r1, #9
 800cb5e:	68a0      	ldr	r0, [r4, #8]
 800cb60:	f7ff ff7c 	bl	800ca5c <std>
 800cb64:	2202      	movs	r2, #2
 800cb66:	2112      	movs	r1, #18
 800cb68:	68e0      	ldr	r0, [r4, #12]
 800cb6a:	f7ff ff77 	bl	800ca5c <std>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	61a3      	str	r3, [r4, #24]
 800cb72:	e7d1      	b.n	800cb18 <__sinit+0xc>
 800cb74:	0800d344 	.word	0x0800d344
 800cb78:	0800caa5 	.word	0x0800caa5

0800cb7c <__sfp>:
 800cb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7e:	4607      	mov	r7, r0
 800cb80:	f7ff ffac 	bl	800cadc <__sfp_lock_acquire>
 800cb84:	4b1e      	ldr	r3, [pc, #120]	; (800cc00 <__sfp+0x84>)
 800cb86:	681e      	ldr	r6, [r3, #0]
 800cb88:	69b3      	ldr	r3, [r6, #24]
 800cb8a:	b913      	cbnz	r3, 800cb92 <__sfp+0x16>
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7ff ffbd 	bl	800cb0c <__sinit>
 800cb92:	3648      	adds	r6, #72	; 0x48
 800cb94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	d503      	bpl.n	800cba4 <__sfp+0x28>
 800cb9c:	6833      	ldr	r3, [r6, #0]
 800cb9e:	b30b      	cbz	r3, 800cbe4 <__sfp+0x68>
 800cba0:	6836      	ldr	r6, [r6, #0]
 800cba2:	e7f7      	b.n	800cb94 <__sfp+0x18>
 800cba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cba8:	b9d5      	cbnz	r5, 800cbe0 <__sfp+0x64>
 800cbaa:	4b16      	ldr	r3, [pc, #88]	; (800cc04 <__sfp+0x88>)
 800cbac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbb0:	60e3      	str	r3, [r4, #12]
 800cbb2:	6665      	str	r5, [r4, #100]	; 0x64
 800cbb4:	f000 f847 	bl	800cc46 <__retarget_lock_init_recursive>
 800cbb8:	f7ff ff96 	bl	800cae8 <__sfp_lock_release>
 800cbbc:	2208      	movs	r2, #8
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbc8:	6025      	str	r5, [r4, #0]
 800cbca:	61a5      	str	r5, [r4, #24]
 800cbcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbd0:	f7fb fd40 	bl	8008654 <memset>
 800cbd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbdc:	4620      	mov	r0, r4
 800cbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe0:	3468      	adds	r4, #104	; 0x68
 800cbe2:	e7d9      	b.n	800cb98 <__sfp+0x1c>
 800cbe4:	2104      	movs	r1, #4
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	f7ff ff62 	bl	800cab0 <__sfmoreglue>
 800cbec:	4604      	mov	r4, r0
 800cbee:	6030      	str	r0, [r6, #0]
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d1d5      	bne.n	800cba0 <__sfp+0x24>
 800cbf4:	f7ff ff78 	bl	800cae8 <__sfp_lock_release>
 800cbf8:	230c      	movs	r3, #12
 800cbfa:	603b      	str	r3, [r7, #0]
 800cbfc:	e7ee      	b.n	800cbdc <__sfp+0x60>
 800cbfe:	bf00      	nop
 800cc00:	0800d344 	.word	0x0800d344
 800cc04:	ffff0001 	.word	0xffff0001

0800cc08 <_fwalk_reent>:
 800cc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	4606      	mov	r6, r0
 800cc0e:	4688      	mov	r8, r1
 800cc10:	2700      	movs	r7, #0
 800cc12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc1a:	f1b9 0901 	subs.w	r9, r9, #1
 800cc1e:	d505      	bpl.n	800cc2c <_fwalk_reent+0x24>
 800cc20:	6824      	ldr	r4, [r4, #0]
 800cc22:	2c00      	cmp	r4, #0
 800cc24:	d1f7      	bne.n	800cc16 <_fwalk_reent+0xe>
 800cc26:	4638      	mov	r0, r7
 800cc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2c:	89ab      	ldrh	r3, [r5, #12]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d907      	bls.n	800cc42 <_fwalk_reent+0x3a>
 800cc32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc36:	3301      	adds	r3, #1
 800cc38:	d003      	beq.n	800cc42 <_fwalk_reent+0x3a>
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	47c0      	blx	r8
 800cc40:	4307      	orrs	r7, r0
 800cc42:	3568      	adds	r5, #104	; 0x68
 800cc44:	e7e9      	b.n	800cc1a <_fwalk_reent+0x12>

0800cc46 <__retarget_lock_init_recursive>:
 800cc46:	4770      	bx	lr

0800cc48 <__retarget_lock_acquire_recursive>:
 800cc48:	4770      	bx	lr

0800cc4a <__retarget_lock_release_recursive>:
 800cc4a:	4770      	bx	lr

0800cc4c <__swhatbuf_r>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	460e      	mov	r6, r1
 800cc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc54:	4614      	mov	r4, r2
 800cc56:	2900      	cmp	r1, #0
 800cc58:	461d      	mov	r5, r3
 800cc5a:	b096      	sub	sp, #88	; 0x58
 800cc5c:	da07      	bge.n	800cc6e <__swhatbuf_r+0x22>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	602b      	str	r3, [r5, #0]
 800cc62:	89b3      	ldrh	r3, [r6, #12]
 800cc64:	061a      	lsls	r2, r3, #24
 800cc66:	d410      	bmi.n	800cc8a <__swhatbuf_r+0x3e>
 800cc68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc6c:	e00e      	b.n	800cc8c <__swhatbuf_r+0x40>
 800cc6e:	466a      	mov	r2, sp
 800cc70:	f000 f902 	bl	800ce78 <_fstat_r>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	dbf2      	blt.n	800cc5e <__swhatbuf_r+0x12>
 800cc78:	9a01      	ldr	r2, [sp, #4]
 800cc7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc82:	425a      	negs	r2, r3
 800cc84:	415a      	adcs	r2, r3
 800cc86:	602a      	str	r2, [r5, #0]
 800cc88:	e7ee      	b.n	800cc68 <__swhatbuf_r+0x1c>
 800cc8a:	2340      	movs	r3, #64	; 0x40
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	6023      	str	r3, [r4, #0]
 800cc90:	b016      	add	sp, #88	; 0x58
 800cc92:	bd70      	pop	{r4, r5, r6, pc}

0800cc94 <__smakebuf_r>:
 800cc94:	898b      	ldrh	r3, [r1, #12]
 800cc96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc98:	079d      	lsls	r5, r3, #30
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	d507      	bpl.n	800ccb0 <__smakebuf_r+0x1c>
 800cca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	6123      	str	r3, [r4, #16]
 800cca8:	2301      	movs	r3, #1
 800ccaa:	6163      	str	r3, [r4, #20]
 800ccac:	b002      	add	sp, #8
 800ccae:	bd70      	pop	{r4, r5, r6, pc}
 800ccb0:	466a      	mov	r2, sp
 800ccb2:	ab01      	add	r3, sp, #4
 800ccb4:	f7ff ffca 	bl	800cc4c <__swhatbuf_r>
 800ccb8:	9900      	ldr	r1, [sp, #0]
 800ccba:	4605      	mov	r5, r0
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	f7ff f983 	bl	800bfc8 <_malloc_r>
 800ccc2:	b948      	cbnz	r0, 800ccd8 <__smakebuf_r+0x44>
 800ccc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc8:	059a      	lsls	r2, r3, #22
 800ccca:	d4ef      	bmi.n	800ccac <__smakebuf_r+0x18>
 800cccc:	f023 0303 	bic.w	r3, r3, #3
 800ccd0:	f043 0302 	orr.w	r3, r3, #2
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	e7e3      	b.n	800cca0 <__smakebuf_r+0xc>
 800ccd8:	4b0d      	ldr	r3, [pc, #52]	; (800cd10 <__smakebuf_r+0x7c>)
 800ccda:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	6020      	str	r0, [r4, #0]
 800cce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce4:	81a3      	strh	r3, [r4, #12]
 800cce6:	9b00      	ldr	r3, [sp, #0]
 800cce8:	6120      	str	r0, [r4, #16]
 800ccea:	6163      	str	r3, [r4, #20]
 800ccec:	9b01      	ldr	r3, [sp, #4]
 800ccee:	b15b      	cbz	r3, 800cd08 <__smakebuf_r+0x74>
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccf6:	f000 f8d1 	bl	800ce9c <_isatty_r>
 800ccfa:	b128      	cbz	r0, 800cd08 <__smakebuf_r+0x74>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	f023 0303 	bic.w	r3, r3, #3
 800cd02:	f043 0301 	orr.w	r3, r3, #1
 800cd06:	81a3      	strh	r3, [r4, #12]
 800cd08:	89a0      	ldrh	r0, [r4, #12]
 800cd0a:	4305      	orrs	r5, r0
 800cd0c:	81a5      	strh	r5, [r4, #12]
 800cd0e:	e7cd      	b.n	800ccac <__smakebuf_r+0x18>
 800cd10:	0800caa5 	.word	0x0800caa5

0800cd14 <_malloc_usable_size_r>:
 800cd14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd18:	1f18      	subs	r0, r3, #4
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	bfbc      	itt	lt
 800cd1e:	580b      	ldrlt	r3, [r1, r0]
 800cd20:	18c0      	addlt	r0, r0, r3
 800cd22:	4770      	bx	lr

0800cd24 <_raise_r>:
 800cd24:	291f      	cmp	r1, #31
 800cd26:	b538      	push	{r3, r4, r5, lr}
 800cd28:	4604      	mov	r4, r0
 800cd2a:	460d      	mov	r5, r1
 800cd2c:	d904      	bls.n	800cd38 <_raise_r+0x14>
 800cd2e:	2316      	movs	r3, #22
 800cd30:	6003      	str	r3, [r0, #0]
 800cd32:	f04f 30ff 	mov.w	r0, #4294967295
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd3a:	b112      	cbz	r2, 800cd42 <_raise_r+0x1e>
 800cd3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd40:	b94b      	cbnz	r3, 800cd56 <_raise_r+0x32>
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 f830 	bl	800cda8 <_getpid_r>
 800cd48:	462a      	mov	r2, r5
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd52:	f000 b817 	b.w	800cd84 <_kill_r>
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d00a      	beq.n	800cd70 <_raise_r+0x4c>
 800cd5a:	1c59      	adds	r1, r3, #1
 800cd5c:	d103      	bne.n	800cd66 <_raise_r+0x42>
 800cd5e:	2316      	movs	r3, #22
 800cd60:	6003      	str	r3, [r0, #0]
 800cd62:	2001      	movs	r0, #1
 800cd64:	e7e7      	b.n	800cd36 <_raise_r+0x12>
 800cd66:	2400      	movs	r4, #0
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd6e:	4798      	blx	r3
 800cd70:	2000      	movs	r0, #0
 800cd72:	e7e0      	b.n	800cd36 <_raise_r+0x12>

0800cd74 <raise>:
 800cd74:	4b02      	ldr	r3, [pc, #8]	; (800cd80 <raise+0xc>)
 800cd76:	4601      	mov	r1, r0
 800cd78:	6818      	ldr	r0, [r3, #0]
 800cd7a:	f7ff bfd3 	b.w	800cd24 <_raise_r>
 800cd7e:	bf00      	nop
 800cd80:	2000000c 	.word	0x2000000c

0800cd84 <_kill_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	2300      	movs	r3, #0
 800cd88:	4d06      	ldr	r5, [pc, #24]	; (800cda4 <_kill_r+0x20>)
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	f7f5 fcf2 	bl	800277a <_kill>
 800cd96:	1c43      	adds	r3, r0, #1
 800cd98:	d102      	bne.n	800cda0 <_kill_r+0x1c>
 800cd9a:	682b      	ldr	r3, [r5, #0]
 800cd9c:	b103      	cbz	r3, 800cda0 <_kill_r+0x1c>
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	bd38      	pop	{r3, r4, r5, pc}
 800cda2:	bf00      	nop
 800cda4:	200003a0 	.word	0x200003a0

0800cda8 <_getpid_r>:
 800cda8:	f7f5 bce0 	b.w	800276c <_getpid>

0800cdac <__sread>:
 800cdac:	b510      	push	{r4, lr}
 800cdae:	460c      	mov	r4, r1
 800cdb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb4:	f000 f894 	bl	800cee0 <_read_r>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	bfab      	itete	ge
 800cdbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdbe:	89a3      	ldrhlt	r3, [r4, #12]
 800cdc0:	181b      	addge	r3, r3, r0
 800cdc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdc6:	bfac      	ite	ge
 800cdc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdca:	81a3      	strhlt	r3, [r4, #12]
 800cdcc:	bd10      	pop	{r4, pc}

0800cdce <__swrite>:
 800cdce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd2:	461f      	mov	r7, r3
 800cdd4:	898b      	ldrh	r3, [r1, #12]
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	05db      	lsls	r3, r3, #23
 800cdda:	460c      	mov	r4, r1
 800cddc:	4616      	mov	r6, r2
 800cdde:	d505      	bpl.n	800cdec <__swrite+0x1e>
 800cde0:	2302      	movs	r3, #2
 800cde2:	2200      	movs	r2, #0
 800cde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde8:	f000 f868 	bl	800cebc <_lseek_r>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	4632      	mov	r2, r6
 800cdf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdf4:	81a3      	strh	r3, [r4, #12]
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	463b      	mov	r3, r7
 800cdfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce02:	f000 b817 	b.w	800ce34 <_write_r>

0800ce06 <__sseek>:
 800ce06:	b510      	push	{r4, lr}
 800ce08:	460c      	mov	r4, r1
 800ce0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce0e:	f000 f855 	bl	800cebc <_lseek_r>
 800ce12:	1c43      	adds	r3, r0, #1
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	bf15      	itete	ne
 800ce18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce22:	81a3      	strheq	r3, [r4, #12]
 800ce24:	bf18      	it	ne
 800ce26:	81a3      	strhne	r3, [r4, #12]
 800ce28:	bd10      	pop	{r4, pc}

0800ce2a <__sclose>:
 800ce2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce2e:	f000 b813 	b.w	800ce58 <_close_r>
	...

0800ce34 <_write_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4604      	mov	r4, r0
 800ce38:	4608      	mov	r0, r1
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4d05      	ldr	r5, [pc, #20]	; (800ce54 <_write_r+0x20>)
 800ce40:	602a      	str	r2, [r5, #0]
 800ce42:	461a      	mov	r2, r3
 800ce44:	f7f5 fcd0 	bl	80027e8 <_write>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d102      	bne.n	800ce52 <_write_r+0x1e>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	b103      	cbz	r3, 800ce52 <_write_r+0x1e>
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	200003a0 	.word	0x200003a0

0800ce58 <_close_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	4d05      	ldr	r5, [pc, #20]	; (800ce74 <_close_r+0x1c>)
 800ce5e:	4604      	mov	r4, r0
 800ce60:	4608      	mov	r0, r1
 800ce62:	602b      	str	r3, [r5, #0]
 800ce64:	f7f5 fcdc 	bl	8002820 <_close>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d102      	bne.n	800ce72 <_close_r+0x1a>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	b103      	cbz	r3, 800ce72 <_close_r+0x1a>
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	200003a0 	.word	0x200003a0

0800ce78 <_fstat_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4d06      	ldr	r5, [pc, #24]	; (800ce98 <_fstat_r+0x20>)
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	4611      	mov	r1, r2
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	f7f5 fcd6 	bl	8002836 <_fstat>
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	d102      	bne.n	800ce94 <_fstat_r+0x1c>
 800ce8e:	682b      	ldr	r3, [r5, #0]
 800ce90:	b103      	cbz	r3, 800ce94 <_fstat_r+0x1c>
 800ce92:	6023      	str	r3, [r4, #0]
 800ce94:	bd38      	pop	{r3, r4, r5, pc}
 800ce96:	bf00      	nop
 800ce98:	200003a0 	.word	0x200003a0

0800ce9c <_isatty_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	2300      	movs	r3, #0
 800cea0:	4d05      	ldr	r5, [pc, #20]	; (800ceb8 <_isatty_r+0x1c>)
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	f7f5 fcd4 	bl	8002854 <_isatty>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_isatty_r+0x1a>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_isatty_r+0x1a>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	200003a0 	.word	0x200003a0

0800cebc <_lseek_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	4611      	mov	r1, r2
 800cec4:	2200      	movs	r2, #0
 800cec6:	4d05      	ldr	r5, [pc, #20]	; (800cedc <_lseek_r+0x20>)
 800cec8:	602a      	str	r2, [r5, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7f5 fccc 	bl	8002868 <_lseek>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_lseek_r+0x1e>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_lseek_r+0x1e>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	200003a0 	.word	0x200003a0

0800cee0 <_read_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	4611      	mov	r1, r2
 800cee8:	2200      	movs	r2, #0
 800ceea:	4d05      	ldr	r5, [pc, #20]	; (800cf00 <_read_r+0x20>)
 800ceec:	602a      	str	r2, [r5, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	f7f5 fc5d 	bl	80027ae <_read>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_read_r+0x1e>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_read_r+0x1e>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	200003a0 	.word	0x200003a0

0800cf04 <_init>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	bf00      	nop
 800cf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf0a:	bc08      	pop	{r3}
 800cf0c:	469e      	mov	lr, r3
 800cf0e:	4770      	bx	lr

0800cf10 <_fini>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	bf00      	nop
 800cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf16:	bc08      	pop	{r3}
 800cf18:	469e      	mov	lr, r3
 800cf1a:	4770      	bx	lr
