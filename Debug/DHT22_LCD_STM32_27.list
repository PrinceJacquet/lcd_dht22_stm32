
DHT22_LCD_STM32_27.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf8c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  0800d0d0  0800d0d0  0001d0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d96c  0800d96c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d96c  0800d96c  0001d96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d974  0800d974  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d974  0800d974  0001d974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d978  0800d978  0001d978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d97c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001e0  0800db5c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800db5c  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016277  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b2  00000000  00000000  00036480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197d2  00000000  00000000  0003b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b24  00000000  00000000  00054f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009663d  00000000  00000000  00069a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001000cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  00100120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d0b4 	.word	0x0800d0b4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800d0b4 	.word	0x0800d0b4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b9a6 	b.w	80014f0 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f83e 	bl	800122c <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__aeabi_d2lz>:
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	460c      	mov	r4, r1
 80011c0:	4605      	mov	r5, r0
 80011c2:	4621      	mov	r1, r4
 80011c4:	4628      	mov	r0, r5
 80011c6:	2200      	movs	r2, #0
 80011c8:	2300      	movs	r3, #0
 80011ca:	f7ff fc0f 	bl	80009ec <__aeabi_dcmplt>
 80011ce:	b928      	cbnz	r0, 80011dc <__aeabi_d2lz+0x20>
 80011d0:	4628      	mov	r0, r5
 80011d2:	4621      	mov	r1, r4
 80011d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d8:	f000 b80a 	b.w	80011f0 <__aeabi_d2ulz>
 80011dc:	4628      	mov	r0, r5
 80011de:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011e2:	f000 f805 	bl	80011f0 <__aeabi_d2ulz>
 80011e6:	4240      	negs	r0, r0
 80011e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011ec:	bd38      	pop	{r3, r4, r5, pc}
 80011ee:	bf00      	nop

080011f0 <__aeabi_d2ulz>:
 80011f0:	b5d0      	push	{r4, r6, r7, lr}
 80011f2:	2200      	movs	r2, #0
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <__aeabi_d2ulz+0x34>)
 80011f6:	4606      	mov	r6, r0
 80011f8:	460f      	mov	r7, r1
 80011fa:	f7ff f985 	bl	8000508 <__aeabi_dmul>
 80011fe:	f7ff fc5b 	bl	8000ab8 <__aeabi_d2uiz>
 8001202:	4604      	mov	r4, r0
 8001204:	f7ff f906 	bl	8000414 <__aeabi_ui2d>
 8001208:	2200      	movs	r2, #0
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <__aeabi_d2ulz+0x38>)
 800120c:	f7ff f97c 	bl	8000508 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4630      	mov	r0, r6
 8001216:	4639      	mov	r1, r7
 8001218:	f7fe ffbe 	bl	8000198 <__aeabi_dsub>
 800121c:	f7ff fc4c 	bl	8000ab8 <__aeabi_d2uiz>
 8001220:	4621      	mov	r1, r4
 8001222:	bdd0      	pop	{r4, r6, r7, pc}
 8001224:	3df00000 	.word	0x3df00000
 8001228:	41f00000 	.word	0x41f00000

0800122c <__udivmoddi4>:
 800122c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001230:	9e08      	ldr	r6, [sp, #32]
 8001232:	460d      	mov	r5, r1
 8001234:	4604      	mov	r4, r0
 8001236:	468e      	mov	lr, r1
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 8083 	bne.w	8001344 <__udivmoddi4+0x118>
 800123e:	428a      	cmp	r2, r1
 8001240:	4617      	mov	r7, r2
 8001242:	d947      	bls.n	80012d4 <__udivmoddi4+0xa8>
 8001244:	fab2 f382 	clz	r3, r2
 8001248:	b14b      	cbz	r3, 800125e <__udivmoddi4+0x32>
 800124a:	f1c3 0120 	rsb	r1, r3, #32
 800124e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001252:	fa20 f101 	lsr.w	r1, r0, r1
 8001256:	409f      	lsls	r7, r3
 8001258:	ea41 0e0e 	orr.w	lr, r1, lr
 800125c:	409c      	lsls	r4, r3
 800125e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001262:	fbbe fcf8 	udiv	ip, lr, r8
 8001266:	fa1f f987 	uxth.w	r9, r7
 800126a:	fb08 e21c 	mls	r2, r8, ip, lr
 800126e:	fb0c f009 	mul.w	r0, ip, r9
 8001272:	0c21      	lsrs	r1, r4, #16
 8001274:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001278:	4290      	cmp	r0, r2
 800127a:	d90a      	bls.n	8001292 <__udivmoddi4+0x66>
 800127c:	18ba      	adds	r2, r7, r2
 800127e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001282:	f080 8118 	bcs.w	80014b6 <__udivmoddi4+0x28a>
 8001286:	4290      	cmp	r0, r2
 8001288:	f240 8115 	bls.w	80014b6 <__udivmoddi4+0x28a>
 800128c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001290:	443a      	add	r2, r7
 8001292:	1a12      	subs	r2, r2, r0
 8001294:	fbb2 f0f8 	udiv	r0, r2, r8
 8001298:	fb08 2210 	mls	r2, r8, r0, r2
 800129c:	fb00 f109 	mul.w	r1, r0, r9
 80012a0:	b2a4      	uxth	r4, r4
 80012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012a6:	42a1      	cmp	r1, r4
 80012a8:	d909      	bls.n	80012be <__udivmoddi4+0x92>
 80012aa:	193c      	adds	r4, r7, r4
 80012ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80012b0:	f080 8103 	bcs.w	80014ba <__udivmoddi4+0x28e>
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	f240 8100 	bls.w	80014ba <__udivmoddi4+0x28e>
 80012ba:	3802      	subs	r0, #2
 80012bc:	443c      	add	r4, r7
 80012be:	1a64      	subs	r4, r4, r1
 80012c0:	2100      	movs	r1, #0
 80012c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012c6:	b11e      	cbz	r6, 80012d0 <__udivmoddi4+0xa4>
 80012c8:	2200      	movs	r2, #0
 80012ca:	40dc      	lsrs	r4, r3
 80012cc:	e9c6 4200 	strd	r4, r2, [r6]
 80012d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d4:	b902      	cbnz	r2, 80012d8 <__udivmoddi4+0xac>
 80012d6:	deff      	udf	#255	; 0xff
 80012d8:	fab2 f382 	clz	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d14f      	bne.n	8001380 <__udivmoddi4+0x154>
 80012e0:	1a8d      	subs	r5, r1, r2
 80012e2:	2101      	movs	r1, #1
 80012e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012e8:	fa1f f882 	uxth.w	r8, r2
 80012ec:	fbb5 fcfe 	udiv	ip, r5, lr
 80012f0:	fb0e 551c 	mls	r5, lr, ip, r5
 80012f4:	fb08 f00c 	mul.w	r0, r8, ip
 80012f8:	0c22      	lsrs	r2, r4, #16
 80012fa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012fe:	42a8      	cmp	r0, r5
 8001300:	d907      	bls.n	8001312 <__udivmoddi4+0xe6>
 8001302:	197d      	adds	r5, r7, r5
 8001304:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001308:	d202      	bcs.n	8001310 <__udivmoddi4+0xe4>
 800130a:	42a8      	cmp	r0, r5
 800130c:	f200 80e9 	bhi.w	80014e2 <__udivmoddi4+0x2b6>
 8001310:	4694      	mov	ip, r2
 8001312:	1a2d      	subs	r5, r5, r0
 8001314:	fbb5 f0fe 	udiv	r0, r5, lr
 8001318:	fb0e 5510 	mls	r5, lr, r0, r5
 800131c:	fb08 f800 	mul.w	r8, r8, r0
 8001320:	b2a4      	uxth	r4, r4
 8001322:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001326:	45a0      	cmp	r8, r4
 8001328:	d907      	bls.n	800133a <__udivmoddi4+0x10e>
 800132a:	193c      	adds	r4, r7, r4
 800132c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001330:	d202      	bcs.n	8001338 <__udivmoddi4+0x10c>
 8001332:	45a0      	cmp	r8, r4
 8001334:	f200 80d9 	bhi.w	80014ea <__udivmoddi4+0x2be>
 8001338:	4610      	mov	r0, r2
 800133a:	eba4 0408 	sub.w	r4, r4, r8
 800133e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001342:	e7c0      	b.n	80012c6 <__udivmoddi4+0x9a>
 8001344:	428b      	cmp	r3, r1
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x12e>
 8001348:	2e00      	cmp	r6, #0
 800134a:	f000 80b1 	beq.w	80014b0 <__udivmoddi4+0x284>
 800134e:	2100      	movs	r1, #0
 8001350:	e9c6 0500 	strd	r0, r5, [r6]
 8001354:	4608      	mov	r0, r1
 8001356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135a:	fab3 f183 	clz	r1, r3
 800135e:	2900      	cmp	r1, #0
 8001360:	d14b      	bne.n	80013fa <__udivmoddi4+0x1ce>
 8001362:	42ab      	cmp	r3, r5
 8001364:	d302      	bcc.n	800136c <__udivmoddi4+0x140>
 8001366:	4282      	cmp	r2, r0
 8001368:	f200 80b9 	bhi.w	80014de <__udivmoddi4+0x2b2>
 800136c:	1a84      	subs	r4, r0, r2
 800136e:	eb65 0303 	sbc.w	r3, r5, r3
 8001372:	2001      	movs	r0, #1
 8001374:	469e      	mov	lr, r3
 8001376:	2e00      	cmp	r6, #0
 8001378:	d0aa      	beq.n	80012d0 <__udivmoddi4+0xa4>
 800137a:	e9c6 4e00 	strd	r4, lr, [r6]
 800137e:	e7a7      	b.n	80012d0 <__udivmoddi4+0xa4>
 8001380:	409f      	lsls	r7, r3
 8001382:	f1c3 0220 	rsb	r2, r3, #32
 8001386:	40d1      	lsrs	r1, r2
 8001388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800138c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001390:	fa1f f887 	uxth.w	r8, r7
 8001394:	fb0e 1110 	mls	r1, lr, r0, r1
 8001398:	fa24 f202 	lsr.w	r2, r4, r2
 800139c:	409d      	lsls	r5, r3
 800139e:	fb00 fc08 	mul.w	ip, r0, r8
 80013a2:	432a      	orrs	r2, r5
 80013a4:	0c15      	lsrs	r5, r2, #16
 80013a6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013aa:	45ac      	cmp	ip, r5
 80013ac:	fa04 f403 	lsl.w	r4, r4, r3
 80013b0:	d909      	bls.n	80013c6 <__udivmoddi4+0x19a>
 80013b2:	197d      	adds	r5, r7, r5
 80013b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80013b8:	f080 808f 	bcs.w	80014da <__udivmoddi4+0x2ae>
 80013bc:	45ac      	cmp	ip, r5
 80013be:	f240 808c 	bls.w	80014da <__udivmoddi4+0x2ae>
 80013c2:	3802      	subs	r0, #2
 80013c4:	443d      	add	r5, r7
 80013c6:	eba5 050c 	sub.w	r5, r5, ip
 80013ca:	fbb5 f1fe 	udiv	r1, r5, lr
 80013ce:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013d2:	fb01 f908 	mul.w	r9, r1, r8
 80013d6:	b295      	uxth	r5, r2
 80013d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013dc:	45a9      	cmp	r9, r5
 80013de:	d907      	bls.n	80013f0 <__udivmoddi4+0x1c4>
 80013e0:	197d      	adds	r5, r7, r5
 80013e2:	f101 32ff 	add.w	r2, r1, #4294967295
 80013e6:	d274      	bcs.n	80014d2 <__udivmoddi4+0x2a6>
 80013e8:	45a9      	cmp	r9, r5
 80013ea:	d972      	bls.n	80014d2 <__udivmoddi4+0x2a6>
 80013ec:	3902      	subs	r1, #2
 80013ee:	443d      	add	r5, r7
 80013f0:	eba5 0509 	sub.w	r5, r5, r9
 80013f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f8:	e778      	b.n	80012ec <__udivmoddi4+0xc0>
 80013fa:	f1c1 0720 	rsb	r7, r1, #32
 80013fe:	408b      	lsls	r3, r1
 8001400:	fa22 fc07 	lsr.w	ip, r2, r7
 8001404:	ea4c 0c03 	orr.w	ip, ip, r3
 8001408:	fa25 f407 	lsr.w	r4, r5, r7
 800140c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001410:	fbb4 f9fe 	udiv	r9, r4, lr
 8001414:	fa1f f88c 	uxth.w	r8, ip
 8001418:	fb0e 4419 	mls	r4, lr, r9, r4
 800141c:	fa20 f307 	lsr.w	r3, r0, r7
 8001420:	fb09 fa08 	mul.w	sl, r9, r8
 8001424:	408d      	lsls	r5, r1
 8001426:	431d      	orrs	r5, r3
 8001428:	0c2b      	lsrs	r3, r5, #16
 800142a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800142e:	45a2      	cmp	sl, r4
 8001430:	fa02 f201 	lsl.w	r2, r2, r1
 8001434:	fa00 f301 	lsl.w	r3, r0, r1
 8001438:	d909      	bls.n	800144e <__udivmoddi4+0x222>
 800143a:	eb1c 0404 	adds.w	r4, ip, r4
 800143e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001442:	d248      	bcs.n	80014d6 <__udivmoddi4+0x2aa>
 8001444:	45a2      	cmp	sl, r4
 8001446:	d946      	bls.n	80014d6 <__udivmoddi4+0x2aa>
 8001448:	f1a9 0902 	sub.w	r9, r9, #2
 800144c:	4464      	add	r4, ip
 800144e:	eba4 040a 	sub.w	r4, r4, sl
 8001452:	fbb4 f0fe 	udiv	r0, r4, lr
 8001456:	fb0e 4410 	mls	r4, lr, r0, r4
 800145a:	fb00 fa08 	mul.w	sl, r0, r8
 800145e:	b2ad      	uxth	r5, r5
 8001460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001464:	45a2      	cmp	sl, r4
 8001466:	d908      	bls.n	800147a <__udivmoddi4+0x24e>
 8001468:	eb1c 0404 	adds.w	r4, ip, r4
 800146c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001470:	d22d      	bcs.n	80014ce <__udivmoddi4+0x2a2>
 8001472:	45a2      	cmp	sl, r4
 8001474:	d92b      	bls.n	80014ce <__udivmoddi4+0x2a2>
 8001476:	3802      	subs	r0, #2
 8001478:	4464      	add	r4, ip
 800147a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800147e:	fba0 8902 	umull	r8, r9, r0, r2
 8001482:	eba4 040a 	sub.w	r4, r4, sl
 8001486:	454c      	cmp	r4, r9
 8001488:	46c6      	mov	lr, r8
 800148a:	464d      	mov	r5, r9
 800148c:	d319      	bcc.n	80014c2 <__udivmoddi4+0x296>
 800148e:	d016      	beq.n	80014be <__udivmoddi4+0x292>
 8001490:	b15e      	cbz	r6, 80014aa <__udivmoddi4+0x27e>
 8001492:	ebb3 020e 	subs.w	r2, r3, lr
 8001496:	eb64 0405 	sbc.w	r4, r4, r5
 800149a:	fa04 f707 	lsl.w	r7, r4, r7
 800149e:	fa22 f301 	lsr.w	r3, r2, r1
 80014a2:	431f      	orrs	r7, r3
 80014a4:	40cc      	lsrs	r4, r1
 80014a6:	e9c6 7400 	strd	r7, r4, [r6]
 80014aa:	2100      	movs	r1, #0
 80014ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b0:	4631      	mov	r1, r6
 80014b2:	4630      	mov	r0, r6
 80014b4:	e70c      	b.n	80012d0 <__udivmoddi4+0xa4>
 80014b6:	468c      	mov	ip, r1
 80014b8:	e6eb      	b.n	8001292 <__udivmoddi4+0x66>
 80014ba:	4610      	mov	r0, r2
 80014bc:	e6ff      	b.n	80012be <__udivmoddi4+0x92>
 80014be:	4543      	cmp	r3, r8
 80014c0:	d2e6      	bcs.n	8001490 <__udivmoddi4+0x264>
 80014c2:	ebb8 0e02 	subs.w	lr, r8, r2
 80014c6:	eb69 050c 	sbc.w	r5, r9, ip
 80014ca:	3801      	subs	r0, #1
 80014cc:	e7e0      	b.n	8001490 <__udivmoddi4+0x264>
 80014ce:	4628      	mov	r0, r5
 80014d0:	e7d3      	b.n	800147a <__udivmoddi4+0x24e>
 80014d2:	4611      	mov	r1, r2
 80014d4:	e78c      	b.n	80013f0 <__udivmoddi4+0x1c4>
 80014d6:	4681      	mov	r9, r0
 80014d8:	e7b9      	b.n	800144e <__udivmoddi4+0x222>
 80014da:	4608      	mov	r0, r1
 80014dc:	e773      	b.n	80013c6 <__udivmoddi4+0x19a>
 80014de:	4608      	mov	r0, r1
 80014e0:	e749      	b.n	8001376 <__udivmoddi4+0x14a>
 80014e2:	f1ac 0c02 	sub.w	ip, ip, #2
 80014e6:	443d      	add	r5, r7
 80014e8:	e713      	b.n	8001312 <__udivmoddi4+0xe6>
 80014ea:	3802      	subs	r0, #2
 80014ec:	443c      	add	r4, r7
 80014ee:	e724      	b.n	800133a <__udivmoddi4+0x10e>

080014f0 <__aeabi_idiv0>:
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <DHT22_Init>:

static void set_sensor_pin_mode(uint8_t in);
static void timer_init(TIM_HandleTypeDef* _htim);

void DHT22_Init(TIM_HandleTypeDef* _htim, uint32_t _timer_clock_freq, GPIO_TypeDef* _SENSOR_GPIO_Port, uint8_t _SENSOR_Pin, IRQn_Type _SENSOR_EXTI_IRQn)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	70fb      	strb	r3, [r7, #3]
	DHT22._htim 			= _htim;
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <DHT22_Init+0x6c>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6013      	str	r3, [r2, #0]
	DHT22._tim_clock_freq 		= _timer_clock_freq;
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <DHT22_Init+0x6c>)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	6053      	str	r3, [r2, #4]
	DHT22._SENSOR_GPIO_Port = _SENSOR_GPIO_Port;
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <DHT22_Init+0x6c>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6093      	str	r3, [r2, #8]
	DHT22._SENSOR_Pin 		= _SENSOR_Pin;
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <DHT22_Init+0x6c>)
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	7313      	strb	r3, [r2, #12]
	DHT22._SENSOR_EXTI_IRQn = _SENSOR_EXTI_IRQn;
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <DHT22_Init+0x6c>)
 800151c:	7e3b      	ldrb	r3, [r7, #24]
 800151e:	7353      	strb	r3, [r2, #13]

	timer_init(DHT22._htim);
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <DHT22_Init+0x6c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f903 	bl	8001730 <timer_init>

	set_sensor_pin_mode(0);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f8be 	bl	80016ac <set_sensor_pin_mode>
	_SENSOR_EDGES = 0;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <DHT22_Init+0x70>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <DHT22_Init+0x6c>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <DHT22_Init+0x6c>)
 800153c:	7b12      	ldrb	r2, [r2, #12]
 800153e:	b291      	uxth	r1, r2
 8001540:	2201      	movs	r2, #1
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fe28 	bl	8004198 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001548:	200a      	movs	r0, #10
 800154a:	f001 fee7 	bl	800331c <HAL_Delay>
	HAL_TIM_Base_Start_IT(DHT22._htim);
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <DHT22_Init+0x6c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f006 f9d4 	bl	8007900 <HAL_TIM_Base_Start_IT>

}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000220 	.word	0x20000220
 8001564:	20000200 	.word	0x20000200

08001568 <DHT22_ReadData>:

DHT22_Data DHT22_ReadData()
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	DHT22_Data _DHT22_data;
	uint16_t RH, T;
	uint8_t check_sum;
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 0);
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <DHT22_ReadData+0x130>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <DHT22_ReadData+0x130>)
 8001576:	7b12      	ldrb	r2, [r2, #12]
 8001578:	b291      	uxth	r1, r2
 800157a:	2200      	movs	r2, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f002 fe0b 	bl	8004198 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001582:	2005      	movs	r0, #5
 8001584:	f001 feca 	bl	800331c <HAL_Delay>
	set_sensor_pin_mode(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f000 f88f 	bl	80016ac <set_sensor_pin_mode>

	while(_SENSOR_EDGES <1 + 3 + 2 * 40 + 2);
 800158e:	bf00      	nop
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <DHT22_ReadData+0x134>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b55      	cmp	r3, #85	; 0x55
 8001598:	d9fa      	bls.n	8001590 <DHT22_ReadData+0x28>

	set_sensor_pin_mode(0);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f886 	bl	80016ac <set_sensor_pin_mode>
	HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <DHT22_ReadData+0x130>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <DHT22_ReadData+0x130>)
 80015a6:	7b12      	ldrb	r2, [r2, #12]
 80015a8:	b291      	uxth	r1, r2
 80015aa:	2201      	movs	r2, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fdf3 	bl	8004198 <HAL_GPIO_WritePin>
 	_SENSOR_EDGES = 0;
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <DHT22_ReadData+0x134>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]

 	check_sum 	= data & 0xFF;
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <DHT22_ReadData+0x138>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	4613      	mov	r3, r2
 80015c0:	77fb      	strb	r3, [r7, #31]
 	T 			= (data >> 8) & 0xFFFF;
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <DHT22_ReadData+0x138>)
 80015c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	0a02      	lsrs	r2, r0, #8
 80015d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80015d6:	0a0b      	lsrs	r3, r1, #8
 80015d8:	4613      	mov	r3, r2
 80015da:	83bb      	strh	r3, [r7, #28]
 	RH 			= (data >> 24) & 0xFFFF;
 80015dc:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <DHT22_ReadData+0x138>)
 80015de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	0e02      	lsrs	r2, r0, #24
 80015ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015f0:	0e0b      	lsrs	r3, r1, #24
 80015f2:	4613      	mov	r3, r2
 80015f4:	837b      	strh	r3, [r7, #26]

 	_DHT22_data.check_sum 	= check_sum;
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	733b      	strb	r3, [r7, #12]
 	_DHT22_data.T 			= (float) (T & 0x7FFF) / 10.0;
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb83 	bl	8000d0c <__aeabi_i2f>
 8001606:	4603      	mov	r3, r0
 8001608:	4926      	ldr	r1, [pc, #152]	; (80016a4 <DHT22_ReadData+0x13c>)
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fc86 	bl	8000f1c <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	617b      	str	r3, [r7, #20]
 	_DHT22_data.T 		   *= (T & 0x8000) ? -1 : 1 ;
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da01      	bge.n	8001622 <DHT22_ReadData+0xba>
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <DHT22_ReadData+0x140>)
 8001620:	e001      	b.n	8001626 <DHT22_ReadData+0xbe>
 8001622:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fbc3 	bl	8000db4 <__aeabi_fmul>
 800162e:	4603      	mov	r3, r0
 8001630:	617b      	str	r3, [r7, #20]
 	_DHT22_data.RH 			= (float) RH / 10.0;
 8001632:	8b7b      	ldrh	r3, [r7, #26]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fb65 	bl	8000d04 <__aeabi_ui2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4919      	ldr	r1, [pc, #100]	; (80016a4 <DHT22_ReadData+0x13c>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc6c 	bl	8000f1c <__aeabi_fdiv>
 8001644:	4603      	mov	r3, r0
 8001646:	613b      	str	r3, [r7, #16]

 	uint8_t sum = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	767b      	strb	r3, [r7, #25]
 	sum = (T & 0xFF) + ((T >> 8) & 0xFF) + (RH & 0xFF) + ((RH >> 8) & 0xFF);
 800164c:	8bbb      	ldrh	r3, [r7, #28]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4413      	add	r3, r2
 800165a:	b2da      	uxtb	r2, r3
 800165c:	8b7b      	ldrh	r3, [r7, #26]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4413      	add	r3, r2
 8001662:	b2da      	uxtb	r2, r3
 8001664:	8b7b      	ldrh	r3, [r7, #26]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	b29b      	uxth	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4413      	add	r3, r2
 800166e:	767b      	strb	r3, [r7, #25]

 	_DHT22_data.is_data_valid = (sum == check_sum) ? 1 : 0;
 8001670:	7e7a      	ldrb	r2, [r7, #25]
 8001672:	7ffb      	ldrb	r3, [r7, #31]
 8001674:	429a      	cmp	r2, r3
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	737b      	strb	r3, [r7, #13]

 	return _DHT22_data;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	461c      	mov	r4, r3
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800168c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	3724      	adds	r7, #36	; 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	20000220 	.word	0x20000220
 800169c:	20000200 	.word	0x20000200
 80016a0:	20000208 	.word	0x20000208
 80016a4:	41200000 	.word	0x41200000
 80016a8:	bf800000 	.word	0xbf800000

080016ac <set_sensor_pin_mode>:


static void set_sensor_pin_mode(uint8_t in){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DHT22._SENSOR_Pin;
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <set_sensor_pin_mode+0x78>)
 80016c8:	7b1b      	ldrb	r3, [r3, #12]
 80016ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]

	if(in) 	{
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d008      	beq.n	80016e8 <set_sensor_pin_mode+0x3c>
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <set_sensor_pin_mode+0x7c>)
 80016d8:	613b      	str	r3, [r7, #16]
		HAL_NVIC_EnableIRQ(DHT22._SENSOR_EXTI_IRQn);
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <set_sensor_pin_mode+0x78>)
 80016dc:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fb52 	bl	8003d8a <HAL_NVIC_EnableIRQ>
 80016e6:	e010      	b.n	800170a <set_sensor_pin_mode+0x5e>
	}
	else 	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
		HAL_GPIO_WritePin(DHT22._SENSOR_GPIO_Port, DHT22._SENSOR_Pin, 1);
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <set_sensor_pin_mode+0x78>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <set_sensor_pin_mode+0x78>)
 80016f2:	7b12      	ldrb	r2, [r2, #12]
 80016f4:	b291      	uxth	r1, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fd4d 	bl	8004198 <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(DHT22._SENSOR_EXTI_IRQn);
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <set_sensor_pin_mode+0x78>)
 8001700:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fb4e 	bl	8003da6 <HAL_NVIC_DisableIRQ>
	}

	HAL_GPIO_Init(DHT22._SENSOR_GPIO_Port, &GPIO_InitStruct);
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <set_sensor_pin_mode+0x78>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f107 020c 	add.w	r2, r7, #12
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fbaf 	bl	8003e78 <HAL_GPIO_Init>

}
 800171a:	bf00      	nop
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000220 	.word	0x20000220
 8001728:	10310000 	.word	0x10310000
 800172c:	00000000 	.word	0x00000000

08001730 <timer_init>:


static void timer_init(TIM_HandleTypeDef* _htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
  _htim->Init.Prescaler = DHT22._tim_clock_freq/1e6-1;
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <timer_init+0xa0>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe64 	bl	8000414 <__aeabi_ui2d>
 800174c:	a31e      	add	r3, pc, #120	; (adr r3, 80017c8 <timer_init+0x98>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7ff f803 	bl	800075c <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <timer_init+0xa4>)
 8001764:	f7fe fd18 	bl	8000198 <__aeabi_dsub>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff f9a2 	bl	8000ab8 <__aeabi_d2uiz>
 8001774:	4602      	mov	r2, r0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	605a      	str	r2, [r3, #4]
  _htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  _htim->Init.Period = 10-1;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2209      	movs	r2, #9
 8001784:	60da      	str	r2, [r3, #12]
  _htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(_htim) != HAL_OK)
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f006 f877 	bl	8007880 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <timer_init+0x6c>
  {
    Error_Handler();
 8001798:	f001 f810 	bl	80027bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(_htim, &sMasterConfig) != HAL_OK)
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f006 fa6a 	bl	8007c84 <HAL_TIMEx_MasterConfigSynchronization>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <timer_init+0x8a>
  {
    Error_Handler();
 80017b6:	f001 f801 	bl	80027bc <Error_Handler>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	00000000 	.word	0x00000000
 80017cc:	412e8480 	.word	0x412e8480
 80017d0:	20000220 	.word	0x20000220
 80017d4:	3ff00000 	.word	0x3ff00000

080017d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == DHT22._htim->Instance)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d104      	bne.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		_TIM_TIC++;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017f6:	6013      	str	r3, [r2, #0]
	}
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000220 	.word	0x20000220
 8001808:	200001fc 	.word	0x200001fc

0800180c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800180c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	4601      	mov	r1, r0
 8001816:	80f9      	strh	r1, [r7, #6]
	if(GPIO_Pin == DHT22._SENSOR_Pin)
 8001818:	492d      	ldr	r1, [pc, #180]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800181a:	7b09      	ldrb	r1, [r1, #12]
 800181c:	b289      	uxth	r1, r1
 800181e:	88f8      	ldrh	r0, [r7, #6]
 8001820:	4288      	cmp	r0, r1
 8001822:	d14f      	bne.n	80018c4 <HAL_GPIO_EXTI_Callback+0xb8>
	{
		static uint8_t sensor_0_1 = 0;
		_SENSOR_EDGES++;
 8001824:	492b      	ldr	r1, [pc, #172]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001826:	7809      	ldrb	r1, [r1, #0]
 8001828:	b2c9      	uxtb	r1, r1
 800182a:	3101      	adds	r1, #1
 800182c:	b2c8      	uxtb	r0, r1
 800182e:	4929      	ldr	r1, [pc, #164]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001830:	7008      	strb	r0, [r1, #0]

		if(_SENSOR_EDGES < 4 + 1);
 8001832:	4928      	ldr	r1, [pc, #160]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001834:	7809      	ldrb	r1, [r1, #0]
 8001836:	b2c9      	uxtb	r1, r1
 8001838:	2904      	cmp	r1, #4
 800183a:	d943      	bls.n	80018c4 <HAL_GPIO_EXTI_Callback+0xb8>
		else if(_SENSOR_EDGES < 1 + 3 + 2 * 40 + 1)
 800183c:	4925      	ldr	r1, [pc, #148]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 800183e:	7809      	ldrb	r1, [r1, #0]
 8001840:	b2c9      	uxtb	r1, r1
 8001842:	2954      	cmp	r1, #84	; 0x54
 8001844:	d83e      	bhi.n	80018c4 <HAL_GPIO_EXTI_Callback+0xb8>
		{
			if(_SENSOR_EDGES == 4 + 1){
 8001846:	4923      	ldr	r1, [pc, #140]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001848:	7809      	ldrb	r1, [r1, #0]
 800184a:	b2c9      	uxtb	r1, r1
 800184c:	2905      	cmp	r1, #5
 800184e:	d10a      	bne.n	8001866 <HAL_GPIO_EXTI_Callback+0x5a>
				sensor_0_1 = 0;
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
				data = 0;
 8001856:	4921      	ldr	r1, [pc, #132]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd0>)
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9c1 2300 	strd	r2, r3, [r1]
				data = data << 1;
			}
		}
	}

}
 8001864:	e02e      	b.n	80018c4 <HAL_GPIO_EXTI_Callback+0xb8>
			else if(_SENSOR_EDGES % 2 == 0) {
 8001866:	491b      	ldr	r1, [pc, #108]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001868:	7809      	ldrb	r1, [r1, #0]
 800186a:	b2c9      	uxtb	r1, r1
 800186c:	f001 0101 	and.w	r1, r1, #1
 8001870:	b2c9      	uxtb	r1, r1
 8001872:	2900      	cmp	r1, #0
 8001874:	d103      	bne.n	800187e <HAL_GPIO_EXTI_Callback+0x72>
				_TIM_TIC = 0;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	e022      	b.n	80018c4 <HAL_GPIO_EXTI_Callback+0xb8>
				sensor_0_1 = _TIM_TIC;
 800187e:	4918      	ldr	r1, [pc, #96]	; (80018e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001880:	6809      	ldr	r1, [r1, #0]
 8001882:	b2c8      	uxtb	r0, r1
 8001884:	4914      	ldr	r1, [pc, #80]	; (80018d8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001886:	7008      	strb	r0, [r1, #0]
				if(sensor_0_1 > 6) data |= 1;
 8001888:	4913      	ldr	r1, [pc, #76]	; (80018d8 <HAL_GPIO_EXTI_Callback+0xcc>)
 800188a:	7809      	ldrb	r1, [r1, #0]
 800188c:	2906      	cmp	r1, #6
 800188e:	d90d      	bls.n	80018ac <HAL_GPIO_EXTI_Callback+0xa0>
 8001890:	4912      	ldr	r1, [pc, #72]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd0>)
 8001892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001896:	f04f 0401 	mov.w	r4, #1
 800189a:	f04f 0500 	mov.w	r5, #0
 800189e:	ea40 0204 	orr.w	r2, r0, r4
 80018a2:	ea41 0305 	orr.w	r3, r1, r5
 80018a6:	490d      	ldr	r1, [pc, #52]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd0>)
 80018a8:	e9c1 2300 	strd	r2, r3, [r1]
				data = data << 1;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	eb12 0802 	adds.w	r8, r2, r2
 80018b6:	eb43 0903 	adc.w	r9, r3, r3
 80018ba:	4642      	mov	r2, r8
 80018bc:	464b      	mov	r3, r9
 80018be:	4907      	ldr	r1, [pc, #28]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd0>)
 80018c0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80018ce:	4770      	bx	lr
 80018d0:	20000220 	.word	0x20000220
 80018d4:	20000200 	.word	0x20000200
 80018d8:	20000210 	.word	0x20000210
 80018dc:	20000208 	.word	0x20000208
 80018e0:	200001fc 	.word	0x200001fc

080018e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <MX_ADC_Init+0xa8>)
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <MX_ADC_Init+0xac>)
 80018f8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <MX_ADC_Init+0xa8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <MX_ADC_Init+0xa8>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_ADC_Init+0xa8>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_ADC_Init+0xa8>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <MX_ADC_Init+0xa8>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_ADC_Init+0xa8>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_ADC_Init+0xa8>)
 8001920:	2200      	movs	r2, #0
 8001922:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_ADC_Init+0xa8>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_ADC_Init+0xa8>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_ADC_Init+0xa8>)
 8001934:	2201      	movs	r2, #1
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_ADC_Init+0xa8>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_ADC_Init+0xa8>)
 8001942:	2210      	movs	r2, #16
 8001944:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_ADC_Init+0xa8>)
 8001948:	2200      	movs	r2, #0
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_ADC_Init+0xa8>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_ADC_Init+0xa8>)
 8001956:	f001 fd03 	bl	8003360 <HAL_ADC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001960:	f000 ff2c 	bl	80027bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001964:	2301      	movs	r3, #1
 8001966:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001968:	2301      	movs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_ADC_Init+0xa8>)
 8001976:	f001 ff2f 	bl	80037d8 <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001980:	f000 ff1c 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000230 	.word	0x20000230
 8001990:	40012400 	.word	0x40012400

08001994 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <HAL_ADC_MspInit+0x74>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d123      	bne.n	80019fe <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_ADC_MspInit+0x78>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <HAL_ADC_MspInit+0x78>)
 80019bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_ADC_MspInit+0x78>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_ADC_MspInit+0x78>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_ADC_MspInit+0x78>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_ADC_MspInit+0x78>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = HUM_SOL_Pin|WTR_LVL_Pin;
 80019e6:	2312      	movs	r3, #18
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ea:	2303      	movs	r3, #3
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_ADC_MspInit+0x7c>)
 80019fa:	f002 fa3d 	bl	8003e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012400 	.word	0x40012400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a3c      	ldr	r2, [pc, #240]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a2a      	ldr	r2, [pc, #168]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <MX_GPIO_Init+0x10c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POMPE_GPIO_Port, POMPE_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	4825      	ldr	r0, [pc, #148]	; (8001b24 <MX_GPIO_Init+0x110>)
 8001a90:	f002 fb82 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2120      	movs	r1, #32
 8001a98:	4823      	ldr	r0, [pc, #140]	; (8001b28 <MX_GPIO_Init+0x114>)
 8001a9a:	f002 fb7d 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <MX_GPIO_Init+0x118>)
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481c      	ldr	r0, [pc, #112]	; (8001b24 <MX_GPIO_Init+0x110>)
 8001ab4:	f002 f9e0 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POMPE_Pin;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(POMPE_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4815      	ldr	r0, [pc, #84]	; (8001b24 <MX_GPIO_Init+0x110>)
 8001ad0:	f002 f9d2 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT22_SENS_Pin;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_GPIO_Init+0x11c>)
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_SENS_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_GPIO_Init+0x114>)
 8001ae8:	f002 f9c6 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aec:	2320      	movs	r3, #32
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	4809      	ldr	r0, [pc, #36]	; (8001b28 <MX_GPIO_Init+0x114>)
 8001b04:	f002 f9b8 	bl	8003e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	f002 f920 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b12:	2006      	movs	r0, #6
 8001b14:	f002 f939 	bl	8003d8a <HAL_NVIC_EnableIRQ>

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	10110000 	.word	0x10110000
 8001b30:	10310000 	.word	0x10310000

08001b34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_I2C1_Init+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x58>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b72:	f002 fb5b 	bl	800422c <HAL_I2C_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b7c:	f000 fe1e 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000284 	.word	0x20000284
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_I2C_MspInit+0x9c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d138      	bne.n	8001c24 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_I2C_MspInit+0xa0>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <HAL_I2C_MspInit+0xa0>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_I2C_MspInit+0xa0>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd0:	2312      	movs	r3, #18
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4813      	ldr	r0, [pc, #76]	; (8001c34 <HAL_I2C_MspInit+0xa4>)
 8001be8:	f002 f946 	bl	8003e78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_I2C_MspInit+0xa0>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_I2C_MspInit+0xa0>)
 8001bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf6:	6253      	str	r3, [r2, #36]	; 0x24
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_I2C_MspInit+0xa0>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	201f      	movs	r0, #31
 8001c0a:	f002 f8a2 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c0e:	201f      	movs	r0, #31
 8001c10:	f002 f8bb 	bl	8003d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2020      	movs	r0, #32
 8001c1a:	f002 f89a 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c1e:	2020      	movs	r0, #32
 8001c20:	f002 f8b3 	bl	8003d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40005400 	.word	0x40005400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f043 030c 	orr.w	r3, r3, #12
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f043 0320 	orr.w	r3, r3, #32
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001c64:	f107 0118 	add.w	r1, r7, #24
 8001c68:	230a      	movs	r3, #10
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	486c      	ldr	r0, [pc, #432]	; (8001e20 <lcd_init+0x1e8>)
 8001c6e:	f006 f8b4 	bl	8007dda <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001c72:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001c76:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001c78:	f107 0114 	add.w	r1, r7, #20
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	2202      	movs	r2, #2
 8001c80:	4867      	ldr	r0, [pc, #412]	; (8001e20 <lcd_init+0x1e8>)
 8001c82:	f006 f8aa 	bl	8007dda <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001c86:	2364      	movs	r3, #100	; 0x64
 8001c88:	2205      	movs	r2, #5
 8001c8a:	217c      	movs	r1, #124	; 0x7c
 8001c8c:	69f8      	ldr	r0, [r7, #28]
 8001c8e:	f002 ff35 	bl	8004afc <HAL_I2C_IsDeviceReady>
 8001c92:	4603      	mov	r3, r0
 8001c94:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001c96:	f107 0113 	add.w	r1, r7, #19
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4860      	ldr	r0, [pc, #384]	; (8001e20 <lcd_init+0x1e8>)
 8001ca0:	f006 f89b 	bl	8007dda <HAL_UART_Transmit>
	HAL_Delay(50);
 8001ca4:	2032      	movs	r0, #50	; 0x32
 8001ca6:	f001 fb39 	bl	800331c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001caa:	f107 0218 	add.w	r2, r7, #24
 8001cae:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	217c      	movs	r1, #124	; 0x7c
 8001cb8:	69f8      	ldr	r0, [r7, #28]
 8001cba:	f002 fbfb 	bl	80044b4 <HAL_I2C_Master_Transmit>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001cc2:	f107 0112 	add.w	r1, r7, #18
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4855      	ldr	r0, [pc, #340]	; (8001e20 <lcd_init+0x1e8>)
 8001ccc:	f006 f885 	bl	8007dda <HAL_UART_Transmit>
	HAL_Delay(50);
 8001cd0:	2032      	movs	r0, #50	; 0x32
 8001cd2:	f001 fb23 	bl	800331c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001cd6:	f107 0218 	add.w	r2, r7, #24
 8001cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	217c      	movs	r1, #124	; 0x7c
 8001ce4:	69f8      	ldr	r0, [r7, #28]
 8001ce6:	f002 fbe5 	bl	80044b4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001cea:	2005      	movs	r0, #5
 8001cec:	f001 fb16 	bl	800331c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001cf0:	f107 0218 	add.w	r2, r7, #24
 8001cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	217c      	movs	r1, #124	; 0x7c
 8001cfe:	69f8      	ldr	r0, [r7, #28]
 8001d00:	f002 fbd8 	bl	80044b4 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2204      	movs	r2, #4
 8001d08:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	785b      	ldrb	r3, [r3, #1]
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8001d16:	f107 0218 	add.w	r2, r7, #24
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2302      	movs	r3, #2
 8001d22:	217c      	movs	r1, #124	; 0x7c
 8001d24:	69f8      	ldr	r0, [r7, #28]
 8001d26:	f002 fbc5 	bl	80044b4 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001d2e:	f107 0218 	add.w	r2, r7, #24
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	217c      	movs	r1, #124	; 0x7c
 8001d3c:	69f8      	ldr	r0, [r7, #28]
 8001d3e:	f002 fbb9 	bl	80044b4 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001d42:	2002      	movs	r0, #2
 8001d44:	f001 faea 	bl	800331c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001d5a:	f107 0218 	add.w	r2, r7, #24
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2302      	movs	r3, #2
 8001d66:	217c      	movs	r1, #124	; 0x7c
 8001d68:	69f8      	ldr	r0, [r7, #28]
 8001d6a:	f002 fba3 	bl	80044b4 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001d76:	f107 0210 	add.w	r2, r7, #16
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2302      	movs	r3, #2
 8001d82:	21c4      	movs	r1, #196	; 0xc4
 8001d84:	69f8      	ldr	r0, [r7, #28]
 8001d86:	f002 fb95 	bl	80044b4 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001d8e:	23ff      	movs	r3, #255	; 0xff
 8001d90:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001d92:	f107 0210 	add.w	r2, r7, #16
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	21c4      	movs	r1, #196	; 0xc4
 8001da0:	69f8      	ldr	r0, [r7, #28]
 8001da2:	f002 fb87 	bl	80044b4 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001da6:	2301      	movs	r3, #1
 8001da8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001daa:	2320      	movs	r3, #32
 8001dac:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001dae:	f107 0210 	add.w	r2, r7, #16
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2302      	movs	r3, #2
 8001dba:	21c4      	movs	r1, #196	; 0xc4
 8001dbc:	69f8      	ldr	r0, [r7, #28]
 8001dbe:	f002 fb79 	bl	80044b4 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001dc6:	23ff      	movs	r3, #255	; 0xff
 8001dc8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001dca:	f107 020c 	add.w	r2, r7, #12
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	21c4      	movs	r1, #196	; 0xc4
 8001dd8:	69f8      	ldr	r0, [r7, #28]
 8001dda:	f002 fb6b 	bl	80044b4 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001dde:	2303      	movs	r3, #3
 8001de0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001de2:	23ff      	movs	r3, #255	; 0xff
 8001de4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001de6:	f107 020c 	add.w	r2, r7, #12
 8001dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2302      	movs	r3, #2
 8001df2:	21c4      	movs	r1, #196	; 0xc4
 8001df4:	69f8      	ldr	r0, [r7, #28]
 8001df6:	f002 fb5d 	bl	80044b4 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001dfe:	23ff      	movs	r3, #255	; 0xff
 8001e00:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001e02:	f107 020c 	add.w	r2, r7, #12
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	21c4      	movs	r1, #196	; 0xc4
 8001e10:	69f8      	ldr	r0, [r7, #28]
 8001e12:	f002 fb4f 	bl	80044b4 <HAL_I2C_Master_Transmit>


}
 8001e16:	bf00      	nop
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000035c 	.word	0x2000035c

08001e24 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001e32:	2340      	movs	r3, #64	; 0x40
 8001e34:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001e3a:	e011      	b.n	8001e60 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001e46:	f107 020c 	add.w	r2, r7, #12
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2302      	movs	r3, #2
 8001e52:	217c      	movs	r1, #124	; 0x7c
 8001e54:	6938      	ldr	r0, [r7, #16]
 8001e56:	f002 fb2d 	bl	80044b4 <HAL_I2C_Master_Transmit>
            i++;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e7      	bne.n	8001e3c <lcd_print+0x18>
   }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af02      	add	r7, sp, #8
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
 8001e82:	4613      	mov	r3, r2
 8001e84:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001e8a:	78bb      	ldrb	r3, [r7, #2]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d104      	bne.n	8001e9a <lcd_position+0x24>
    {
        col = col | 0x80;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e96:	70fb      	strb	r3, [r7, #3]
 8001e98:	e003      	b.n	8001ea2 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001ea0:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001eaa:	f107 0208 	add.w	r2, r7, #8
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	217c      	movs	r1, #124	; 0x7c
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f002 fafb 	bl	80044b4 <HAL_I2C_Master_Transmit>
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	71bb      	strb	r3, [r7, #6]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <reglagecouleur+0x74>)
 8001edc:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8001ee6:	f107 0210 	add.w	r2, r7, #16
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	21c4      	movs	r1, #196	; 0xc4
 8001ef4:	6978      	ldr	r0, [r7, #20]
 8001ef6:	f002 fadd 	bl	80044b4 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8001efa:	2303      	movs	r3, #3
 8001efc:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8001f02:	f107 020c 	add.w	r2, r7, #12
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	21c4      	movs	r1, #196	; 0xc4
 8001f10:	6978      	ldr	r0, [r7, #20]
 8001f12:	f002 facf 	bl	80044b4 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8001f16:	2302      	movs	r3, #2
 8001f18:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8001f1a:	797b      	ldrb	r3, [r7, #5]
 8001f1c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8001f1e:	f107 0208 	add.w	r2, r7, #8
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2302      	movs	r3, #2
 8001f2a:	21c4      	movs	r1, #196	; 0xc4
 8001f2c:	6978      	ldr	r0, [r7, #20]
 8001f2e:	f002 fac1 	bl	80044b4 <HAL_I2C_Master_Transmit>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000284 	.word	0x20000284

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f44:	f5ad 4d20 	sub.w	sp, sp, #40960	; 0xa000
 8001f48:	b09f      	sub	sp, #124	; 0x7c
 8001f4a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4c:	f001 f977 	bl	800323e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f50:	f000 fbe6 	bl	8002720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f54:	f7ff fd5e 	bl	8001a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f58:	f000 ffc4 	bl	8002ee4 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001f5c:	f000 ff3e 	bl	8002ddc <MX_TIM7_Init>
  MX_I2C1_Init();
 8001f60:	f7ff fde8 	bl	8001b34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f64:	f000 ff94 	bl	8002e90 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8001f68:	f7ff fcbc 	bl	80018e4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */



  int ok[MAX_RCP_LEN ] = {0};
 8001f6c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f70:	3b64      	subs	r3, #100	; 0x64
 8001f72:	4618      	mov	r0, r3
 8001f74:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f006 fc42 	bl	8008804 <memset>
  char GET_DATA_Send[100] = "GET /ShowData?id=10";
 8001f80:	f507 668c 	add.w	r6, r7, #1120	; 0x460
 8001f84:	3ec8      	subs	r6, #200	; 0xc8
 8001f86:	4bd2      	ldr	r3, [pc, #840]	; (80022d0 <main+0x390>)
 8001f88:	4634      	mov	r4, r6
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	6023      	str	r3, [r4, #0]
 8001f94:	f106 0314 	add.w	r3, r6, #20
 8001f98:	2250      	movs	r2, #80	; 0x50
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f006 fc31 	bl	8008804 <memset>
  //char path = "/ShowData?";
  int  id = 10, temp = 2000, humA = 4560, humS = 6700 , Waterlvl = 5000;
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001fa8:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fb2:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001fb6:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8001fc0:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001fc4:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	f641 232c 	movw	r3, #6700	; 0x1a2c
 8001fce:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001fd2:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fdc:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001fe0:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8001fe4:	6013      	str	r3, [r2, #0]
  int reboot = 0, i =0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001fec:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8001ff8:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8001ffc:	6013      	str	r3, [r2, #0]


  /* ----- INIT LCD ----- */

    rgb_lcd LCD_DataStruct;
    LCD_DataStruct._displaycontrol = LCD_DISPLAYON;
 8001ffe:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002002:	3bcc      	subs	r3, #204	; 0xcc
 8002004:	2204      	movs	r2, #4
 8002006:	705a      	strb	r2, [r3, #1]
    LCD_DataStruct._displayfunction = LCD_2LINE;
 8002008:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800200c:	3bcc      	subs	r3, #204	; 0xcc
 800200e:	2208      	movs	r2, #8
 8002010:	701a      	strb	r2, [r3, #0]
    LCD_DataStruct._displaymode = LCD_ENTRYLEFT;
 8002012:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002016:	3bcc      	subs	r3, #204	; 0xcc
 8002018:	2202      	movs	r2, #2
 800201a:	709a      	strb	r2, [r3, #2]


    lcd_init(&hi2c1, &LCD_DataStruct);
 800201c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002020:	3bcc      	subs	r3, #204	; 0xcc
 8002022:	4619      	mov	r1, r3
 8002024:	48ab      	ldr	r0, [pc, #684]	; (80022d4 <main+0x394>)
 8002026:	f7ff fe07 	bl	8001c38 <lcd_init>

    reglagecouleur(50,100,255);
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	2164      	movs	r1, #100	; 0x64
 800202e:	2032      	movs	r0, #50	; 0x32
 8002030:	f7ff ff4a 	bl	8001ec8 <reglagecouleur>
    HAL_Delay(1000);
 8002034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002038:	f001 f970 	bl	800331c <HAL_Delay>
    reglagecouleur(100,200,255);
 800203c:	22ff      	movs	r2, #255	; 0xff
 800203e:	21c8      	movs	r1, #200	; 0xc8
 8002040:	2064      	movs	r0, #100	; 0x64
 8002042:	f7ff ff41 	bl	8001ec8 <reglagecouleur>
    HAL_Delay(1000);
 8002046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204a:	f001 f967 	bl	800331c <HAL_Delay>
    reglagecouleur(255,255,255);
 800204e:	22ff      	movs	r2, #255	; 0xff
 8002050:	21ff      	movs	r1, #255	; 0xff
 8002052:	20ff      	movs	r0, #255	; 0xff
 8002054:	f7ff ff38 	bl	8001ec8 <reglagecouleur>
    HAL_Delay(1000);
 8002058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800205c:	f001 f95e 	bl	800331c <HAL_Delay>



    char text_buff[32] = "Initialisation";
 8002060:	f507 658c 	add.w	r5, r7, #1120	; 0x460
 8002064:	3dec      	subs	r5, #236	; 0xec
 8002066:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <main+0x398>)
 8002068:	462c      	mov	r4, r5
 800206a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206c:	c407      	stmia	r4!, {r0, r1, r2}
 800206e:	8023      	strh	r3, [r4, #0]
 8002070:	3402      	adds	r4, #2
 8002072:	0c1b      	lsrs	r3, r3, #16
 8002074:	7023      	strb	r3, [r4, #0]
 8002076:	f105 030f 	add.w	r3, r5, #15
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	741a      	strb	r2, [r3, #16]
    //sprintf(text_buff,"Temp : %.2f C",DHT22_DataStruct.T);

    lcd_position(&hi2c1,0,0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	4892      	ldr	r0, [pc, #584]	; (80022d4 <main+0x394>)
 800208c:	f7ff fef3 	bl	8001e76 <lcd_position>
    lcd_print(&hi2c1, text_buff);
 8002090:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002094:	3bec      	subs	r3, #236	; 0xec
 8002096:	4619      	mov	r1, r3
 8002098:	488e      	ldr	r0, [pc, #568]	; (80022d4 <main+0x394>)
 800209a:	f7ff fec3 	bl	8001e24 <lcd_print>



    /* lCD INIT : DHT22 */

    sprintf(text_buff,"du DHT22");
 800209e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80020a2:	3bec      	subs	r3, #236	; 0xec
 80020a4:	498d      	ldr	r1, [pc, #564]	; (80022dc <main+0x39c>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f007 fa5e 	bl	8009568 <siprintf>

    lcd_position(&hi2c1,0,1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	2100      	movs	r1, #0
 80020b0:	4888      	ldr	r0, [pc, #544]	; (80022d4 <main+0x394>)
 80020b2:	f7ff fee0 	bl	8001e76 <lcd_position>
    lcd_print(&hi2c1, text_buff);
 80020b6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80020ba:	3bec      	subs	r3, #236	; 0xec
 80020bc:	4619      	mov	r1, r3
 80020be:	4885      	ldr	r0, [pc, #532]	; (80022d4 <main+0x394>)
 80020c0:	f7ff feb0 	bl	8001e24 <lcd_print>
    HAL_Delay(500);
 80020c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c8:	f001 f928 	bl	800331c <HAL_Delay>

    /* INIT DHT22 */
     DHT22_Init(&htim7, 32e6,DHT22_SENS_GPIO_Port,DHT22_SENS_Pin, DHT22_SENS_EXTI_IRQn);
 80020cc:	2306      	movs	r3, #6
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	4a83      	ldr	r2, [pc, #524]	; (80022e0 <main+0x3a0>)
 80020d4:	4983      	ldr	r1, [pc, #524]	; (80022e4 <main+0x3a4>)
 80020d6:	4884      	ldr	r0, [pc, #528]	; (80022e8 <main+0x3a8>)
 80020d8:	f7ff fa0c 	bl	80014f4 <DHT22_Init>

    /* TEST : Print measures on the LCD screen */
    DHT22_Data DHT22_DataStruct;
    HAL_Delay(500);
 80020dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e0:	f001 f91c 	bl	800331c <HAL_Delay>

    DHT22_DataStruct = DHT22_ReadData();
 80020e4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80020e8:	3bf8      	subs	r3, #248	; 0xf8
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fa3c 	bl	8001568 <DHT22_ReadData>
   	  if(DHT22_DataStruct.is_data_valid)
 80020f0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80020f4:	3bf8      	subs	r3, #248	; 0xf8
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03e      	beq.n	800217a <main+0x23a>
   	  {
   		  char text_buff[32];
   		  sprintf(text_buff,"Temp : %.2f C",DHT22_DataStruct.T);
 80020fc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002100:	3bf8      	subs	r3, #248	; 0xf8
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f9a7 	bl	8000458 <__aeabi_f2d>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002112:	3830      	subs	r0, #48	; 0x30
 8002114:	4975      	ldr	r1, [pc, #468]	; (80022ec <main+0x3ac>)
 8002116:	f007 fa27 	bl	8009568 <siprintf>
   		  lcd_position(&hi2c1,0,0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	486d      	ldr	r0, [pc, #436]	; (80022d4 <main+0x394>)
 8002120:	f7ff fea9 	bl	8001e76 <lcd_position>
   		  lcd_print(&hi2c1, text_buff);
 8002124:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002128:	3b30      	subs	r3, #48	; 0x30
 800212a:	4619      	mov	r1, r3
 800212c:	4869      	ldr	r0, [pc, #420]	; (80022d4 <main+0x394>)
 800212e:	f7ff fe79 	bl	8001e24 <lcd_print>


   		  sprintf(text_buff,"Hum : %.2f %%",DHT22_DataStruct.RH);
 8002132:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002136:	3bf8      	subs	r3, #248	; 0xf8
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f98c 	bl	8000458 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002148:	3830      	subs	r0, #48	; 0x30
 800214a:	4969      	ldr	r1, [pc, #420]	; (80022f0 <main+0x3b0>)
 800214c:	f007 fa0c 	bl	8009568 <siprintf>
   		  lcd_position(&hi2c1,0,1);
 8002150:	2201      	movs	r2, #1
 8002152:	2100      	movs	r1, #0
 8002154:	485f      	ldr	r0, [pc, #380]	; (80022d4 <main+0x394>)
 8002156:	f7ff fe8e 	bl	8001e76 <lcd_position>
   		  lcd_print(&hi2c1, text_buff);
 800215a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800215e:	3b30      	subs	r3, #48	; 0x30
 8002160:	4619      	mov	r1, r3
 8002162:	485c      	ldr	r0, [pc, #368]	; (80022d4 <main+0x394>)
 8002164:	f7ff fe5e 	bl	8001e24 <lcd_print>


   		  reglagecouleur(200,200,255);
 8002168:	22ff      	movs	r2, #255	; 0xff
 800216a:	21c8      	movs	r1, #200	; 0xc8
 800216c:	20c8      	movs	r0, #200	; 0xc8
 800216e:	f7ff feab 	bl	8001ec8 <reglagecouleur>
   		  HAL_Delay(1750);
 8002172:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8002176:	f001 f8d1 	bl	800331c <HAL_Delay>



   	/* ----- ADC - Water Level  ----- */

   	sprintf(text_buff,"du Niv D'eau");
 800217a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800217e:	3bec      	subs	r3, #236	; 0xec
 8002180:	495c      	ldr	r1, [pc, #368]	; (80022f4 <main+0x3b4>)
 8002182:	4618      	mov	r0, r3
 8002184:	f007 f9f0 	bl	8009568 <siprintf>

   	lcd_position(&hi2c1,0,1);
 8002188:	2201      	movs	r2, #1
 800218a:	2100      	movs	r1, #0
 800218c:	4851      	ldr	r0, [pc, #324]	; (80022d4 <main+0x394>)
 800218e:	f7ff fe72 	bl	8001e76 <lcd_position>
   	lcd_print(&hi2c1, text_buff);
 8002192:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002196:	3bec      	subs	r3, #236	; 0xec
 8002198:	4619      	mov	r1, r3
 800219a:	484e      	ldr	r0, [pc, #312]	; (80022d4 <main+0x394>)
 800219c:	f7ff fe42 	bl	8001e24 <lcd_print>




    /* lCD INIT : WIFI */
    sprintf(text_buff,"du module wifi");
 80021a0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021a4:	3bec      	subs	r3, #236	; 0xec
 80021a6:	4954      	ldr	r1, [pc, #336]	; (80022f8 <main+0x3b8>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f007 f9dd 	bl	8009568 <siprintf>

    lcd_position(&hi2c1,0,1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2100      	movs	r1, #0
 80021b2:	4848      	ldr	r0, [pc, #288]	; (80022d4 <main+0x394>)
 80021b4:	f7ff fe5f 	bl	8001e76 <lcd_position>
    lcd_print(&hi2c1, text_buff);
 80021b8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021bc:	3bec      	subs	r3, #236	; 0xec
 80021be:	4619      	mov	r1, r3
 80021c0:	4844      	ldr	r0, [pc, #272]	; (80022d4 <main+0x394>)
 80021c2:	f7ff fe2f 	bl	8001e24 <lcd_print>



  /* -----  WIFI_authentification(SSID,AUTH,KEY);  ----- */

    commandMode();
 80021c6:	f000 ff3b 	bl	8003040 <commandMode>

	sendCommand("set wlan ssid " SSID "\r", "OK",ok);
 80021ca:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021ce:	3b64      	subs	r3, #100	; 0x64
 80021d0:	461a      	mov	r2, r3
 80021d2:	494a      	ldr	r1, [pc, #296]	; (80022fc <main+0x3bc>)
 80021d4:	484a      	ldr	r0, [pc, #296]	; (8002300 <main+0x3c0>)
 80021d6:	f000 ff73 	bl	80030c0 <sendCommand>
	  if (strcmp(AUTH , WIFLY_AUTH_OPEN) > 0 || strcmp(AUTH , WIFLY_AUTH_OPEN) < 0 )
	    {
		  sendCommand("set wlan auth " AUTH "\r","OK", ok);
 80021da:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021de:	3b64      	subs	r3, #100	; 0x64
 80021e0:	461a      	mov	r2, r3
 80021e2:	4946      	ldr	r1, [pc, #280]	; (80022fc <main+0x3bc>)
 80021e4:	4847      	ldr	r0, [pc, #284]	; (8002304 <main+0x3c4>)
 80021e6:	f000 ff6b 	bl	80030c0 <sendCommand>
	  	  if (strcmp(AUTH , WIFLY_AUTH_WEP)==0)
	  	  {
	  		sendCommand("set wlan key " KEY "\r","OK", ok); // Key must be EXACTLY 13 bytes (26 ASCII chars)
	  	  }
	  	  else{
	  		sendCommand("set wlan phrase " KEY"\r","OK", ok);
 80021ea:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021ee:	3b64      	subs	r3, #100	; 0x64
 80021f0:	461a      	mov	r2, r3
 80021f2:	4942      	ldr	r1, [pc, #264]	; (80022fc <main+0x3bc>)
 80021f4:	4844      	ldr	r0, [pc, #272]	; (8002308 <main+0x3c8>)
 80021f6:	f000 ff63 	bl	80030c0 <sendCommand>
  //sendCommand("open\r","*OPEN*",ok); // One time opening of connection to server


  /* -----  Save wlan config ----- */

  sendCommand("save\r", "Storing in config",ok);
 80021fa:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021fe:	3b64      	subs	r3, #100	; 0x64
 8002200:	461a      	mov	r2, r3
 8002202:	4942      	ldr	r1, [pc, #264]	; (800230c <main+0x3cc>)
 8002204:	4842      	ldr	r0, [pc, #264]	; (8002310 <main+0x3d0>)
 8002206:	f000 ff5b 	bl	80030c0 <sendCommand>
  sendCommand("reboot\r", "*READY*", ok); //After reboot we directly go to dataMode
 800220a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800220e:	3b64      	subs	r3, #100	; 0x64
 8002210:	461a      	mov	r2, r3
 8002212:	4940      	ldr	r1, [pc, #256]	; (8002314 <main+0x3d4>)
 8002214:	4840      	ldr	r0, [pc, #256]	; (8002318 <main+0x3d8>)
 8002216:	f000 ff53 	bl	80030c0 <sendCommand>

    /* USER CODE BEGIN 3 */

	  /*-----  Join access point -----*/

	  HAL_Delay(1000);
 800221a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800221e:	f001 f87d 	bl	800331c <HAL_Delay>
	  commandMode();
 8002222:	f000 ff0d 	bl	8003040 <commandMode>
	  sendCommand("show  net\r", "Assoc=OK",ok);
 8002226:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800222a:	3b64      	subs	r3, #100	; 0x64
 800222c:	461a      	mov	r2, r3
 800222e:	493b      	ldr	r1, [pc, #236]	; (800231c <main+0x3dc>)
 8002230:	483b      	ldr	r0, [pc, #236]	; (8002320 <main+0x3e0>)
 8002232:	f000 ff45 	bl	80030c0 <sendCommand>
	  if (strstr((char *)ok,"Assoc=OK")==NULL)
 8002236:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800223a:	3b64      	subs	r3, #100	; 0x64
 800223c:	4937      	ldr	r1, [pc, #220]	; (800231c <main+0x3dc>)
 800223e:	4618      	mov	r0, r3
 8002240:	f007 f9b2 	bl	80095a8 <strstr>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d133      	bne.n	80022b2 <main+0x372>
	  {
		  sendCommand("join\r","Associated!",ok);
 800224a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800224e:	3b64      	subs	r3, #100	; 0x64
 8002250:	461a      	mov	r2, r3
 8002252:	4934      	ldr	r1, [pc, #208]	; (8002324 <main+0x3e4>)
 8002254:	4834      	ldr	r0, [pc, #208]	; (8002328 <main+0x3e8>)
 8002256:	f000 ff33 	bl	80030c0 <sendCommand>
		  HAL_Delay(2000);
 800225a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800225e:	f001 f85d 	bl	800331c <HAL_Delay>
		  sendCommand("set ip protocol 18\r","OK",ok); //enable html client
 8002262:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002266:	3b64      	subs	r3, #100	; 0x64
 8002268:	461a      	mov	r2, r3
 800226a:	4924      	ldr	r1, [pc, #144]	; (80022fc <main+0x3bc>)
 800226c:	482f      	ldr	r0, [pc, #188]	; (800232c <main+0x3ec>)
 800226e:	f000 ff27 	bl	80030c0 <sendCommand>
		    sendCommand("set com remote 0\r","OK",ok); // turn off the REMOTE string so it does not interfere with the post
 8002272:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002276:	3b64      	subs	r3, #100	; 0x64
 8002278:	461a      	mov	r2, r3
 800227a:	4920      	ldr	r1, [pc, #128]	; (80022fc <main+0x3bc>)
 800227c:	482c      	ldr	r0, [pc, #176]	; (8002330 <main+0x3f0>)
 800227e:	f000 ff1f 	bl	80030c0 <sendCommand>


		    sendCommand("set ip host " HOST_IP"\r","OK",ok); //set remote IP to connect to
 8002282:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002286:	3b64      	subs	r3, #100	; 0x64
 8002288:	461a      	mov	r2, r3
 800228a:	491c      	ldr	r1, [pc, #112]	; (80022fc <main+0x3bc>)
 800228c:	4829      	ldr	r0, [pc, #164]	; (8002334 <main+0x3f4>)
 800228e:	f000 ff17 	bl	80030c0 <sendCommand>
		    sendCommand("set ip remote "HOST_PORT"\r","OK",ok); //set remote Port to connect to
 8002292:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002296:	3b64      	subs	r3, #100	; 0x64
 8002298:	461a      	mov	r2, r3
 800229a:	4918      	ldr	r1, [pc, #96]	; (80022fc <main+0x3bc>)
 800229c:	4826      	ldr	r0, [pc, #152]	; (8002338 <main+0x3f8>)
 800229e:	f000 ff0f 	bl	80030c0 <sendCommand>
	  sendCommand("set uart mode 2\r","AOK",ok); //auto connect on every UART message
 80022a2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80022a6:	3b64      	subs	r3, #100	; 0x64
 80022a8:	461a      	mov	r2, r3
 80022aa:	4924      	ldr	r1, [pc, #144]	; (800233c <main+0x3fc>)
 80022ac:	4824      	ldr	r0, [pc, #144]	; (8002340 <main+0x400>)
 80022ae:	f000 ff07 	bl	80030c0 <sendCommand>


	  }
	  sendCommand("exit\r","EXIT", ok);
 80022b2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80022b6:	3b64      	subs	r3, #100	; 0x64
 80022b8:	461a      	mov	r2, r3
 80022ba:	4922      	ldr	r1, [pc, #136]	; (8002344 <main+0x404>)
 80022bc:	4822      	ldr	r0, [pc, #136]	; (8002348 <main+0x408>)
 80022be:	f000 feff 	bl	80030c0 <sendCommand>


	  for (int ki = 0; ki <100 ; ki ++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80022c8:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e16b      	b.n	80025a8 <main+0x668>
 80022d0:	0800d2f0 	.word	0x0800d2f0
 80022d4:	20000284 	.word	0x20000284
 80022d8:	0800d354 	.word	0x0800d354
 80022dc:	0800d0d0 	.word	0x0800d0d0
 80022e0:	40020000 	.word	0x40020000
 80022e4:	01e84800 	.word	0x01e84800
 80022e8:	200002dc 	.word	0x200002dc
 80022ec:	0800d0dc 	.word	0x0800d0dc
 80022f0:	0800d0ec 	.word	0x0800d0ec
 80022f4:	0800d0fc 	.word	0x0800d0fc
 80022f8:	0800d10c 	.word	0x0800d10c
 80022fc:	0800d11c 	.word	0x0800d11c
 8002300:	0800d120 	.word	0x0800d120
 8002304:	0800d13c 	.word	0x0800d13c
 8002308:	0800d150 	.word	0x0800d150
 800230c:	0800d16c 	.word	0x0800d16c
 8002310:	0800d180 	.word	0x0800d180
 8002314:	0800d188 	.word	0x0800d188
 8002318:	0800d190 	.word	0x0800d190
 800231c:	0800d198 	.word	0x0800d198
 8002320:	0800d1a4 	.word	0x0800d1a4
 8002324:	0800d1b0 	.word	0x0800d1b0
 8002328:	0800d1bc 	.word	0x0800d1bc
 800232c:	0800d1c4 	.word	0x0800d1c4
 8002330:	0800d1d8 	.word	0x0800d1d8
 8002334:	0800d1ec 	.word	0x0800d1ec
 8002338:	0800d208 	.word	0x0800d208
 800233c:	0800d21c 	.word	0x0800d21c
 8002340:	0800d220 	.word	0x0800d220
 8002344:	0800d234 	.word	0x0800d234
 8002348:	0800d23c 	.word	0x0800d23c
{
	  /* Code Capteurs */



	  char text_buff[32] = "Les Mesures :       ";
 800234c:	f107 0660 	add.w	r6, r7, #96	; 0x60
 8002350:	3e50      	subs	r6, #80	; 0x50
 8002352:	4bcc      	ldr	r3, [pc, #816]	; (8002684 <main+0x744>)
 8002354:	4634      	mov	r4, r6
 8002356:	461d      	mov	r5, r3
 8002358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002360:	6020      	str	r0, [r4, #0]
 8002362:	3404      	adds	r4, #4
 8002364:	7021      	strb	r1, [r4, #0]
 8002366:	f106 0315 	add.w	r3, r6, #21
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	f8c3 2007 	str.w	r2, [r3, #7]
	     //sprintf(text_buff,"Temp : %.2f C",DHT22_DataStruct.T);

	     lcd_position(&hi2c1,0,0);
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	48c3      	ldr	r0, [pc, #780]	; (8002688 <main+0x748>)
 800237a:	f7ff fd7c 	bl	8001e76 <lcd_position>
	     lcd_print(&hi2c1, text_buff);
 800237e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002382:	3b50      	subs	r3, #80	; 0x50
 8002384:	4619      	mov	r1, r3
 8002386:	48c0      	ldr	r0, [pc, #768]	; (8002688 <main+0x748>)
 8002388:	f7ff fd4c 	bl	8001e24 <lcd_print>



	  // DHT22

	    DHT22_DataStruct = DHT22_ReadData();
 800238c:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 8002390:	3cf8      	subs	r4, #248	; 0xf8
 8002392:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002396:	3b60      	subs	r3, #96	; 0x60
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f8e5 	bl	8001568 <DHT22_ReadData>
 800239e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023a2:	3b60      	subs	r3, #96	; 0x60
 80023a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	   	  if(DHT22_DataStruct.is_data_valid)
 80023ac:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80023b0:	3bf8      	subs	r3, #248	; 0xf8
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03d      	beq.n	8002434 <main+0x4f4>
	   	  {
	   		  char text_buff[32];
	   		  sprintf(text_buff,"Temp : %.2f C       ",DHT22_DataStruct.T);
 80023b8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80023bc:	3bf8      	subs	r3, #248	; 0xf8
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f849 	bl	8000458 <__aeabi_f2d>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80023ce:	3830      	subs	r0, #48	; 0x30
 80023d0:	49ae      	ldr	r1, [pc, #696]	; (800268c <main+0x74c>)
 80023d2:	f007 f8c9 	bl	8009568 <siprintf>
	   		  lcd_position(&hi2c1,0,1);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2100      	movs	r1, #0
 80023da:	48ab      	ldr	r0, [pc, #684]	; (8002688 <main+0x748>)
 80023dc:	f7ff fd4b 	bl	8001e76 <lcd_position>
	   		  lcd_print(&hi2c1, text_buff);
 80023e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023e4:	3b30      	subs	r3, #48	; 0x30
 80023e6:	4619      	mov	r1, r3
 80023e8:	48a7      	ldr	r0, [pc, #668]	; (8002688 <main+0x748>)
 80023ea:	f7ff fd1b 	bl	8001e24 <lcd_print>
	   		  HAL_Delay(1000);
 80023ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023f2:	f000 ff93 	bl	800331c <HAL_Delay>


	   		  sprintf(text_buff,"Hum : %.2f %%      ",DHT22_DataStruct.RH);
 80023f6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80023fa:	3bf8      	subs	r3, #248	; 0xf8
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f82a 	bl	8000458 <__aeabi_f2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800240c:	3830      	subs	r0, #48	; 0x30
 800240e:	49a0      	ldr	r1, [pc, #640]	; (8002690 <main+0x750>)
 8002410:	f007 f8aa 	bl	8009568 <siprintf>
	   		  lcd_position(&hi2c1,0,1);
 8002414:	2201      	movs	r2, #1
 8002416:	2100      	movs	r1, #0
 8002418:	489b      	ldr	r0, [pc, #620]	; (8002688 <main+0x748>)
 800241a:	f7ff fd2c 	bl	8001e76 <lcd_position>
	   		  lcd_print(&hi2c1, text_buff);
 800241e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002422:	3b30      	subs	r3, #48	; 0x30
 8002424:	4619      	mov	r1, r3
 8002426:	4898      	ldr	r0, [pc, #608]	; (8002688 <main+0x748>)
 8002428:	f7ff fcfc 	bl	8001e24 <lcd_print>
	   		  HAL_Delay(1000);
 800242c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002430:	f000 ff74 	bl	800331c <HAL_Delay>
	    // WATER LEVEL



	    // Get ADC value
	   	    HAL_ADC_Start(&hadc);
 8002434:	4897      	ldr	r0, [pc, #604]	; (8002694 <main+0x754>)
 8002436:	f001 f8d9 	bl	80035ec <HAL_ADC_Start>
	   	    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800243a:	f04f 31ff 	mov.w	r1, #4294967295
 800243e:	4895      	ldr	r0, [pc, #596]	; (8002694 <main+0x754>)
 8002440:	f001 f934 	bl	80036ac <HAL_ADC_PollForConversion>
	   	    raw_wtr_lvl = HAL_ADC_GetValue(&hadc);
 8002444:	4893      	ldr	r0, [pc, #588]	; (8002694 <main+0x754>)
 8002446:	f001 f9ba 	bl	80037be <HAL_ADC_GetValue>
 800244a:	4603      	mov	r3, r0
 800244c:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8002450:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8002454:	8013      	strh	r3, [r2, #0]



	   	    // Convert to string and print
	   	    sprintf(msg_raw_wtr_lvl, "%hu\r\n", raw_wtr_lvl);
 8002456:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 800245a:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002464:	3b04      	subs	r3, #4
 8002466:	498c      	ldr	r1, [pc, #560]	; (8002698 <main+0x758>)
 8002468:	4618      	mov	r0, r3
 800246a:	f007 f87d 	bl	8009568 <siprintf>
	   	    HAL_UART_Transmit(&huart2, (uint8_t*)msg_raw_wtr_lvl, strlen(msg_raw_wtr_lvl), HAL_MAX_DELAY);
 800246e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002472:	3b04      	subs	r3, #4
 8002474:	4618      	mov	r0, r3
 8002476:	f7fd fe83 	bl	8000180 <strlen>
 800247a:	4603      	mov	r3, r0
 800247c:	b29a      	uxth	r2, r3
 800247e:	f507 7158 	add.w	r1, r7, #864	; 0x360
 8002482:	3904      	subs	r1, #4
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	4884      	ldr	r0, [pc, #528]	; (800269c <main+0x75c>)
 800248a:	f005 fca6 	bl	8007dda <HAL_UART_Transmit>

	   	    // get pourcentage value
	   	    Waterlvl = raw_wtr_lvl * 100 / 4095 ;//4095 adc 12 bits resolution
 800248e:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002492:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	2264      	movs	r2, #100	; 0x64
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	4a80      	ldr	r2, [pc, #512]	; (80026a0 <main+0x760>)
 80024a0:	fb82 1203 	smull	r1, r2, r2, r3
 80024a4:	441a      	add	r2, r3
 80024a6:	12d2      	asrs	r2, r2, #11
 80024a8:	17db      	asrs	r3, r3, #31
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80024b0:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80024b4:	6013      	str	r3, [r2, #0]

	   //affichage LCD water level


	   	 sprintf(text_buff,"Hum Terre : %d %%     ",Waterlvl);
 80024b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024ba:	3b50      	subs	r3, #80	; 0x50
 80024bc:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80024c0:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4977      	ldr	r1, [pc, #476]	; (80026a4 <main+0x764>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f007 f84d 	bl	8009568 <siprintf>
	   	 lcd_position(&hi2c1,0,1);
 80024ce:	2201      	movs	r2, #1
 80024d0:	2100      	movs	r1, #0
 80024d2:	486d      	ldr	r0, [pc, #436]	; (8002688 <main+0x748>)
 80024d4:	f7ff fccf 	bl	8001e76 <lcd_position>
	   	 lcd_print(&hi2c1, text_buff);
 80024d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024dc:	3b50      	subs	r3, #80	; 0x50
 80024de:	4619      	mov	r1, r3
 80024e0:	4869      	ldr	r0, [pc, #420]	; (8002688 <main+0x748>)
 80024e2:	f7ff fc9f 	bl	8001e24 <lcd_print>
	   	 HAL_Delay(1000);
 80024e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ea:	f000 ff17 	bl	800331c <HAL_Delay>


	   	tcs34725_get_RGB_Values(&red, &green, &blue);//lecture rgb
 80024ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024f2:	3a10      	subs	r2, #16
 80024f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80024f8:	390c      	subs	r1, #12
 80024fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024fe:	3b08      	subs	r3, #8
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fbf5 	bl	8002cf0 <tcs34725_get_RGB_Values>

	      // affichage de la temperature sur l'ecran lcd
	     	 	 	 //lcd_clear();

	    sprintf(text_buff,"R%.0f G%.0f B%.0f    ",red,green,blue);
 8002506:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800250a:	3b08      	subs	r3, #8
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd ffa2 	bl	8000458 <__aeabi_f2d>
 8002514:	4680      	mov	r8, r0
 8002516:	4689      	mov	r9, r1
 8002518:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800251c:	3b0c      	subs	r3, #12
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fd ff99 	bl	8000458 <__aeabi_f2d>
 8002526:	4604      	mov	r4, r0
 8002528:	460d      	mov	r5, r1
 800252a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800252e:	3b10      	subs	r3, #16
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ff90 	bl	8000458 <__aeabi_f2d>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002540:	3850      	subs	r0, #80	; 0x50
 8002542:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002546:	e9cd 4500 	strd	r4, r5, [sp]
 800254a:	4642      	mov	r2, r8
 800254c:	464b      	mov	r3, r9
 800254e:	4956      	ldr	r1, [pc, #344]	; (80026a8 <main+0x768>)
 8002550:	f007 f80a 	bl	8009568 <siprintf>
	    lcd_position(&hi2c1,0,1);
 8002554:	2201      	movs	r2, #1
 8002556:	2100      	movs	r1, #0
 8002558:	484b      	ldr	r0, [pc, #300]	; (8002688 <main+0x748>)
 800255a:	f7ff fc8c 	bl	8001e76 <lcd_position>
	    lcd_print(&hi2c1, text_buff);
 800255e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002562:	3b50      	subs	r3, #80	; 0x50
 8002564:	4619      	mov	r1, r3
 8002566:	4848      	ldr	r0, [pc, #288]	; (8002688 <main+0x748>)
 8002568:	f7ff fc5c 	bl	8001e24 <lcd_print>
	    HAL_Delay(1000);
 800256c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002570:	f000 fed4 	bl	800331c <HAL_Delay>

	    if (red < 50)
 8002574:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002578:	3b08      	subs	r3, #8
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	494b      	ldr	r1, [pc, #300]	; (80026ac <main+0x76c>)
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fdb6 	bl	80010f0 <__aeabi_fcmplt>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <main+0x652>
	    {
	    	HAL_GPIO_TogglePin(POMPE_GPIO_Port, POMPE_Pin);
 800258a:	2108      	movs	r1, #8
 800258c:	4848      	ldr	r0, [pc, #288]	; (80026b0 <main+0x770>)
 800258e:	f001 fe1b 	bl	80041c8 <HAL_GPIO_TogglePin>
	  for (int ki = 0; ki <100 ; ki ++)
 8002592:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002596:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80025a2:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80025ac:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b63      	cmp	r3, #99	; 0x63
 80025b4:	f77f aeca 	ble.w	800234c <main+0x40c>



	  /* Send measures to server */

	  snprintf(GET_DATA_Send,100,"GET %sid=%d&temp=%d&huma=%d&hums=%d&wtrlvl=%d","/ShowData?",
 80025b8:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80025bc:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80025c6:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	18d4      	adds	r4, r2, r3
			  	  	  	  	  id + i, (int)(DHT22_DataStruct.T * 100), (int)(DHT22_DataStruct.RH * 100), humS, Waterlvl);
 80025ce:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80025d2:	3bf8      	subs	r3, #248	; 0xf8
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4937      	ldr	r1, [pc, #220]	; (80026b4 <main+0x774>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fbeb 	bl	8000db4 <__aeabi_fmul>
 80025de:	4603      	mov	r3, r0
	  snprintf(GET_DATA_Send,100,"GET %sid=%d&temp=%d&huma=%d&hums=%d&wtrlvl=%d","/ShowData?",
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fdad 	bl	8001140 <__aeabi_f2iz>
 80025e6:	4605      	mov	r5, r0
			  	  	  	  	  id + i, (int)(DHT22_DataStruct.T * 100), (int)(DHT22_DataStruct.RH * 100), humS, Waterlvl);
 80025e8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80025ec:	3bf8      	subs	r3, #248	; 0xf8
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4930      	ldr	r1, [pc, #192]	; (80026b4 <main+0x774>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fbde 	bl	8000db4 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
	  snprintf(GET_DATA_Send,100,"GET %sid=%d&temp=%d&huma=%d&hums=%d&wtrlvl=%d","/ShowData?",
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fda0 	bl	8001140 <__aeabi_f2iz>
 8002600:	4602      	mov	r2, r0
 8002602:	f507 608c 	add.w	r0, r7, #1120	; 0x460
 8002606:	38c8      	subs	r0, #200	; 0xc8
 8002608:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 800260c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	9304      	str	r3, [sp, #16]
 8002614:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002618:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	9202      	str	r2, [sp, #8]
 8002622:	9501      	str	r5, [sp, #4]
 8002624:	9400      	str	r4, [sp, #0]
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <main+0x778>)
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <main+0x77c>)
 800262a:	2164      	movs	r1, #100	; 0x64
 800262c:	f006 ff68 	bl	8009500 <sniprintf>
	  HAL_Delay(500);
 8002630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002634:	f000 fe72 	bl	800331c <HAL_Delay>
	  sendData(GET_DATA_Send,"200 OK", ok);
 8002638:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800263c:	3a64      	subs	r2, #100	; 0x64
 800263e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002642:	3bc8      	subs	r3, #200	; 0xc8
 8002644:	491e      	ldr	r1, [pc, #120]	; (80026c0 <main+0x780>)
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fd90 	bl	800316c <sendData>
	  i++;
 800264c:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002650:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 800265c:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8002660:	6013      	str	r3, [r2, #0]

	  /* test Failure and reboot Wifi Module*/
	  if( strstr((char *)ok,"ERR") != NULL ||  strcmp((char *)ok,"") == 0 )
 8002662:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002666:	3b64      	subs	r3, #100	; 0x64
 8002668:	4916      	ldr	r1, [pc, #88]	; (80026c4 <main+0x784>)
 800266a:	4618      	mov	r0, r3
 800266c:	f006 ff9c 	bl	80095a8 <strstr>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d128      	bne.n	80026c8 <main+0x788>
 8002676:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800267a:	3b64      	subs	r3, #100	; 0x64
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d144      	bne.n	800270c <main+0x7cc>
 8002682:	e021      	b.n	80026c8 <main+0x788>
 8002684:	0800d374 	.word	0x0800d374
 8002688:	20000284 	.word	0x20000284
 800268c:	0800d244 	.word	0x0800d244
 8002690:	0800d25c 	.word	0x0800d25c
 8002694:	20000230 	.word	0x20000230
 8002698:	0800d270 	.word	0x0800d270
 800269c:	2000035c 	.word	0x2000035c
 80026a0:	80080081 	.word	0x80080081
 80026a4:	0800d278 	.word	0x0800d278
 80026a8:	0800d290 	.word	0x0800d290
 80026ac:	42480000 	.word	0x42480000
 80026b0:	40020800 	.word	0x40020800
 80026b4:	42c80000 	.word	0x42c80000
 80026b8:	0800d2a8 	.word	0x0800d2a8
 80026bc:	0800d2b4 	.word	0x0800d2b4
 80026c0:	0800d2e4 	.word	0x0800d2e4
 80026c4:	0800d2ec 	.word	0x0800d2ec
	  {
		  reboot ++;
 80026c8:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80026cc:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80026d8:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80026dc:	6013      	str	r3, [r2, #0]
		  if(reboot >= 2)
 80026de:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80026e2:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	dd0f      	ble.n	800270c <main+0x7cc>
		  {
			  reboot = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80026f2:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80026f6:	6013      	str	r3, [r2, #0]
			  commandMode();
 80026f8:	f000 fca2 	bl	8003040 <commandMode>
			  sendCommand("reboot\r", "*READY*", ok);
 80026fc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002700:	3b64      	subs	r3, #100	; 0x64
 8002702:	461a      	mov	r2, r3
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <main+0x7d8>)
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <main+0x7dc>)
 8002708:	f000 fcda 	bl	80030c0 <sendCommand>





	  HAL_Delay(5000);
 800270c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002710:	f000 fe04 	bl	800331c <HAL_Delay>
	  HAL_Delay(1000);
 8002714:	e581      	b.n	800221a <main+0x2da>
 8002716:	bf00      	nop
 8002718:	0800d188 	.word	0x0800d188
 800271c:	0800d190 	.word	0x0800d190

08002720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b092      	sub	sp, #72	; 0x48
 8002724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	2234      	movs	r2, #52	; 0x34
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f006 f868 	bl	8008804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002734:	463b      	mov	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <SystemClock_Config+0x98>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800274a:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <SystemClock_Config+0x98>)
 800274c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002750:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002752:	2302      	movs	r3, #2
 8002754:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002756:	2301      	movs	r3, #1
 8002758:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800275a:	2310      	movs	r3, #16
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275e:	2302      	movs	r3, #2
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002762:	2300      	movs	r3, #0
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002766:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800276a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800276c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002770:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4618      	mov	r0, r3
 8002778:	f004 fabe 	bl	8006cf8 <HAL_RCC_OscConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002782:	f000 f81b 	bl	80027bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002786:	230f      	movs	r3, #15
 8002788:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278a:	2303      	movs	r3, #3
 800278c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 fdda 	bl	8007358 <HAL_RCC_ClockConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80027aa:	f000 f807 	bl	80027bc <Error_Handler>
  }
}
 80027ae:	bf00      	nop
 80027b0:	3748      	adds	r7, #72	; 0x48
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40007000 	.word	0x40007000

080027bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c0:	b672      	cpsid	i
}
 80027c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <Error_Handler+0x8>
	...

080027c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_MspInit+0x5c>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	4a14      	ldr	r2, [pc, #80]	; (8002824 <HAL_MspInit+0x5c>)
 80027d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027d8:	6253      	str	r3, [r2, #36]	; 0x24
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_MspInit+0x5c>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <HAL_MspInit+0x5c>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_MspInit+0x5c>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6213      	str	r3, [r2, #32]
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_MspInit+0x5c>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_MspInit+0x5c>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_MspInit+0x5c>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6253      	str	r3, [r2, #36]	; 0x24
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_MspInit+0x5c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002816:	2007      	movs	r0, #7
 8002818:	f001 fa90 	bl	8003d3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800

08002828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800282c:	e7fe      	b.n	800282c <NMI_Handler+0x4>

0800282e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002832:	e7fe      	b.n	8002832 <HardFault_Handler+0x4>

08002834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002838:	e7fe      	b.n	8002838 <MemManage_Handler+0x4>

0800283a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <BusFault_Handler+0x4>

08002840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <UsageFault_Handler+0x4>

08002846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800286e:	f000 fd39 	bl	80032e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}

08002876 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800287a:	2001      	movs	r0, #1
 800287c:	f001 fcbe 	bl	80041fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <I2C1_EV_IRQHandler+0x10>)
 800288a:	f002 fa65 	bl	8004d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000284 	.word	0x20000284

08002898 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <I2C1_ER_IRQHandler+0x10>)
 800289e:	f002 fbc8 	bl	8005032 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000284 	.word	0x20000284

080028ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <USART1_IRQHandler+0x10>)
 80028b2:	f005 fc15 	bl	80080e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000031c 	.word	0x2000031c

080028c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <USART2_IRQHandler+0x10>)
 80028c6:	f005 fc0b 	bl	80080e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000035c 	.word	0x2000035c

080028d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <TIM7_IRQHandler+0x10>)
 80028da:	f005 f863 	bl	80079a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200002dc 	.word	0x200002dc

080028e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	return 1;
 80028ec:	2301      	movs	r3, #1
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <_kill>:

int _kill(int pid, int sig)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002900:	f005 ff56 	bl	80087b0 <__errno>
 8002904:	4603      	mov	r3, r0
 8002906:	2216      	movs	r2, #22
 8002908:	601a      	str	r2, [r3, #0]
	return -1;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_exit>:

void _exit (int status)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800291e:	f04f 31ff 	mov.w	r1, #4294967295
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffe7 	bl	80028f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002928:	e7fe      	b.n	8002928 <_exit+0x12>

0800292a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e00a      	b.n	8002952 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800293c:	f3af 8000 	nop.w
 8002940:	4601      	mov	r1, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	60ba      	str	r2, [r7, #8]
 8002948:	b2ca      	uxtb	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	dbf0      	blt.n	800293c <_read+0x12>
	}

return len;
 800295a:	687b      	ldr	r3, [r7, #4]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e009      	b.n	800298a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	60ba      	str	r2, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	dbf1      	blt.n	8002976 <_write+0x12>
	}
	return len;
 8002992:	687b      	ldr	r3, [r7, #4]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_close>:

int _close(int file)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	605a      	str	r2, [r3, #4]
	return 0;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <_isatty>:

int _isatty(int file)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	return 1;
 80029d8:	2301      	movs	r3, #1
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
	return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <_sbrk+0x5c>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_sbrk+0x60>)
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <_sbrk+0x64>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <_sbrk+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a2c:	f005 fec0 	bl	80087b0 <__errno>
 8002a30:	4603      	mov	r3, r0
 8002a32:	220c      	movs	r2, #12
 8002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e009      	b.n	8002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <_sbrk+0x64>)
 8002a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20014000 	.word	0x20014000
 8002a5c:	00000400 	.word	0x00000400
 8002a60:	20000214 	.word	0x20000214
 8002a64:	200003b0 	.word	0x200003b0

08002a68 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <SystemInit+0x14>)
 8002a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a72:	609a      	str	r2, [r3, #8]
#endif
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <tcs34725_enable>:
tcs34725Gain_t _tcs34725Gain;
tcs34725IntegrationTime_t _tcs34725IntegrationTime;
/***enable and disable the tcs34725 sensor
  */
void tcs34725_enable(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  tcs34725_i2c_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8002a84:	2300      	movs	r3, #0
 8002a86:	2201      	movs	r2, #1
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f88a 	bl	8002ba4 <tcs34725_i2c_write8>
  tcs34725_i2c_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8002a90:	2000      	movs	r0, #0
 8002a92:	2201      	movs	r2, #1
 8002a94:	2302      	movs	r3, #2
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f000 f882 	bl	8002ba4 <tcs34725_i2c_write8>
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <tcs34725_i2c_read8>:
	reg = tcs34725_i2c_read8(TCS34725_ENABLE);
	tcs34725_i2c_write8(TCS34725_ENABLE, reg & ~(TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN));
}
//Read with 8 bits using I2C protocol
uint8_t tcs34725_i2c_read8(uint8_t reg)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = (TCS34725_COMMAND_BYTE | reg);
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDR, buf, 1, HAL_MAX_DELAY);
 8002ab8:	2352      	movs	r3, #82	; 0x52
 8002aba:	b299      	uxth	r1, r3
 8002abc:	f107 020c 	add.w	r2, r7, #12
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	4809      	ldr	r0, [pc, #36]	; (8002af0 <tcs34725_i2c_read8+0x4c>)
 8002aca:	f001 fcf3 	bl	80044b4 <HAL_I2C_Master_Transmit>
  	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDR, buf, 1, HAL_MAX_DELAY);
 8002ace:	2352      	movs	r3, #82	; 0x52
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	f107 020c 	add.w	r2, r7, #12
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2301      	movs	r3, #1
 8002ade:	4804      	ldr	r0, [pc, #16]	; (8002af0 <tcs34725_i2c_read8+0x4c>)
 8002ae0:	f001 fde6 	bl	80046b0 <HAL_I2C_Master_Receive>
	return buf[0];
 8002ae4:	7b3b      	ldrb	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000284 	.word	0x20000284

08002af4 <tcs32725_init>:
/*SENSOR init*/
void tcs32725_init()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
/* Make sure we're actually connected */
	uint8_t x = tcs34725_i2c_read8(TCS34725_ID);
 8002afa:	2312      	movs	r3, #18
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ffd1 	bl	8002aa4 <tcs34725_i2c_read8>
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
	//printf("sensor ID %d \n", x);
	if ((x != 0x44) && (x != 0x10))
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	2b44      	cmp	r3, #68	; 0x44
 8002b0a:	d009      	beq.n	8002b20 <tcs32725_init+0x2c>
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d006      	beq.n	8002b20 <tcs32725_init+0x2c>
		HAL_UART_Transmit(&huart2, (uint8_t *)"sensor not identified \n", 24, HAL_MAX_DELAY);
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	2218      	movs	r2, #24
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <tcs32725_init+0x44>)
 8002b1a:	4808      	ldr	r0, [pc, #32]	; (8002b3c <tcs32725_init+0x48>)
 8002b1c:	f005 f95d 	bl	8007dda <HAL_UART_Transmit>
		//printf("sensor not identified \n");
	//_tcs34725Initialized = true;
/* Set default integration time and gain */
	tcs34725_set_time_integration(TCS34725_INTEGRATIONTIME_2_4MS);
 8002b20:	20ff      	movs	r0, #255	; 0xff
 8002b22:	f000 f85f 	bl	8002be4 <tcs34725_set_time_integration>
	tcs34725_set_gain(TCS34725_GAIN_1X);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f000 f870 	bl	8002c0c <tcs34725_set_gain>
/* Note: by default, the device is in power down mode on bootup */
	tcs34725_enable();
 8002b2c:	f7ff ffa8 	bl	8002a80 <tcs34725_enable>
	//return true;
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	0800d394 	.word	0x0800d394
 8002b3c:	2000035c 	.word	0x2000035c

08002b40 <tcs34725_i2c_read16>:
//////////////////////////////////

// Read with 16 bits using i2c protocol
uint16_t tcs34725_i2c_read16(uint8_t reg)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
	uint16_t x;	uint8_t TxBuf[2],RxBuf[2];
	TxBuf[0] = (TCS34725_COMMAND_BYTE | reg);
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDR, TxBuf, 1, HAL_MAX_DELAY);
 8002b54:	2352      	movs	r3, #82	; 0x52
 8002b56:	b299      	uxth	r1, r3
 8002b58:	f107 020c 	add.w	r2, r7, #12
 8002b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2301      	movs	r3, #1
 8002b64:	480e      	ldr	r0, [pc, #56]	; (8002ba0 <tcs34725_i2c_read16+0x60>)
 8002b66:	f001 fca5 	bl	80044b4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDR, RxBuf, 2, HAL_MAX_DELAY);
 8002b6a:	2352      	movs	r3, #82	; 0x52
 8002b6c:	b299      	uxth	r1, r3
 8002b6e:	f107 0208 	add.w	r2, r7, #8
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2302      	movs	r3, #2
 8002b7a:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <tcs34725_i2c_read16+0x60>)
 8002b7c:	f001 fd98 	bl	80046b0 <HAL_I2C_Master_Receive>
	x = RxBuf[0];
 8002b80:	7a3b      	ldrb	r3, [r7, #8]
 8002b82:	81fb      	strh	r3, [r7, #14]
	x <<= 8;
 8002b84:	89fb      	ldrh	r3, [r7, #14]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	81fb      	strh	r3, [r7, #14]
	x |= RxBuf[1];
 8002b8a:	7a7b      	ldrb	r3, [r7, #9]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	81fb      	strh	r3, [r7, #14]
	return x;
 8002b94:	89fb      	ldrh	r3, [r7, #14]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000284 	.word	0x20000284

08002ba4 <tcs34725_i2c_write8>:
//Write with 8 bits for I2C protocol
void tcs34725_i2c_write8(uint8_t reg, uint32_t val)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = (TCS34725_COMMAND_BYTE | reg);
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	733b      	strb	r3, [r7, #12]
	buf[1] = (val & 0xFF);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDR, buf, 2, HAL_MAX_DELAY);
 8002bc0:	2352      	movs	r3, #82	; 0x52
 8002bc2:	b299      	uxth	r1, r3
 8002bc4:	f107 020c 	add.w	r2, r7, #12
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2302      	movs	r3, #2
 8002bd0:	4803      	ldr	r0, [pc, #12]	; (8002be0 <tcs34725_i2c_write8+0x3c>)
 8002bd2:	f001 fc6f 	bl	80044b4 <HAL_I2C_Master_Transmit>
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000284 	.word	0x20000284

08002be4 <tcs34725_set_time_integration>:
// SET TCS34725 TIME INTEGRATION
void tcs34725_set_time_integration(tcs34725IntegrationTime_t intTime)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
	//if (!_tcs34725Initialized) tcs32725_init();
	 /* Update the timing register */
	tcs34725_i2c_write8(TCS34725_ATIME, intTime);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f7ff ffd5 	bl	8002ba4 <tcs34725_i2c_write8>
	 /* Update value placeholders */
	_tcs34725IntegrationTime = intTime;
 8002bfa:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <tcs34725_set_time_integration+0x24>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	7013      	strb	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200002d8 	.word	0x200002d8

08002c0c <tcs34725_set_gain>:

void tcs34725_set_gain(tcs34725Gain_t gain)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
	//if (!_tcs34725Initialized) tcs32725_init();
/* Update the timing register */
	tcs34725_i2c_write8(TCS34725_CONTROL, gain);
 8002c16:	220f      	movs	r2, #15
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f7ff ffc1 	bl	8002ba4 <tcs34725_i2c_write8>
/* Update value placeholders */
	_tcs34725Gain = gain;
 8002c22:	4a03      	ldr	r2, [pc, #12]	; (8002c30 <tcs34725_set_gain+0x24>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	7013      	strb	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200002d9 	.word	0x200002d9

08002c34 <tcs34725_get_RGBC_Data>:
///
/*
 * GET (or read) RGBC data values (get with to bytes)
 */
void tcs34725_get_RGBC_Data(uint16_t *rValue, uint16_t *gValue, uint16_t *bValue, uint16_t *cValue)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
 // if (!_tcs34725Initialized) tcs32725_init();
  *rValue = tcs34725_i2c_read16(REG_RDATAL);
 8002c42:	2316      	movs	r3, #22
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff7b 	bl	8002b40 <tcs34725_i2c_read16>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	801a      	strh	r2, [r3, #0]
  *gValue = tcs34725_i2c_read16(REG_GDATAL);
 8002c52:	2318      	movs	r3, #24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff73 	bl	8002b40 <tcs34725_i2c_read16>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	801a      	strh	r2, [r3, #0]
  *bValue = tcs34725_i2c_read16(REG_BDATAL);
 8002c62:	231a      	movs	r3, #26
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff6b 	bl	8002b40 <tcs34725_i2c_read16>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	801a      	strh	r2, [r3, #0]
  *cValue = tcs34725_i2c_read16(REG_CDATAL);
 8002c72:	2314      	movs	r3, #20
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff63 	bl	8002b40 <tcs34725_i2c_read16>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	801a      	strh	r2, [r3, #0]
  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime)
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <tcs34725_get_RGBC_Data+0xb8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2bff      	cmp	r3, #255	; 0xff
 8002c88:	d012      	beq.n	8002cb0 <tcs34725_get_RGBC_Data+0x7c>
 8002c8a:	2bff      	cmp	r3, #255	; 0xff
 8002c8c:	dc29      	bgt.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
 8002c8e:	2bf6      	cmp	r3, #246	; 0xf6
 8002c90:	d012      	beq.n	8002cb8 <tcs34725_get_RGBC_Data+0x84>
 8002c92:	2bf6      	cmp	r3, #246	; 0xf6
 8002c94:	dc25      	bgt.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
 8002c96:	2beb      	cmp	r3, #235	; 0xeb
 8002c98:	d012      	beq.n	8002cc0 <tcs34725_get_RGBC_Data+0x8c>
 8002c9a:	2beb      	cmp	r3, #235	; 0xeb
 8002c9c:	dc21      	bgt.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
 8002c9e:	2bd5      	cmp	r3, #213	; 0xd5
 8002ca0:	d012      	beq.n	8002cc8 <tcs34725_get_RGBC_Data+0x94>
 8002ca2:	2bd5      	cmp	r3, #213	; 0xd5
 8002ca4:	dc1d      	bgt.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <tcs34725_get_RGBC_Data+0xa4>
 8002caa:	2bc0      	cmp	r3, #192	; 0xc0
 8002cac:	d010      	beq.n	8002cd0 <tcs34725_get_RGBC_Data+0x9c>
      break;
    case TCS34725_INTEGRATIONTIME_700MS:
      HAL_Delay(700);
      break;
  }
}
 8002cae:	e018      	b.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(3);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f000 fb33 	bl	800331c <HAL_Delay>
      break;
 8002cb6:	e014      	b.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(24);
 8002cb8:	2018      	movs	r0, #24
 8002cba:	f000 fb2f 	bl	800331c <HAL_Delay>
      break;
 8002cbe:	e010      	b.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(50);
 8002cc0:	2032      	movs	r0, #50	; 0x32
 8002cc2:	f000 fb2b 	bl	800331c <HAL_Delay>
      break;
 8002cc6:	e00c      	b.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(101);
 8002cc8:	2065      	movs	r0, #101	; 0x65
 8002cca:	f000 fb27 	bl	800331c <HAL_Delay>
      break;
 8002cce:	e008      	b.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(154);
 8002cd0:	209a      	movs	r0, #154	; 0x9a
 8002cd2:	f000 fb23 	bl	800331c <HAL_Delay>
      break;
 8002cd6:	e004      	b.n	8002ce2 <tcs34725_get_RGBC_Data+0xae>
      HAL_Delay(700);
 8002cd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002cdc:	f000 fb1e 	bl	800331c <HAL_Delay>
      break;
 8002ce0:	bf00      	nop
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200002d8 	.word	0x200002d8

08002cf0 <tcs34725_get_RGB_Values>:
//GET R or G or B real VALUE
void tcs34725_get_RGB_Values(float *redColor, float *greenColor, float *blueColor)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
	uint16_t redValue = 0, greenValue = 0, blueValue = 0, clearValue = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	82fb      	strh	r3, [r7, #22]
 8002d00:	2300      	movs	r3, #0
 8002d02:	82bb      	strh	r3, [r7, #20]
 8002d04:	2300      	movs	r3, #0
 8002d06:	827b      	strh	r3, [r7, #18]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	823b      	strh	r3, [r7, #16]
	//
	tcs32725_init();
 8002d0c:	f7ff fef2 	bl	8002af4 <tcs32725_init>
	//
	tcs34725_get_RGBC_Data(&redValue, &greenValue, &blueValue, &clearValue);
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	f107 0212 	add.w	r2, r7, #18
 8002d18:	f107 0114 	add.w	r1, r7, #20
 8002d1c:	f107 0016 	add.w	r0, r7, #22
 8002d20:	f7ff ff88 	bl	8002c34 <tcs34725_get_RGBC_Data>

	// Division by zero
	if (clearValue == 0)
 8002d24:	8a3b      	ldrh	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <tcs34725_get_RGB_Values+0x54>
	{
		*redColor = 0;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
		*greenColor = 0;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
		*blueColor = 0;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
		*redColor = (float)redValue / clearValue * 255.0;
		*greenColor = (float)greenValue / clearValue * 255.0;
		*blueColor = (float)blueValue / clearValue * 255.0;
	}

}
 8002d42:	e044      	b.n	8002dce <tcs34725_get_RGB_Values+0xde>
		*redColor = (float)redValue / clearValue * 255.0;
 8002d44:	8afb      	ldrh	r3, [r7, #22]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd ffdc 	bl	8000d04 <__aeabi_ui2f>
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	8a3b      	ldrh	r3, [r7, #16]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd ffdb 	bl	8000d0c <__aeabi_i2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fe f8de 	bl	8000f1c <__aeabi_fdiv>
 8002d60:	4603      	mov	r3, r0
 8002d62:	491d      	ldr	r1, [pc, #116]	; (8002dd8 <tcs34725_get_RGB_Values+0xe8>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f825 	bl	8000db4 <__aeabi_fmul>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]
		*greenColor = (float)greenValue / clearValue * 255.0;
 8002d72:	8abb      	ldrh	r3, [r7, #20]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd ffc5 	bl	8000d04 <__aeabi_ui2f>
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	8a3b      	ldrh	r3, [r7, #16]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd ffc4 	bl	8000d0c <__aeabi_i2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7fe f8c7 	bl	8000f1c <__aeabi_fdiv>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <tcs34725_get_RGB_Values+0xe8>)
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe f80e 	bl	8000db4 <__aeabi_fmul>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	601a      	str	r2, [r3, #0]
		*blueColor = (float)blueValue / clearValue * 255.0;
 8002da0:	8a7b      	ldrh	r3, [r7, #18]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd ffae 	bl	8000d04 <__aeabi_ui2f>
 8002da8:	4604      	mov	r4, r0
 8002daa:	8a3b      	ldrh	r3, [r7, #16]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ffad 	bl	8000d0c <__aeabi_i2f>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4619      	mov	r1, r3
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7fe f8b0 	bl	8000f1c <__aeabi_fdiv>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4906      	ldr	r1, [pc, #24]	; (8002dd8 <tcs34725_get_RGB_Values+0xe8>)
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fff7 	bl	8000db4 <__aeabi_fmul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd90      	pop	{r4, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	437f0000 	.word	0x437f0000

08002ddc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de2:	463b      	mov	r3, r7
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <MX_TIM7_Init+0x60>)
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <MX_TIM7_Init+0x64>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32-1;
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <MX_TIM7_Init+0x60>)
 8002df2:	221f      	movs	r2, #31
 8002df4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <MX_TIM7_Init+0x60>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MX_TIM7_Init+0x60>)
 8002dfe:	2209      	movs	r2, #9
 8002e00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_TIM7_Init+0x60>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <MX_TIM7_Init+0x60>)
 8002e0a:	f004 fd39 	bl	8007880 <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002e14:	f7ff fcd2 	bl	80027bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <MX_TIM7_Init+0x60>)
 8002e26:	f004 ff2d 	bl	8007c84 <HAL_TIMEx_MasterConfigSynchronization>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002e30:	f7ff fcc4 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200002dc 	.word	0x200002dc
 8002e40:	40001400 	.word	0x40001400

08002e44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <HAL_TIM_Base_MspInit+0x44>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d113      	bne.n	8002e7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_TIM_Base_MspInit+0x48>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <HAL_TIM_Base_MspInit+0x48>)
 8002e5c:	f043 0320 	orr.w	r3, r3, #32
 8002e60:	6253      	str	r3, [r2, #36]	; 0x24
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_TIM_Base_MspInit+0x48>)
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	202c      	movs	r0, #44	; 0x2c
 8002e74:	f000 ff6d 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e78:	202c      	movs	r0, #44	; 0x2c
 8002e7a:	f000 ff86 	bl	8003d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40001400 	.word	0x40001400
 8002e8c:	40023800 	.word	0x40023800

08002e90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <MX_USART1_UART_Init+0x50>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002e9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_USART1_UART_Init+0x4c>)
 8002ec8:	f004 ff3a 	bl	8007d40 <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ed2:	f7ff fc73 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000031c 	.word	0x2000031c
 8002ee0:	40013800 	.word	0x40013800

08002ee4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <MX_USART2_UART_Init+0x50>)
 8002eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <MX_USART2_UART_Init+0x4c>)
 8002f1c:	f004 ff10 	bl	8007d40 <HAL_UART_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f26:	f7ff fc49 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000035c 	.word	0x2000035c
 8002f34:	40004400 	.word	0x40004400

08002f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a36      	ldr	r2, [pc, #216]	; (8003030 <HAL_UART_MspInit+0xf8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d131      	bne.n	8002fbe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f5a:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4a35      	ldr	r2, [pc, #212]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f64:	6213      	str	r3, [r2, #32]
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	61d3      	str	r3, [r2, #28]
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4824      	ldr	r0, [pc, #144]	; (8003038 <HAL_UART_MspInit+0x100>)
 8002fa8:	f000 ff66 	bl	8003e78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2025      	movs	r0, #37	; 0x25
 8002fb2:	f000 fece 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fb6:	2025      	movs	r0, #37	; 0x25
 8002fb8:	f000 fee7 	bl	8003d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fbc:	e034      	b.n	8003028 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_UART_MspInit+0x104>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d12f      	bne.n	8003028 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd2:	6253      	str	r3, [r2, #36]	; 0x24
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	61d3      	str	r3, [r2, #28]
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_UART_MspInit+0xfc>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003004:	2303      	movs	r3, #3
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003008:	2307      	movs	r3, #7
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	4619      	mov	r1, r3
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <HAL_UART_MspInit+0x100>)
 8003014:	f000 ff30 	bl	8003e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	2026      	movs	r0, #38	; 0x26
 800301e:	f000 fe98 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003022:	2026      	movs	r0, #38	; 0x26
 8003024:	f000 feb1 	bl	8003d8a <HAL_NVIC_EnableIRQ>
}
 8003028:	bf00      	nop
 800302a:	3730      	adds	r7, #48	; 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40013800 	.word	0x40013800
 8003034:	40023800 	.word	0x40023800
 8003038:	40020000 	.word	0x40020000
 800303c:	40004400 	.word	0x40004400

08003040 <commandMode>:
#include "usart.h"



void commandMode()
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"\nPasser en mode Commande\n\n", 27);
 8003046:	221b      	movs	r2, #27
 8003048:	4918      	ldr	r1, [pc, #96]	; (80030ac <commandMode+0x6c>)
 800304a:	4819      	ldr	r0, [pc, #100]	; (80030b0 <commandMode+0x70>)
 800304c:	f005 f804 	bl	8008058 <HAL_UART_Transmit_IT>

	//Go into Command mode
		char CMD_MODE[4] = {'$','$','$'};
 8003050:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <commandMode+0x74>)
 8003052:	60fb      	str	r3, [r7, #12]
		uint8_t ok[5] = {0};
 8003054:	2300      	movs	r3, #0
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	2300      	movs	r3, #0
 800305a:	723b      	strb	r3, [r7, #8]

		HAL_Delay(250);
 800305c:	20fa      	movs	r0, #250	; 0xfa
 800305e:	f000 f95d 	bl	800331c <HAL_Delay>

		do{
			HAL_UART_Transmit(&huart1, (uint8_t *)CMD_MODE, strlen(CMD_MODE), 5000);
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd f88a 	bl	8000180 <strlen>
 800306c:	4603      	mov	r3, r0
 800306e:	b29a      	uxth	r2, r3
 8003070:	f107 010c 	add.w	r1, r7, #12
 8003074:	f241 3388 	movw	r3, #5000	; 0x1388
 8003078:	480f      	ldr	r0, [pc, #60]	; (80030b8 <commandMode+0x78>)
 800307a:	f004 feae 	bl	8007dda <HAL_UART_Transmit>
		 	HAL_UART_Receive(&huart1, (uint8_t *)ok, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME);
 800307e:	1d39      	adds	r1, r7, #4
 8003080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003084:	f242 7210 	movw	r2, #10000	; 0x2710
 8003088:	480b      	ldr	r0, [pc, #44]	; (80030b8 <commandMode+0x78>)
 800308a:	f004 ff3f 	bl	8007f0c <HAL_UART_Receive>
		  }while (strstr((char *) ok, "CMD")==NULL);
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	490a      	ldr	r1, [pc, #40]	; (80030bc <commandMode+0x7c>)
 8003092:	4618      	mov	r0, r3
 8003094:	f006 fa88 	bl	80095a8 <strstr>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0e1      	beq.n	8003062 <commandMode+0x22>
		HAL_Delay(250);
 800309e:	20fa      	movs	r0, #250	; 0xfa
 80030a0:	f000 f93c 	bl	800331c <HAL_Delay>
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	0800d3ac 	.word	0x0800d3ac
 80030b0:	2000035c 	.word	0x2000035c
 80030b4:	00242424 	.word	0x00242424
 80030b8:	2000031c 	.word	0x2000031c
 80030bc:	0800d3c8 	.word	0x0800d3c8

080030c0 <sendCommand>:


//void sendCommand(char * CMD, char * ACK,uint8_t timeout , uint8_t * ANS)
void sendCommand(char * CMD, char * ACK, int * ANS)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
	int i =0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
	int k = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
	//uint8_t TIME_Delay;

	if(strstr(CMD, "scan")==NULL)
 80030d4:	4922      	ldr	r1, [pc, #136]	; (8003160 <sendCommand+0xa0>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f006 fa66 	bl	80095a8 <strstr>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <sendCommand+0x28>
		k = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e001      	b.n	80030ec <sendCommand+0x2c>
	else
		k = 10;
 80030e8:	230a      	movs	r3, #10
 80030ea:	613b      	str	r3, [r7, #16]

	memset(ANS,0,MAX_RCP_LEN);
 80030ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80030f0:	2100      	movs	r1, #0
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f005 fb86 	bl	8008804 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		 i++;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3301      	adds	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
	 		 HAL_Delay(200);
 80030fe:	20c8      	movs	r0, #200	; 0xc8
 8003100:	f000 f90c 	bl	800331c <HAL_Delay>

	 		 HAL_UART_Transmit_IT(&huart1,  (uint8_t *)CMD, strlen(CMD));
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7fd f83b 	bl	8000180 <strlen>
 800310a:	4603      	mov	r3, r0
 800310c:	b29b      	uxth	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	4814      	ldr	r0, [pc, #80]	; (8003164 <sendCommand+0xa4>)
 8003114:	f004 ffa0 	bl	8008058 <HAL_UART_Transmit_IT>
	 		 HAL_UART_Receive(&huart1,  (uint8_t *)ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*k);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	f242 7210 	movw	r2, #10000	; 0x2710
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	480e      	ldr	r0, [pc, #56]	; (8003164 <sendCommand+0xa4>)
 800312a:	f004 feef 	bl	8007f0c <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)ANS, strlen(ANS));
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd f826 	bl	8000180 <strlen>
 8003134:	4603      	mov	r3, r0
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	480a      	ldr	r0, [pc, #40]	; (8003168 <sendCommand+0xa8>)
 800313e:	f004 ff8b 	bl	8008058 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <2);
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f006 fa2f 	bl	80095a8 <strstr>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <sendCommand+0x96>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b01      	cmp	r3, #1
 8003154:	ddd0      	ble.n	80030f8 <sendCommand+0x38>

 }
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	0800d3cc 	.word	0x0800d3cc
 8003164:	2000031c 	.word	0x2000031c
 8003168:	2000035c 	.word	0x2000035c

0800316c <sendData>:

void sendData(char * DATA, char * ACK, int * ANS)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
	int i =0;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

	memset(ANS,0,MAX_RCP_LEN);
 800317c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003180:	2100      	movs	r1, #0
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f005 fb3e 	bl	8008804 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		i++;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3301      	adds	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
	 		HAL_Delay(200);
 800318e:	20c8      	movs	r0, #200	; 0xc8
 8003190:	f000 f8c4 	bl	800331c <HAL_Delay>
	 		 HAL_UART_Transmit(&huart1,  (uint8_t *)DATA, strlen(DATA), DEFAULT_WAIT_RESPONSE_TIME*10);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7fc fff3 	bl	8000180 <strlen>
 800319a:	4603      	mov	r3, r0
 800319c:	b29a      	uxth	r2, r3
 800319e:	f242 7310 	movw	r3, #10000	; 0x2710
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	4811      	ldr	r0, [pc, #68]	; (80031ec <sendData+0x80>)
 80031a6:	f004 fe18 	bl	8007dda <HAL_UART_Transmit>
	 		 HAL_UART_Receive(&huart1,  (uint8_t *)ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*10);
 80031aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80031ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	480d      	ldr	r0, [pc, #52]	; (80031ec <sendData+0x80>)
 80031b6:	f004 fea9 	bl	8007f0c <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)ANS, strlen((char *)ANS));
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fc ffe0 	bl	8000180 <strlen>
 80031c0:	4603      	mov	r3, r0
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4809      	ldr	r0, [pc, #36]	; (80031f0 <sendData+0x84>)
 80031ca:	f004 ff45 	bl	8008058 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <2);
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f006 f9e9 	bl	80095a8 <strstr>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <sendData+0x76>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	ddd2      	ble.n	8003188 <sendData+0x1c>

 }
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000031c 	.word	0x2000031c
 80031f0:	2000035c 	.word	0x2000035c

080031f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031f6:	e003      	b.n	8003200 <LoopCopyDataInit>

080031f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031fe:	3104      	adds	r1, #4

08003200 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003200:	480a      	ldr	r0, [pc, #40]	; (800322c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003204:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003206:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003208:	d3f6      	bcc.n	80031f8 <CopyDataInit>
  ldr r2, =_sbss
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800320c:	e002      	b.n	8003214 <LoopFillZerobss>

0800320e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003210:	f842 3b04 	str.w	r3, [r2], #4

08003214 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003216:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003218:	d3f9      	bcc.n	800320e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800321a:	f7ff fc25 	bl	8002a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800321e:	f005 facd 	bl	80087bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003222:	f7fe fe8d 	bl	8001f40 <main>
  bx lr
 8003226:	4770      	bx	lr
  ldr r3, =_sidata
 8003228:	0800d97c 	.word	0x0800d97c
  ldr r0, =_sdata
 800322c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003230:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8003234:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8003238:	200003b0 	.word	0x200003b0

0800323c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800323c:	e7fe      	b.n	800323c <ADC1_IRQHandler>

0800323e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003248:	2003      	movs	r0, #3
 800324a:	f000 fd77 	bl	8003d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800324e:	2000      	movs	r0, #0
 8003250:	f000 f80e 	bl	8003270 <HAL_InitTick>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	71fb      	strb	r3, [r7, #7]
 800325e:	e001      	b.n	8003264 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003260:	f7ff fab2 	bl	80027c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003264:	79fb      	ldrb	r3, [r7, #7]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_InitTick+0x68>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_InitTick+0x6c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <HAL_InitTick+0x68>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003290:	fbb1 f3f3 	udiv	r3, r1, r3
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fd92 	bl	8003dc2 <HAL_SYSTICK_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10f      	bne.n	80032c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d809      	bhi.n	80032be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032aa:	2200      	movs	r2, #0
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295
 80032b2:	f000 fd4e 	bl	8003d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_InitTick+0x70>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e007      	b.n	80032ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e004      	b.n	80032ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e001      	b.n	80032ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000008 	.word	0x20000008
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_IncTick+0x1c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_IncTick+0x20>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4413      	add	r3, r2
 80032f2:	4a03      	ldr	r2, [pc, #12]	; (8003300 <HAL_IncTick+0x1c>)
 80032f4:	6013      	str	r3, [r2, #0]
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000039c 	.word	0x2000039c
 8003304:	20000008 	.word	0x20000008

08003308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return uwTick;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_GetTick+0x10>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	2000039c 	.word	0x2000039c

0800331c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff fff0 	bl	8003308 <HAL_GetTick>
 8003328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d004      	beq.n	8003340 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_Delay+0x40>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4413      	add	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003340:	bf00      	nop
 8003342:	f7ff ffe1 	bl	8003308 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	429a      	cmp	r2, r3
 8003350:	d8f7      	bhi.n	8003342 <HAL_Delay+0x26>
  {
  }
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000008 	.word	0x20000008

08003360 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e127      	b.n	80035d0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d115      	bne.n	80033ba <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339c:	4b8e      	ldr	r3, [pc, #568]	; (80035d8 <HAL_ADC_Init+0x278>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a8d      	ldr	r2, [pc, #564]	; (80035d8 <HAL_ADC_Init+0x278>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	4b8b      	ldr	r3, [pc, #556]	; (80035d8 <HAL_ADC_Init+0x278>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fe faed 	bl	8001994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 80ff 	bne.w	80035c6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033d0:	f023 0302 	bic.w	r3, r3, #2
 80033d4:	f043 0202 	orr.w	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80033dc:	4b7f      	ldr	r3, [pc, #508]	; (80035dc <HAL_ADC_Init+0x27c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	497c      	ldr	r1, [pc, #496]	; (80035dc <HAL_ADC_Init+0x27c>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80033f6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	4619      	mov	r1, r3
 8003400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003404:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800341a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003420:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003428:	4619      	mov	r1, r3
 800342a:	2302      	movs	r3, #2
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8003442:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8003444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003446:	4313      	orrs	r3, r2
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	2b10      	cmp	r3, #16
 8003450:	d007      	beq.n	8003462 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800345a:	4313      	orrs	r3, r2
 800345c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345e:	4313      	orrs	r3, r2
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d04f      	beq.n	8003510 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003476:	4313      	orrs	r3, r2
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8003482:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6912      	ldr	r2, [r2, #16]
 8003488:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800348c:	d003      	beq.n	8003496 <HAL_ADC_Init+0x136>
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6912      	ldr	r2, [r2, #16]
 8003492:	2a01      	cmp	r2, #1
 8003494:	d102      	bne.n	800349c <HAL_ADC_Init+0x13c>
 8003496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800349a:	e000      	b.n	800349e <HAL_ADC_Init+0x13e>
 800349c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800349e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80034a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a2:	4313      	orrs	r3, r2
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d125      	bne.n	80034fc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d114      	bne.n	80034e4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	3b01      	subs	r3, #1
 80034c0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80034c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	617a      	str	r2, [r7, #20]
  return result;
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4093      	lsls	r3, r2
 80034d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	4313      	orrs	r3, r2
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
 80034e2:	e00b      	b.n	80034fc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_ADC_Init+0x280>)
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800350c:	430b      	orrs	r3, r1
 800350e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <HAL_ADC_Init+0x284>)
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003520:	430b      	orrs	r3, r1
 8003522:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352c:	d003      	beq.n	8003536 <HAL_ADC_Init+0x1d6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d119      	bne.n	800356a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800354a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	fa92 f2a2 	rbit	r2, r2
 8003552:	60fa      	str	r2, [r7, #12]
  return result;
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	fab2 f282 	clz	r2, r2
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	fa03 f202 	lsl.w	r2, r3, r2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
 8003568:	e007      	b.n	800357a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_ADC_Init+0x288>)
 8003582:	4013      	ands	r3, r2
 8003584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003586:	429a      	cmp	r2, r3
 8003588:	d10b      	bne.n	80035a2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003594:	f023 0303 	bic.w	r3, r3, #3
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	64da      	str	r2, [r3, #76]	; 0x4c
 80035a0:	e014      	b.n	80035cc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	f023 0312 	bic.w	r3, r3, #18
 80035aa:	f043 0210 	orr.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80035c4:	e002      	b.n	80035cc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3738      	adds	r7, #56	; 0x38
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40012700 	.word	0x40012700
 80035e0:	fcfc16ff 	.word	0xfcfc16ff
 80035e4:	c0fff189 	.word	0xc0fff189
 80035e8:	bf80fffe 	.word	0xbf80fffe

080035ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_ADC_Start+0x1a>
 8003602:	2302      	movs	r3, #2
 8003604:	e04e      	b.n	80036a4 <HAL_ADC_Start+0xb8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa4e 	bl	8003ab0 <ADC_Enable>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d141      	bne.n	80036a2 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d106      	bne.n	800366c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	f023 0206 	bic.w	r2, r3, #6
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	651a      	str	r2, [r3, #80]	; 0x50
 800366a:	e002      	b.n	8003672 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003682:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036a0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c8:	d113      	bne.n	80036f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d8:	d10b      	bne.n	80036f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e061      	b.n	80037b6 <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80036f2:	f7ff fe09 	bl	8003308 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036f8:	e01a      	b.n	8003730 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d016      	beq.n	8003730 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_ADC_PollForConversion+0x6c>
 8003708:	f7ff fdfe 	bl	8003308 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d20b      	bcs.n	8003730 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	f043 0204 	orr.w	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e042      	b.n	80037b6 <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0dd      	beq.n	80036fa <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f06f 0212 	mvn.w	r2, #18
 800374e:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d124      	bne.n	80037b4 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d11f      	bne.n	80037b4 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800378c:	2b00      	cmp	r3, #0
 800378e:	d111      	bne.n	80037b4 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x20>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e14f      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x2c0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b06      	cmp	r3, #6
 8003806:	d81c      	bhi.n	8003842 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	3b05      	subs	r3, #5
 800381a:	221f      	movs	r2, #31
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	4019      	ands	r1, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	3b05      	subs	r3, #5
 8003834:	fa00 f203 	lsl.w	r2, r0, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
 8003840:	e07e      	b.n	8003940 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d81c      	bhi.n	8003884 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	3b23      	subs	r3, #35	; 0x23
 800385c:	221f      	movs	r2, #31
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	4019      	ands	r1, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	3b23      	subs	r3, #35	; 0x23
 8003876:	fa00 f203 	lsl.w	r2, r0, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c
 8003882:	e05d      	b.n	8003940 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b12      	cmp	r3, #18
 800388a:	d81c      	bhi.n	80038c6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	3b41      	subs	r3, #65	; 0x41
 800389e:	221f      	movs	r2, #31
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	4019      	ands	r1, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	3b41      	subs	r3, #65	; 0x41
 80038b8:	fa00 f203 	lsl.w	r2, r0, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
 80038c4:	e03c      	b.n	8003940 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b18      	cmp	r3, #24
 80038cc:	d81c      	bhi.n	8003908 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	3b5f      	subs	r3, #95	; 0x5f
 80038e0:	221f      	movs	r2, #31
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	4019      	ands	r1, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	3b5f      	subs	r3, #95	; 0x5f
 80038fa:	fa00 f203 	lsl.w	r2, r0, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	635a      	str	r2, [r3, #52]	; 0x34
 8003906:	e01b      	b.n	8003940 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	3b7d      	subs	r3, #125	; 0x7d
 800391a:	221f      	movs	r2, #31
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	4019      	ands	r1, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	3b7d      	subs	r3, #125	; 0x7d
 8003934:	fa00 f203 	lsl.w	r2, r0, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b09      	cmp	r3, #9
 8003946:	d81a      	bhi.n	800397e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6959      	ldr	r1, [r3, #20]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	2207      	movs	r2, #7
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	4019      	ands	r1, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6898      	ldr	r0, [r3, #8]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	fa00 f203 	lsl.w	r2, r0, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	615a      	str	r2, [r3, #20]
 800397c:	e05d      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b13      	cmp	r3, #19
 8003984:	d81c      	bhi.n	80039c0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6919      	ldr	r1, [r3, #16]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	3b1e      	subs	r3, #30
 8003998:	2207      	movs	r2, #7
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	4019      	ands	r1, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6898      	ldr	r0, [r3, #8]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	3b1e      	subs	r3, #30
 80039b2:	fa00 f203 	lsl.w	r2, r0, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e03c      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b1d      	cmp	r3, #29
 80039c6:	d81c      	bhi.n	8003a02 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68d9      	ldr	r1, [r3, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	3b3c      	subs	r3, #60	; 0x3c
 80039da:	2207      	movs	r2, #7
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4019      	ands	r1, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6898      	ldr	r0, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	3b3c      	subs	r3, #60	; 0x3c
 80039f4:	fa00 f203 	lsl.w	r2, r0, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	60da      	str	r2, [r3, #12]
 8003a00:	e01b      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	3b5a      	subs	r3, #90	; 0x5a
 8003a14:	2207      	movs	r2, #7
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	4019      	ands	r1, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6898      	ldr	r0, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3b5a      	subs	r3, #90	; 0x5a
 8003a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d003      	beq.n	8003a4a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a46:	2b11      	cmp	r3, #17
 8003a48:	d121      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d11b      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a60:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d111      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_ADC_ConfigChannel+0x2d0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <HAL_ADC_ConfigChannel+0x2d4>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	0c9a      	lsrs	r2, r3, #18
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003a80:	e002      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f9      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40012700 	.word	0x40012700
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	431bde83 	.word	0x431bde83

08003ab0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d03c      	beq.n	8003b48 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <ADC_Enable+0xa4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <ADC_Enable+0xa8>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	0c9a      	lsrs	r2, r3, #18
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003af2:	e002      	b.n	8003afa <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f9      	bne.n	8003af4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8003b00:	f7ff fc02 	bl	8003308 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b06:	e018      	b.n	8003b3a <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8003b08:	f7ff fbfe 	bl	8003308 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d911      	bls.n	8003b3a <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	f043 0210 	orr.w	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e007      	b.n	8003b4a <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d1df      	bne.n	8003b08 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000000 	.word	0x20000000
 8003b58:	431bde83 	.word	0x431bde83

08003b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <__NVIC_GetPriorityGrouping+0x18>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 0307 	and.w	r3, r3, #7
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0b      	blt.n	8003bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	4906      	ldr	r1, [pc, #24]	; (8003bf4 <__NVIC_EnableIRQ+0x34>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db12      	blt.n	8003c30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	490a      	ldr	r1, [pc, #40]	; (8003c3c <__NVIC_DisableIRQ+0x44>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	3320      	adds	r3, #32
 8003c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c24:	f3bf 8f4f 	dsb	sy
}
 8003c28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c2a:	f3bf 8f6f 	isb	sy
}
 8003c2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	; (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	; (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
         );
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d08:	d301      	bcc.n	8003d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00f      	b.n	8003d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <SysTick_Config+0x40>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d16:	210f      	movs	r1, #15
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f7ff ff90 	bl	8003c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <SysTick_Config+0x40>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <SysTick_Config+0x40>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff09 	bl	8003b5c <__NVIC_SetPriorityGrouping>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d64:	f7ff ff1e 	bl	8003ba4 <__NVIC_GetPriorityGrouping>
 8003d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f7ff ff90 	bl	8003c94 <NVIC_EncodePriority>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff5f 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff11 	bl	8003bc0 <__NVIC_EnableIRQ>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff1f 	bl	8003bf8 <__NVIC_DisableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff94 	bl	8003cf8 <SysTick_Config>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d005      	beq.n	8003dfe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2204      	movs	r2, #4
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e029      	b.n	8003e52 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 020e 	bic.w	r2, r2, #14
 8003e0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 021c 	and.w	r2, r3, #28
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e30:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
    }
  }
  return status;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e6a:	b2db      	uxtb	r3, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e8e:	e160      	b.n	8004152 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2101      	movs	r1, #1
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8152 	beq.w	800414c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d00b      	beq.n	8003ec8 <HAL_GPIO_Init+0x50>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d007      	beq.n	8003ec8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ebc:	2b11      	cmp	r3, #17
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b12      	cmp	r3, #18
 8003ec6:	d130      	bne.n	8003f2a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003efe:	2201      	movs	r2, #1
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 0201 	and.w	r2, r3, #1
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	2203      	movs	r2, #3
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0xf2>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b12      	cmp	r3, #18
 8003f68:	d123      	bne.n	8003fb2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	6939      	ldr	r1, [r7, #16]
 8003fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0203 	and.w	r2, r3, #3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80ac 	beq.w	800414c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff4:	4b5e      	ldr	r3, [pc, #376]	; (8004170 <HAL_GPIO_Init+0x2f8>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	4a5d      	ldr	r2, [pc, #372]	; (8004170 <HAL_GPIO_Init+0x2f8>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6213      	str	r3, [r2, #32]
 8004000:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_GPIO_Init+0x2f8>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800400c:	4a59      	ldr	r2, [pc, #356]	; (8004174 <HAL_GPIO_Init+0x2fc>)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	089b      	lsrs	r3, r3, #2
 8004012:	3302      	adds	r3, #2
 8004014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004018:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	220f      	movs	r2, #15
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_GPIO_Init+0x300>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d025      	beq.n	8004084 <HAL_GPIO_Init+0x20c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a50      	ldr	r2, [pc, #320]	; (800417c <HAL_GPIO_Init+0x304>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01f      	beq.n	8004080 <HAL_GPIO_Init+0x208>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a4f      	ldr	r2, [pc, #316]	; (8004180 <HAL_GPIO_Init+0x308>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d019      	beq.n	800407c <HAL_GPIO_Init+0x204>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a4e      	ldr	r2, [pc, #312]	; (8004184 <HAL_GPIO_Init+0x30c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_GPIO_Init+0x200>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a4d      	ldr	r2, [pc, #308]	; (8004188 <HAL_GPIO_Init+0x310>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00d      	beq.n	8004074 <HAL_GPIO_Init+0x1fc>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a4c      	ldr	r2, [pc, #304]	; (800418c <HAL_GPIO_Init+0x314>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <HAL_GPIO_Init+0x1f8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a4b      	ldr	r2, [pc, #300]	; (8004190 <HAL_GPIO_Init+0x318>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_GPIO_Init+0x1f4>
 8004068:	2306      	movs	r3, #6
 800406a:	e00c      	b.n	8004086 <HAL_GPIO_Init+0x20e>
 800406c:	2307      	movs	r3, #7
 800406e:	e00a      	b.n	8004086 <HAL_GPIO_Init+0x20e>
 8004070:	2305      	movs	r3, #5
 8004072:	e008      	b.n	8004086 <HAL_GPIO_Init+0x20e>
 8004074:	2304      	movs	r3, #4
 8004076:	e006      	b.n	8004086 <HAL_GPIO_Init+0x20e>
 8004078:	2303      	movs	r3, #3
 800407a:	e004      	b.n	8004086 <HAL_GPIO_Init+0x20e>
 800407c:	2302      	movs	r3, #2
 800407e:	e002      	b.n	8004086 <HAL_GPIO_Init+0x20e>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_GPIO_Init+0x20e>
 8004084:	2300      	movs	r3, #0
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	f002 0203 	and.w	r2, r2, #3
 800408c:	0092      	lsls	r2, r2, #2
 800408e:	4093      	lsls	r3, r2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004096:	4937      	ldr	r1, [pc, #220]	; (8004174 <HAL_GPIO_Init+0x2fc>)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	3302      	adds	r3, #2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_GPIO_Init+0x31c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040c8:	4a32      	ldr	r2, [pc, #200]	; (8004194 <HAL_GPIO_Init+0x31c>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_GPIO_Init+0x31c>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040f2:	4a28      	ldr	r2, [pc, #160]	; (8004194 <HAL_GPIO_Init+0x31c>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040f8:	4b26      	ldr	r3, [pc, #152]	; (8004194 <HAL_GPIO_Init+0x31c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <HAL_GPIO_Init+0x31c>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <HAL_GPIO_Init+0x31c>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004146:	4a13      	ldr	r2, [pc, #76]	; (8004194 <HAL_GPIO_Init+0x31c>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f ae97 	bne.w	8003e90 <HAL_GPIO_Init+0x18>
  }
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	40010000 	.word	0x40010000
 8004178:	40020000 	.word	0x40020000
 800417c:	40020400 	.word	0x40020400
 8004180:	40020800 	.word	0x40020800
 8004184:	40020c00 	.word	0x40020c00
 8004188:	40021000 	.word	0x40021000
 800418c:	40021400 	.word	0x40021400
 8004190:	40021800 	.word	0x40021800
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
 80041a4:	4613      	mov	r3, r2
 80041a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a8:	787b      	ldrb	r3, [r7, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80041b4:	e003      	b.n	80041be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	041a      	lsls	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	619a      	str	r2, [r3, #24]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041da:	887a      	ldrh	r2, [r7, #2]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	43d9      	mvns	r1, r3
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	400b      	ands	r3, r1
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd faf6 	bl	800180c <HAL_GPIO_EXTI_Callback>
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40010400 	.word	0x40010400

0800422c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e12b      	b.n	8004496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd fc9c 	bl	8001b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800427e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800428e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004290:	f003 fa6e 	bl	8007770 <HAL_RCC_GetPCLK1Freq>
 8004294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4a81      	ldr	r2, [pc, #516]	; (80044a0 <HAL_I2C_Init+0x274>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d807      	bhi.n	80042b0 <HAL_I2C_Init+0x84>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a80      	ldr	r2, [pc, #512]	; (80044a4 <HAL_I2C_Init+0x278>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	bf94      	ite	ls
 80042a8:	2301      	movls	r3, #1
 80042aa:	2300      	movhi	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e006      	b.n	80042be <HAL_I2C_Init+0x92>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a7d      	ldr	r2, [pc, #500]	; (80044a8 <HAL_I2C_Init+0x27c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	bf94      	ite	ls
 80042b8:	2301      	movls	r3, #1
 80042ba:	2300      	movhi	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0e7      	b.n	8004496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a78      	ldr	r2, [pc, #480]	; (80044ac <HAL_I2C_Init+0x280>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0c9b      	lsrs	r3, r3, #18
 80042d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a6a      	ldr	r2, [pc, #424]	; (80044a0 <HAL_I2C_Init+0x274>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d802      	bhi.n	8004300 <HAL_I2C_Init+0xd4>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3301      	adds	r3, #1
 80042fe:	e009      	b.n	8004314 <HAL_I2C_Init+0xe8>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	4a69      	ldr	r2, [pc, #420]	; (80044b0 <HAL_I2C_Init+0x284>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	3301      	adds	r3, #1
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	430b      	orrs	r3, r1
 800431a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	495c      	ldr	r1, [pc, #368]	; (80044a0 <HAL_I2C_Init+0x274>)
 8004330:	428b      	cmp	r3, r1
 8004332:	d819      	bhi.n	8004368 <HAL_I2C_Init+0x13c>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1e59      	subs	r1, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004342:	1c59      	adds	r1, r3, #1
 8004344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004348:	400b      	ands	r3, r1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_I2C_Init+0x138>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1e59      	subs	r1, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fbb1 f3f3 	udiv	r3, r1, r3
 800435c:	3301      	adds	r3, #1
 800435e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004362:	e051      	b.n	8004408 <HAL_I2C_Init+0x1dc>
 8004364:	2304      	movs	r3, #4
 8004366:	e04f      	b.n	8004408 <HAL_I2C_Init+0x1dc>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d111      	bne.n	8004394 <HAL_I2C_Init+0x168>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1e58      	subs	r0, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	440b      	add	r3, r1
 800437e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004382:	3301      	adds	r3, #1
 8004384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e012      	b.n	80043ba <HAL_I2C_Init+0x18e>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	0099      	lsls	r1, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043aa:	3301      	adds	r3, #1
 80043ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Init+0x196>
 80043be:	2301      	movs	r3, #1
 80043c0:	e022      	b.n	8004408 <HAL_I2C_Init+0x1dc>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10e      	bne.n	80043e8 <HAL_I2C_Init+0x1bc>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1e58      	subs	r0, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	460b      	mov	r3, r1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	440b      	add	r3, r1
 80043d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043dc:	3301      	adds	r3, #1
 80043de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e6:	e00f      	b.n	8004408 <HAL_I2C_Init+0x1dc>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	0099      	lsls	r1, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fe:	3301      	adds	r3, #1
 8004400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	6809      	ldr	r1, [r1, #0]
 800440c:	4313      	orrs	r3, r2
 800440e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6911      	ldr	r1, [r2, #16]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68d2      	ldr	r2, [r2, #12]
 8004442:	4311      	orrs	r1, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	430b      	orrs	r3, r1
 800444a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	000186a0 	.word	0x000186a0
 80044a4:	001e847f 	.word	0x001e847f
 80044a8:	003d08ff 	.word	0x003d08ff
 80044ac:	431bde83 	.word	0x431bde83
 80044b0:	10624dd3 	.word	0x10624dd3

080044b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	461a      	mov	r2, r3
 80044c0:	460b      	mov	r3, r1
 80044c2:	817b      	strh	r3, [r7, #10]
 80044c4:	4613      	mov	r3, r2
 80044c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044c8:	f7fe ff1e 	bl	8003308 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	f040 80e0 	bne.w	800469c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2319      	movs	r3, #25
 80044e2:	2201      	movs	r2, #1
 80044e4:	4970      	ldr	r1, [pc, #448]	; (80046a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f002 f9de 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
 80044f4:	e0d3      	b.n	800469e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_I2C_Master_Transmit+0x50>
 8004500:	2302      	movs	r3, #2
 8004502:	e0cc      	b.n	800469e <HAL_I2C_Master_Transmit+0x1ea>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d007      	beq.n	800452a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2221      	movs	r2, #33	; 0x21
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2210      	movs	r2, #16
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	893a      	ldrh	r2, [r7, #8]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a50      	ldr	r2, [pc, #320]	; (80046ac <HAL_I2C_Master_Transmit+0x1f8>)
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800456c:	8979      	ldrh	r1, [r7, #10]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	6a3a      	ldr	r2, [r7, #32]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f001 ffa0 	bl	80064b8 <I2C_MasterRequestWrite>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e08d      	b.n	800469e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004598:	e066      	b.n	8004668 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	6a39      	ldr	r1, [r7, #32]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f002 fa58 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d107      	bne.n	80045c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e06b      	b.n	800469e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d11b      	bne.n	800463c <HAL_I2C_Master_Transmit+0x188>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d017      	beq.n	800463c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	6a39      	ldr	r1, [r7, #32]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f002 fa48 	bl	8006ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2b04      	cmp	r3, #4
 8004652:	d107      	bne.n	8004664 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004662:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e01a      	b.n	800469e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d194      	bne.n	800459a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	00100002 	.word	0x00100002
 80046ac:	ffff0000 	.word	0xffff0000

080046b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	460b      	mov	r3, r1
 80046be:	817b      	strh	r3, [r7, #10]
 80046c0:	4613      	mov	r3, r2
 80046c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046c4:	f7fe fe20 	bl	8003308 <HAL_GetTick>
 80046c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	f040 820b 	bne.w	8004aee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	2319      	movs	r3, #25
 80046de:	2201      	movs	r2, #1
 80046e0:	497c      	ldr	r1, [pc, #496]	; (80048d4 <HAL_I2C_Master_Receive+0x224>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f002 f8e0 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
 80046f0:	e1fe      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_I2C_Master_Receive+0x50>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e1f7      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d007      	beq.n	8004726 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004734:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2222      	movs	r2, #34	; 0x22
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2210      	movs	r2, #16
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	893a      	ldrh	r2, [r7, #8]
 8004756:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a5c      	ldr	r2, [pc, #368]	; (80048d8 <HAL_I2C_Master_Receive+0x228>)
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004768:	8979      	ldrh	r1, [r7, #10]
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 ff24 	bl	80065bc <I2C_MasterRequestRead>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1b8      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d113      	bne.n	80047ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	623b      	str	r3, [r7, #32]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e18c      	b.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d11b      	bne.n	80047ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e16c      	b.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d11b      	bne.n	800482e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	e14c      	b.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800483c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004854:	e138      	b.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	2b03      	cmp	r3, #3
 800485c:	f200 80f1 	bhi.w	8004a42 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	2b01      	cmp	r3, #1
 8004866:	d123      	bne.n	80048b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f002 f9a5 	bl	8006bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e139      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ae:	e10b      	b.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d14e      	bne.n	8004956 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	2200      	movs	r2, #0
 80048c0:	4906      	ldr	r1, [pc, #24]	; (80048dc <HAL_I2C_Master_Receive+0x22c>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f001 fff0 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e10e      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
 80048d2:	bf00      	nop
 80048d4:	00100002 	.word	0x00100002
 80048d8:	ffff0000 	.word	0xffff0000
 80048dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004954:	e0b8      	b.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2200      	movs	r2, #0
 800495e:	4966      	ldr	r1, [pc, #408]	; (8004af8 <HAL_I2C_Master_Receive+0x448>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f001 ffa1 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0bf      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	2200      	movs	r2, #0
 80049ba:	494f      	ldr	r1, [pc, #316]	; (8004af8 <HAL_I2C_Master_Receive+0x448>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f001 ff73 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e091      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a40:	e042      	b.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f002 f8b8 	bl	8006bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e04c      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d118      	bne.n	8004ac8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f aec2 	bne.w	8004856 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	00010004 	.word	0x00010004

08004afc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004b0c:	f7fe fbfc 	bl	8003308 <HAL_GetTick>
 8004b10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	f040 8111 	bne.w	8004d46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2319      	movs	r3, #25
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4988      	ldr	r1, [pc, #544]	; (8004d50 <HAL_I2C_IsDeviceReady+0x254>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f001 feba 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e104      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_I2C_IsDeviceReady+0x50>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e0fd      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d007      	beq.n	8004b72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2224      	movs	r2, #36	; 0x24
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a70      	ldr	r2, [pc, #448]	; (8004d54 <HAL_I2C_IsDeviceReady+0x258>)
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f001 fe78 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bcc:	d103      	bne.n	8004bd6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0b6      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004be8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004bea:	f7fe fb8d 	bl	8003308 <HAL_GetTick>
 8004bee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c1e:	e025      	b.n	8004c6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fe fb72 	bl	8003308 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <HAL_I2C_IsDeviceReady+0x13a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	22a0      	movs	r2, #160	; 0xa0
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2ba0      	cmp	r3, #160	; 0xa0
 8004c76:	d005      	beq.n	8004c84 <HAL_I2C_IsDeviceReady+0x188>
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <HAL_I2C_IsDeviceReady+0x188>
 8004c7e:	7dbb      	ldrb	r3, [r7, #22]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0cd      	beq.n	8004c20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d129      	bne.n	8004cee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2319      	movs	r3, #25
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4921      	ldr	r1, [pc, #132]	; (8004d50 <HAL_I2C_IsDeviceReady+0x254>)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f001 fdec 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e036      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e02c      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2319      	movs	r3, #25
 8004d0e:	2201      	movs	r2, #1
 8004d10:	490f      	ldr	r1, [pc, #60]	; (8004d50 <HAL_I2C_IsDeviceReady+0x254>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f001 fdc8 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e012      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3301      	adds	r3, #1
 8004d26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	f4ff af32 	bcc.w	8004b96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
  }
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	00100002 	.word	0x00100002
 8004d54:	ffff0000 	.word	0xffff0000

08004d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d003      	beq.n	8004d90 <HAL_I2C_EV_IRQHandler+0x38>
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	f040 80bd 	bne.w	8004f0a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10d      	bne.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004db0:	d003      	beq.n	8004dba <HAL_I2C_EV_IRQHandler+0x62>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004db8:	d101      	bne.n	8004dbe <HAL_I2C_EV_IRQHandler+0x66>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_I2C_EV_IRQHandler+0x68>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	f000 812e 	beq.w	8005022 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <HAL_I2C_EV_IRQHandler+0x92>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	0a5b      	lsrs	r3, r3, #9
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d006      	beq.n	8004dea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 ff71 	bl	8006cc4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fd58 	bl	8005898 <I2C_Master_SB>
 8004de8:	e08e      	b.n	8004f08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_I2C_EV_IRQHandler+0xb2>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	0a5b      	lsrs	r3, r3, #9
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fdcd 	bl	80059a2 <I2C_Master_ADD10>
 8004e08:	e07e      	b.n	8004f08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <HAL_I2C_EV_IRQHandler+0xd2>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	0a5b      	lsrs	r3, r3, #9
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fde6 	bl	80059f4 <I2C_Master_ADDR>
 8004e28:	e06e      	b.n	8004f08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d037      	beq.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e44:	f000 80ef 	beq.w	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	09db      	lsrs	r3, r3, #7
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00f      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	0a9b      	lsrs	r3, r3, #10
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d103      	bne.n	8004e74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f9e5 	bl	800523c <I2C_MasterTransmit_TXE>
 8004e72:	e049      	b.n	8004f08 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	089b      	lsrs	r3, r3, #2
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80d2 	beq.w	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	0a5b      	lsrs	r3, r3, #9
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80cb 	beq.w	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d103      	bne.n	8004e9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fa6c 	bl	8005374 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e9c:	e0c3      	b.n	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fad0 	bl	8005444 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ea4:	e0bf      	b.n	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	f000 80b7 	beq.w	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	099b      	lsrs	r3, r3, #6
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00f      	beq.n	8004ee4 <HAL_I2C_EV_IRQHandler+0x18c>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	0a9b      	lsrs	r3, r3, #10
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_I2C_EV_IRQHandler+0x18c>
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fb40 	bl	8005562 <I2C_MasterReceive_RXNE>
 8004ee2:	e011      	b.n	8004f08 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 809a 	beq.w	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	0a5b      	lsrs	r3, r3, #9
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8093 	beq.w	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fbdf 	bl	80056c4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f06:	e08e      	b.n	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004f08:	e08d      	b.n	8005026 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e007      	b.n	8004f2c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d012      	beq.n	8004f5e <HAL_I2C_EV_IRQHandler+0x206>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	0a5b      	lsrs	r3, r3, #9
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00c      	beq.n	8004f5e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f54:	69b9      	ldr	r1, [r7, #24]
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 ff98 	bl	8005e8c <I2C_Slave_ADDR>
 8004f5c:	e066      	b.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <HAL_I2C_EV_IRQHandler+0x226>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	0a5b      	lsrs	r3, r3, #9
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 ffcc 	bl	8005f14 <I2C_Slave_STOPF>
 8004f7c:	e056      	b.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f7e:	7bbb      	ldrb	r3, [r7, #14]
 8004f80:	2b21      	cmp	r3, #33	; 0x21
 8004f82:	d002      	beq.n	8004f8a <HAL_I2C_EV_IRQHandler+0x232>
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	2b29      	cmp	r3, #41	; 0x29
 8004f88:	d125      	bne.n	8004fd6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	09db      	lsrs	r3, r3, #7
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00f      	beq.n	8004fb6 <HAL_I2C_EV_IRQHandler+0x25e>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	0a9b      	lsrs	r3, r3, #10
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_I2C_EV_IRQHandler+0x25e>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 feb0 	bl	8005d14 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fb4:	e039      	b.n	800502a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	089b      	lsrs	r3, r3, #2
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d033      	beq.n	800502a <HAL_I2C_EV_IRQHandler+0x2d2>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	0a5b      	lsrs	r3, r3, #9
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d02d      	beq.n	800502a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fedd 	bl	8005d8e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fd4:	e029      	b.n	800502a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	099b      	lsrs	r3, r3, #6
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00f      	beq.n	8005002 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	0a9b      	lsrs	r3, r3, #10
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	089b      	lsrs	r3, r3, #2
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fee7 	bl	8005dce <I2C_SlaveReceive_RXNE>
 8005000:	e014      	b.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00e      	beq.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	0a5b      	lsrs	r3, r3, #9
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 ff15 	bl	8005e4a <I2C_SlaveReceive_BTF>
 8005020:	e004      	b.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005022:	bf00      	nop
 8005024:	e002      	b.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800502a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b08a      	sub	sp, #40	; 0x28
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800504a:	2300      	movs	r3, #0
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005054:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <HAL_I2C_ER_IRQHandler+0x4e>
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800507e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	0a5b      	lsrs	r3, r3, #9
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00e      	beq.n	80050aa <HAL_I2C_ER_IRQHandler+0x78>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80050a8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	0a9b      	lsrs	r3, r3, #10
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03f      	beq.n	8005136 <HAL_I2C_ER_IRQHandler+0x104>
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	0a1b      	lsrs	r3, r3, #8
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d039      	beq.n	8005136 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80050c2:	7efb      	ldrb	r3, [r7, #27]
 80050c4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80050dc:	7ebb      	ldrb	r3, [r7, #26]
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d112      	bne.n	8005108 <HAL_I2C_ER_IRQHandler+0xd6>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10f      	bne.n	8005108 <HAL_I2C_ER_IRQHandler+0xd6>
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b21      	cmp	r3, #33	; 0x21
 80050ec:	d008      	beq.n	8005100 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b29      	cmp	r3, #41	; 0x29
 80050f2:	d005      	beq.n	8005100 <HAL_I2C_ER_IRQHandler+0xce>
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	2b28      	cmp	r3, #40	; 0x28
 80050f8:	d106      	bne.n	8005108 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b21      	cmp	r3, #33	; 0x21
 80050fe:	d103      	bne.n	8005108 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f001 f837 	bl	8006174 <I2C_Slave_AF>
 8005106:	e016      	b.n	8005136 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005110:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800511a:	7efb      	ldrb	r3, [r7, #27]
 800511c:	2b10      	cmp	r3, #16
 800511e:	d002      	beq.n	8005126 <HAL_I2C_ER_IRQHandler+0xf4>
 8005120:	7efb      	ldrb	r3, [r7, #27]
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d107      	bne.n	8005136 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	0adb      	lsrs	r3, r3, #11
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <HAL_I2C_ER_IRQHandler+0x12e>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	0a1b      	lsrs	r3, r3, #8
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800515e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f86e 	bl	8006254 <I2C_ITError>
  }
}
 8005178:	bf00      	nop
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
 80051d4:	4613      	mov	r3, r2
 80051d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr

080051e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr

08005206 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005252:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	2b00      	cmp	r3, #0
 8005260:	d150      	bne.n	8005304 <I2C_MasterTransmit_TXE+0xc8>
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b21      	cmp	r3, #33	; 0x21
 8005266:	d14d      	bne.n	8005304 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d01d      	beq.n	80052aa <I2C_MasterTransmit_TXE+0x6e>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b20      	cmp	r3, #32
 8005272:	d01a      	beq.n	80052aa <I2C_MasterTransmit_TXE+0x6e>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800527a:	d016      	beq.n	80052aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800528a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2211      	movs	r2, #17
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ff6c 	bl	8005180 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052a8:	e060      	b.n	800536c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d107      	bne.n	80052f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff81 	bl	80051f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052f2:	e03b      	b.n	800536c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff3f 	bl	8005180 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005302:	e033      	b.n	800536c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b21      	cmp	r3, #33	; 0x21
 8005308:	d005      	beq.n	8005316 <I2C_MasterTransmit_TXE+0xda>
 800530a:	7bbb      	ldrb	r3, [r7, #14]
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d12d      	bne.n	800536c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b22      	cmp	r3, #34	; 0x22
 8005314:	d12a      	bne.n	800536c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005330:	e01c      	b.n	800536c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b40      	cmp	r3, #64	; 0x40
 800533c:	d103      	bne.n	8005346 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f880 	bl	8005444 <I2C_MemoryTransmit_TXE_BTF>
}
 8005344:	e012      	b.n	800536c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	781a      	ldrb	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800536a:	e7ff      	b.n	800536c <I2C_MasterTransmit_TXE+0x130>
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b21      	cmp	r3, #33	; 0x21
 800538c:	d156      	bne.n	800543c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d012      	beq.n	80053be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80053bc:	e03e      	b.n	800543c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d01d      	beq.n	8005400 <I2C_MasterTransmit_BTF+0x8c>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d01a      	beq.n	8005400 <I2C_MasterTransmit_BTF+0x8c>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053d0:	d016      	beq.n	8005400 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2211      	movs	r2, #17
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fec1 	bl	8005180 <HAL_I2C_MasterTxCpltCallback>
}
 80053fe:	e01d      	b.n	800543c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800540e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff fea2 	bl	8005180 <HAL_I2C_MasterTxCpltCallback>
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11d      	bne.n	8005498 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10b      	bne.n	800547c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005468:	b2da      	uxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005474:	1c9a      	adds	r2, r3, #2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800547a:	e06e      	b.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005480:	b29b      	uxth	r3, r3
 8005482:	121b      	asrs	r3, r3, #8
 8005484:	b2da      	uxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005496:	e060      	b.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549c:	2b01      	cmp	r3, #1
 800549e:	d10b      	bne.n	80054b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054b6:	e050      	b.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d14c      	bne.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b22      	cmp	r3, #34	; 0x22
 80054c4:	d108      	bne.n	80054d8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d4:	601a      	str	r2, [r3, #0]
}
 80054d6:	e040      	b.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d015      	beq.n	800550e <I2C_MemoryTransmit_TXE_BTF+0xca>
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	2b21      	cmp	r3, #33	; 0x21
 80054e6:	d112      	bne.n	800550e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800550c:	e025      	b.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d120      	bne.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b21      	cmp	r3, #33	; 0x21
 800551c:	d11d      	bne.n	800555a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800552c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff fe4d 	bl	80051f4 <HAL_I2C_MemTxCpltCallback>
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b22      	cmp	r3, #34	; 0x22
 8005574:	f040 80a2 	bne.w	80056bc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d921      	bls.n	80055ca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	f040 8082 	bne.w	80056bc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80055c8:	e078      	b.n	80056bc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d074      	beq.n	80056bc <I2C_MasterReceive_RXNE+0x15a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d002      	beq.n	80055de <I2C_MasterReceive_RXNE+0x7c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d16e      	bne.n	80056bc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 faba 	bl	8006b58 <I2C_WaitOnSTOPRequestThroughIT>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d142      	bne.n	8005670 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005608:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d10a      	bne.n	800565a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fdd7 	bl	8005206 <HAL_I2C_MemRxCpltCallback>
}
 8005658:	e030      	b.n	80056bc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2212      	movs	r2, #18
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fd92 	bl	8005192 <HAL_I2C_MasterRxCpltCallback>
}
 800566e:	e025      	b.n	80056bc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800567e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fdae 	bl	8005218 <HAL_I2C_ErrorCallback>
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d11b      	bne.n	8005714 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005712:	e0bd      	b.n	8005890 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b03      	cmp	r3, #3
 800571c:	d129      	bne.n	8005772 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b04      	cmp	r3, #4
 8005732:	d00a      	beq.n	800574a <I2C_MasterReceive_BTF+0x86>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d007      	beq.n	800574a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005748:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005770:	e08e      	b.n	8005890 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d176      	bne.n	800586a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d002      	beq.n	8005788 <I2C_MasterReceive_BTF+0xc4>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b10      	cmp	r3, #16
 8005786:	d108      	bne.n	800579a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e019      	b.n	80057ce <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d002      	beq.n	80057a6 <I2C_MasterReceive_BTF+0xe2>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d108      	bne.n	80057b8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e00a      	b.n	80057ce <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d007      	beq.n	80057ce <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005828:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d10a      	bne.n	8005854 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fcda 	bl	8005206 <HAL_I2C_MemRxCpltCallback>
}
 8005852:	e01d      	b.n	8005890 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2212      	movs	r2, #18
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fc95 	bl	8005192 <HAL_I2C_MasterRxCpltCallback>
}
 8005868:	e012      	b.n	8005890 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d117      	bne.n	80058dc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058c4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80058c6:	e067      	b.n	8005998 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	611a      	str	r2, [r3, #16]
}
 80058da:	e05d      	b.n	8005998 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e4:	d133      	bne.n	800594e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b21      	cmp	r3, #33	; 0x21
 80058f0:	d109      	bne.n	8005906 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005902:	611a      	str	r2, [r3, #16]
 8005904:	e008      	b.n	8005918 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	b2da      	uxtb	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <I2C_Master_SB+0x92>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	2b00      	cmp	r3, #0
 8005930:	d032      	beq.n	8005998 <I2C_Master_SB+0x100>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02d      	beq.n	8005998 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594a:	605a      	str	r2, [r3, #4]
}
 800594c:	e024      	b.n	8005998 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10e      	bne.n	8005974 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	b29b      	uxth	r3, r3
 800595c:	11db      	asrs	r3, r3, #7
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f003 0306 	and.w	r3, r3, #6
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f063 030f 	orn	r3, r3, #15
 800596a:	b2da      	uxtb	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	611a      	str	r2, [r3, #16]
}
 8005972:	e011      	b.n	8005998 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	2b01      	cmp	r3, #1
 800597a:	d10d      	bne.n	8005998 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005980:	b29b      	uxth	r3, r3
 8005982:	11db      	asrs	r3, r3, #7
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f003 0306 	and.w	r3, r3, #6
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f063 030e 	orn	r3, r3, #14
 8005990:	b2da      	uxtb	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	611a      	str	r2, [r3, #16]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <I2C_Master_ADD10+0x24>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d011      	beq.n	80059ea <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <I2C_Master_ADD10+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b091      	sub	sp, #68	; 0x44
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b22      	cmp	r3, #34	; 0x22
 8005a1c:	f040 8169 	bne.w	8005cf2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10f      	bne.n	8005a48 <I2C_Master_ADDR+0x54>
 8005a28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d10b      	bne.n	8005a48 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a30:	2300      	movs	r3, #0
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	e160      	b.n	8005d0a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d11d      	bne.n	8005a8c <I2C_Master_ADDR+0x98>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a58:	d118      	bne.n	8005a8c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50
 8005a8a:	e13e      	b.n	8005d0a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d113      	bne.n	8005abe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a96:	2300      	movs	r3, #0
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	e115      	b.n	8005cea <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	f040 808a 	bne.w	8005bde <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ad0:	d137      	bne.n	8005b42 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af0:	d113      	bne.n	8005b1a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b00:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	e0e7      	b.n	8005cea <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e0d3      	b.n	8005cea <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d02e      	beq.n	8005ba6 <I2C_Master_ADDR+0x1b2>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d02b      	beq.n	8005ba6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	2b12      	cmp	r3, #18
 8005b52:	d102      	bne.n	8005b5a <I2C_Master_ADDR+0x166>
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d125      	bne.n	8005ba6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d00e      	beq.n	8005b7e <I2C_Master_ADDR+0x18a>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d00b      	beq.n	8005b7e <I2C_Master_ADDR+0x18a>
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d008      	beq.n	8005b7e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e007      	b.n	8005b8e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	e0a1      	b.n	8005cea <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e085      	b.n	8005cea <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d14d      	bne.n	8005c84 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d016      	beq.n	8005c1c <I2C_Master_ADDR+0x228>
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d013      	beq.n	8005c1c <I2C_Master_ADDR+0x228>
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d010      	beq.n	8005c1c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c08:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e007      	b.n	8005c2c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c2a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c3a:	d117      	bne.n	8005c6c <I2C_Master_ADDR+0x278>
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c42:	d00b      	beq.n	8005c5c <I2C_Master_ADDR+0x268>
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d008      	beq.n	8005c5c <I2C_Master_ADDR+0x268>
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d005      	beq.n	8005c5c <I2C_Master_ADDR+0x268>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d002      	beq.n	8005c5c <I2C_Master_ADDR+0x268>
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d107      	bne.n	8005c6c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	e032      	b.n	8005cea <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c92:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca2:	d117      	bne.n	8005cd4 <I2C_Master_ADDR+0x2e0>
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005caa:	d00b      	beq.n	8005cc4 <I2C_Master_ADDR+0x2d0>
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d008      	beq.n	8005cc4 <I2C_Master_ADDR+0x2d0>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d005      	beq.n	8005cc4 <I2C_Master_ADDR+0x2d0>
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d002      	beq.n	8005cc4 <I2C_Master_ADDR+0x2d0>
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d107      	bne.n	8005cd4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cd2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005cf0:	e00b      	b.n	8005d0a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	e7ff      	b.n	8005d0a <I2C_Master_ADDR+0x316>
 8005d0a:	bf00      	nop
 8005d0c:	3744      	adds	r7, #68	; 0x44
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02b      	beq.n	8005d86 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d114      	bne.n	8005d86 <I2C_SlaveTransmit_TXE+0x72>
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b29      	cmp	r3, #41	; 0x29
 8005d60:	d111      	bne.n	8005d86 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2221      	movs	r2, #33	; 0x21
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2228      	movs	r2, #40	; 0x28
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff fa0f 	bl	80051a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d011      	beq.n	8005dc4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02c      	beq.n	8005e42 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d114      	bne.n	8005e42 <I2C_SlaveReceive_RXNE+0x74>
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d111      	bne.n	8005e42 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2222      	movs	r2, #34	; 0x22
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2228      	movs	r2, #40	; 0x28
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff f9ba 	bl	80051b6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d012      	beq.n	8005e82 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ea6:	2b28      	cmp	r3, #40	; 0x28
 8005ea8:	d127      	bne.n	8005efa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	089b      	lsrs	r3, r3, #2
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	09db      	lsrs	r3, r3, #7
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	81bb      	strh	r3, [r7, #12]
 8005edc:	e002      	b.n	8005ee4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005eec:	89ba      	ldrh	r2, [r7, #12]
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff f968 	bl	80051c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ef8:	e008      	b.n	8005f0c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f06f 0202 	mvn.w	r2, #2
 8005f02:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	60bb      	str	r3, [r7, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f70:	d172      	bne.n	8006058 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b22      	cmp	r3, #34	; 0x22
 8005f76:	d002      	beq.n	8005f7e <I2C_Slave_STOPF+0x6a>
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7c:	d135      	bne.n	8005fea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f043 0204 	orr.w	r2, r3, #4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd ff50 	bl	8003e5c <HAL_DMA_GetState>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d049      	beq.n	8006056 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	4a69      	ldr	r2, [pc, #420]	; (800616c <I2C_Slave_STOPF+0x258>)
 8005fc8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd ff03 	bl	8003dda <HAL_DMA_Abort_IT>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d03d      	beq.n	8006056 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fe8:	e035      	b.n	8006056 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800601c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	4618      	mov	r0, r3
 8006024:	f7fd ff1a 	bl	8003e5c <HAL_DMA_GetState>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d014      	beq.n	8006058 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	4a4e      	ldr	r2, [pc, #312]	; (800616c <I2C_Slave_STOPF+0x258>)
 8006034:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd fecd 	bl	8003dda <HAL_DMA_Abort_IT>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
 8006054:	e000      	b.n	8006058 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006056:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d03e      	beq.n	80060e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d112      	bne.n	8006096 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d112      	bne.n	80060ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	f043 0204 	orr.w	r2, r3, #4
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8b3 	bl	8006254 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80060ee:	e039      	b.n	8006164 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b2a      	cmp	r3, #42	; 0x2a
 80060f4:	d109      	bne.n	800610a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2228      	movs	r2, #40	; 0x28
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff f856 	bl	80051b6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b28      	cmp	r3, #40	; 0x28
 8006114:	d111      	bne.n	800613a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a15      	ldr	r2, [pc, #84]	; (8006170 <I2C_Slave_STOPF+0x25c>)
 800611a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff f855 	bl	80051e2 <HAL_I2C_ListenCpltCallback>
}
 8006138:	e014      	b.n	8006164 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	2b22      	cmp	r3, #34	; 0x22
 8006140:	d002      	beq.n	8006148 <I2C_Slave_STOPF+0x234>
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	2b22      	cmp	r3, #34	; 0x22
 8006146:	d10d      	bne.n	8006164 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff f829 	bl	80051b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08006759 	.word	0x08006759
 8006170:	ffff0000 	.word	0xffff0000

08006174 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006182:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d002      	beq.n	8006196 <I2C_Slave_AF+0x22>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b20      	cmp	r3, #32
 8006194:	d129      	bne.n	80061ea <I2C_Slave_AF+0x76>
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	2b28      	cmp	r3, #40	; 0x28
 800619a:	d126      	bne.n	80061ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a2c      	ldr	r2, [pc, #176]	; (8006250 <I2C_Slave_AF+0xdc>)
 80061a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fe fffd 	bl	80051e2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80061e8:	e02e      	b.n	8006248 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2b21      	cmp	r3, #33	; 0x21
 80061ee:	d126      	bne.n	800623e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a17      	ldr	r2, [pc, #92]	; (8006250 <I2C_Slave_AF+0xdc>)
 80061f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2221      	movs	r2, #33	; 0x21
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800621a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006224:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006234:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fe ffb4 	bl	80051a4 <HAL_I2C_SlaveTxCpltCallback>
}
 800623c:	e004      	b.n	8006248 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006246:	615a      	str	r2, [r3, #20]
}
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	ffff0000 	.word	0xffff0000

08006254 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006262:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800626a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	2b10      	cmp	r3, #16
 8006270:	d002      	beq.n	8006278 <I2C_ITError+0x24>
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d10a      	bne.n	800628e <I2C_ITError+0x3a>
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b22      	cmp	r3, #34	; 0x22
 800627c:	d107      	bne.n	800628e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800628c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006294:	2b28      	cmp	r3, #40	; 0x28
 8006296:	d107      	bne.n	80062a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2228      	movs	r2, #40	; 0x28
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062a6:	e015      	b.n	80062d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b6:	d00a      	beq.n	80062ce <I2C_ITError+0x7a>
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b60      	cmp	r3, #96	; 0x60
 80062bc:	d007      	beq.n	80062ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e2:	d162      	bne.n	80063aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d020      	beq.n	8006344 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	4a6a      	ldr	r2, [pc, #424]	; (80064b0 <I2C_ITError+0x25c>)
 8006308:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fd63 	bl	8003dda <HAL_DMA_Abort_IT>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8089 	beq.w	800642e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800633e:	4610      	mov	r0, r2
 8006340:	4798      	blx	r3
 8006342:	e074      	b.n	800642e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	4a59      	ldr	r2, [pc, #356]	; (80064b0 <I2C_ITError+0x25c>)
 800634a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	4618      	mov	r0, r3
 8006352:	f7fd fd42 	bl	8003dda <HAL_DMA_Abort_IT>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d068      	beq.n	800642e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d10b      	bne.n	8006382 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0201 	bic.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	e041      	b.n	800642e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b60      	cmp	r3, #96	; 0x60
 80063b4:	d125      	bne.n	8006402 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b40      	cmp	r3, #64	; 0x40
 80063d0:	d10b      	bne.n	80063ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fe ff15 	bl	800522a <HAL_I2C_AbortCpltCallback>
 8006400:	e015      	b.n	800642e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d10b      	bne.n	8006428 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fe fef5 	bl	8005218 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10e      	bne.n	800645c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800646a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006472:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b04      	cmp	r3, #4
 800647e:	d113      	bne.n	80064a8 <I2C_ITError+0x254>
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b28      	cmp	r3, #40	; 0x28
 8006484:	d110      	bne.n	80064a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a0a      	ldr	r2, [pc, #40]	; (80064b4 <I2C_ITError+0x260>)
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fe fe9d 	bl	80051e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	08006759 	.word	0x08006759
 80064b4:	ffff0000 	.word	0xffff0000

080064b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	460b      	mov	r3, r1
 80064c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d006      	beq.n	80064e2 <I2C_MasterRequestWrite+0x2a>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d003      	beq.n	80064e2 <I2C_MasterRequestWrite+0x2a>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064e0:	d108      	bne.n	80064f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e00b      	b.n	800650c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	2b12      	cmp	r3, #18
 80064fa:	d107      	bne.n	800650c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800650a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f9c5 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006532:	d103      	bne.n	800653c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e035      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006548:	d108      	bne.n	800655c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800654a:	897b      	ldrh	r3, [r7, #10]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006558:	611a      	str	r2, [r3, #16]
 800655a:	e01b      	b.n	8006594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800655c:	897b      	ldrh	r3, [r7, #10]
 800655e:	11db      	asrs	r3, r3, #7
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 0306 	and.w	r3, r3, #6
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f063 030f 	orn	r3, r3, #15
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	490e      	ldr	r1, [pc, #56]	; (80065b4 <I2C_MasterRequestWrite+0xfc>)
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f9eb 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e010      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800658a:	897b      	ldrh	r3, [r7, #10]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4907      	ldr	r1, [pc, #28]	; (80065b8 <I2C_MasterRequestWrite+0x100>)
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f9db 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	00010008 	.word	0x00010008
 80065b8:	00010002 	.word	0x00010002

080065bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	607a      	str	r2, [r7, #4]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	460b      	mov	r3, r1
 80065ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d006      	beq.n	80065f6 <I2C_MasterRequestRead+0x3a>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d003      	beq.n	80065f6 <I2C_MasterRequestRead+0x3a>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065f4:	d108      	bne.n	8006608 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e00b      	b.n	8006620 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	2b11      	cmp	r3, #17
 800660e:	d107      	bne.n	8006620 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f93b 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006646:	d103      	bne.n	8006650 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e079      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800665c:	d108      	bne.n	8006670 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800665e:	897b      	ldrh	r3, [r7, #10]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	611a      	str	r2, [r3, #16]
 800666e:	e05f      	b.n	8006730 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006670:	897b      	ldrh	r3, [r7, #10]
 8006672:	11db      	asrs	r3, r3, #7
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0306 	and.w	r3, r3, #6
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f063 030f 	orn	r3, r3, #15
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4930      	ldr	r1, [pc, #192]	; (8006750 <I2C_MasterRequestRead+0x194>)
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f961 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e054      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800669e:	897b      	ldrh	r3, [r7, #10]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4929      	ldr	r1, [pc, #164]	; (8006754 <I2C_MasterRequestRead+0x198>)
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f951 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e044      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066be:	2300      	movs	r3, #0
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f8d9 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670a:	d103      	bne.n	8006714 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006712:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e017      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006718:	897b      	ldrh	r3, [r7, #10]
 800671a:	11db      	asrs	r3, r3, #7
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0306 	and.w	r3, r3, #6
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f063 030e 	orn	r3, r3, #14
 8006728:	b2da      	uxtb	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4907      	ldr	r1, [pc, #28]	; (8006754 <I2C_MasterRequestRead+0x198>)
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f90d 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	00010008 	.word	0x00010008
 8006754:	00010002 	.word	0x00010002

08006758 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006770:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006772:	4b4b      	ldr	r3, [pc, #300]	; (80068a0 <I2C_DMAAbort+0x148>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	08db      	lsrs	r3, r3, #3
 8006778:	4a4a      	ldr	r2, [pc, #296]	; (80068a4 <I2C_DMAAbort+0x14c>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	0a1a      	lsrs	r2, r3, #8
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	00da      	lsls	r2, r3, #3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f043 0220 	orr.w	r2, r3, #32
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800679e:	e00a      	b.n	80067b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b4:	d0ea      	beq.n	800678c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	2200      	movs	r2, #0
 80067c4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	2200      	movs	r2, #0
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f8:	2200      	movs	r2, #0
 80067fa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	2200      	movs	r2, #0
 800680a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b60      	cmp	r3, #96	; 0x60
 8006826:	d10e      	bne.n	8006846 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2200      	movs	r2, #0
 800683c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800683e:	6978      	ldr	r0, [r7, #20]
 8006840:	f7fe fcf3 	bl	800522a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006844:	e027      	b.n	8006896 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006846:	7cfb      	ldrb	r3, [r7, #19]
 8006848:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800684c:	2b28      	cmp	r3, #40	; 0x28
 800684e:	d117      	bne.n	8006880 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800686e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2228      	movs	r2, #40	; 0x28
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800687e:	e007      	b.n	8006890 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006890:	6978      	ldr	r0, [r7, #20]
 8006892:	f7fe fcc1 	bl	8005218 <HAL_I2C_ErrorCallback>
}
 8006896:	bf00      	nop
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000000 	.word	0x20000000
 80068a4:	14f8b589 	.word	0x14f8b589

080068a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068b8:	e025      	b.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d021      	beq.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c2:	f7fc fd21 	bl	8003308 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d116      	bne.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0220 	orr.w	r2, r3, #32
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e023      	b.n	800694e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10d      	bne.n	800692c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	43da      	mvns	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	e00c      	b.n	8006946 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	43da      	mvns	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4013      	ands	r3, r2
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	429a      	cmp	r2, r3
 800694a:	d0b6      	beq.n	80068ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006964:	e051      	b.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d123      	bne.n	80069be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006984:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800698e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f043 0204 	orr.w	r2, r3, #4
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e046      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d021      	beq.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fc fc9f 	bl	8003308 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d116      	bne.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f043 0220 	orr.w	r2, r3, #32
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e020      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d10c      	bne.n	8006a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	43da      	mvns	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	e00b      	b.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	43da      	mvns	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d18d      	bne.n	8006966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a60:	e02d      	b.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f900 	bl	8006c68 <I2C_IsAcknowledgeFailed>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e02d      	b.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d021      	beq.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fc fc45 	bl	8003308 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d116      	bne.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0220 	orr.w	r2, r3, #32
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e007      	b.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d1ca      	bne.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ae2:	e02d      	b.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f8bf 	bl	8006c68 <I2C_IsAcknowledgeFailed>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e02d      	b.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d021      	beq.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afc:	f7fc fc04 	bl	8003308 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d302      	bcc.n	8006b12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d116      	bne.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e007      	b.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d1ca      	bne.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b64:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	0a1a      	lsrs	r2, r3, #8
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f043 0220 	orr.w	r2, r3, #32
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e008      	b.n	8006ba8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba4:	d0e9      	beq.n	8006b7a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000000 	.word	0x20000000
 8006bb8:	14f8b589 	.word	0x14f8b589

08006bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bc8:	e042      	b.n	8006c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d119      	bne.n	8006c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0210 	mvn.w	r2, #16
 8006be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e029      	b.n	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0c:	f7fc fb7c 	bl	8003308 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d302      	bcc.n	8006c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d116      	bne.n	8006c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	f043 0220 	orr.w	r2, r3, #32
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e007      	b.n	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	d1b5      	bne.n	8006bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7e:	d11b      	bne.n	8006cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	f043 0204 	orr.w	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006cd4:	d103      	bne.n	8006cde <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cdc:	e007      	b.n	8006cee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ce6:	d102      	bne.n	8006cee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2208      	movs	r2, #8
 8006cec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e31d      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0a:	4b94      	ldr	r3, [pc, #592]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
 8006d12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d14:	4b91      	ldr	r3, [pc, #580]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d1c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d07b      	beq.n	8006e22 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d006      	beq.n	8006d3e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	d10f      	bne.n	8006d56 <HAL_RCC_OscConfig+0x5e>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3c:	d10b      	bne.n	8006d56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d3e:	4b87      	ldr	r3, [pc, #540]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d06a      	beq.n	8006e20 <HAL_RCC_OscConfig+0x128>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d166      	bne.n	8006e20 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e2f7      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d106      	bne.n	8006d6c <HAL_RCC_OscConfig+0x74>
 8006d5e:	4b7f      	ldr	r3, [pc, #508]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a7e      	ldr	r2, [pc, #504]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e02d      	b.n	8006dc8 <HAL_RCC_OscConfig+0xd0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10c      	bne.n	8006d8e <HAL_RCC_OscConfig+0x96>
 8006d74:	4b79      	ldr	r3, [pc, #484]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a78      	ldr	r2, [pc, #480]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	4b76      	ldr	r3, [pc, #472]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a75      	ldr	r2, [pc, #468]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	e01c      	b.n	8006dc8 <HAL_RCC_OscConfig+0xd0>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	d10c      	bne.n	8006db0 <HAL_RCC_OscConfig+0xb8>
 8006d96:	4b71      	ldr	r3, [pc, #452]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a70      	ldr	r2, [pc, #448]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	4b6e      	ldr	r3, [pc, #440]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a6d      	ldr	r2, [pc, #436]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e00b      	b.n	8006dc8 <HAL_RCC_OscConfig+0xd0>
 8006db0:	4b6a      	ldr	r3, [pc, #424]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a69      	ldr	r2, [pc, #420]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4b67      	ldr	r3, [pc, #412]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a66      	ldr	r2, [pc, #408]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d013      	beq.n	8006df8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd0:	f7fc fa9a 	bl	8003308 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd8:	f7fc fa96 	bl	8003308 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	; 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e2ad      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dea:	4b5c      	ldr	r3, [pc, #368]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0xe0>
 8006df6:	e014      	b.n	8006e22 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df8:	f7fc fa86 	bl	8003308 <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e00:	f7fc fa82 	bl	8003308 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b64      	cmp	r3, #100	; 0x64
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e299      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e12:	4b52      	ldr	r3, [pc, #328]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1f0      	bne.n	8006e00 <HAL_RCC_OscConfig+0x108>
 8006e1e:	e000      	b.n	8006e22 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d05a      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d005      	beq.n	8006e40 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b0c      	cmp	r3, #12
 8006e38:	d119      	bne.n	8006e6e <HAL_RCC_OscConfig+0x176>
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d116      	bne.n	8006e6e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e40:	4b46      	ldr	r3, [pc, #280]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_RCC_OscConfig+0x160>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d001      	beq.n	8006e58 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e276      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e58:	4b40      	ldr	r3, [pc, #256]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	493d      	ldr	r1, [pc, #244]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e6c:	e03a      	b.n	8006ee4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d020      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e76:	4b3a      	ldr	r3, [pc, #232]	; (8006f60 <HAL_RCC_OscConfig+0x268>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e7c:	f7fc fa44 	bl	8003308 <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e84:	f7fc fa40 	bl	8003308 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e257      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e96:	4b31      	ldr	r3, [pc, #196]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f0      	beq.n	8006e84 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea2:	4b2e      	ldr	r3, [pc, #184]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	492a      	ldr	r1, [pc, #168]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	604b      	str	r3, [r1, #4]
 8006eb6:	e015      	b.n	8006ee4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb8:	4b29      	ldr	r3, [pc, #164]	; (8006f60 <HAL_RCC_OscConfig+0x268>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebe:	f7fc fa23 	bl	8003308 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec6:	f7fc fa1f 	bl	8003308 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e236      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ed8:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80b8 	beq.w	8007062 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d170      	bne.n	8006fda <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ef8:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_RCC_OscConfig+0x218>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e21a      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1a      	ldr	r2, [r3, #32]
 8006f14:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d921      	bls.n	8006f64 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fc4b 	bl	80077c0 <RCC_SetFlashLatencyFromMSIRange>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e208      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	4906      	ldr	r1, [pc, #24]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	061b      	lsls	r3, r3, #24
 8006f54:	4901      	ldr	r1, [pc, #4]	; (8006f5c <HAL_RCC_OscConfig+0x264>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	604b      	str	r3, [r1, #4]
 8006f5a:	e020      	b.n	8006f9e <HAL_RCC_OscConfig+0x2a6>
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f64:	4ba4      	ldr	r3, [pc, #656]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	49a1      	ldr	r1, [pc, #644]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f76:	4ba0      	ldr	r3, [pc, #640]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	061b      	lsls	r3, r3, #24
 8006f84:	499c      	ldr	r1, [pc, #624]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fc16 	bl	80077c0 <RCC_SetFlashLatencyFromMSIRange>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e1d3      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	0b5b      	lsrs	r3, r3, #13
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006faa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006fae:	4a92      	ldr	r2, [pc, #584]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8006fb0:	6892      	ldr	r2, [r2, #8]
 8006fb2:	0912      	lsrs	r2, r2, #4
 8006fb4:	f002 020f 	and.w	r2, r2, #15
 8006fb8:	4990      	ldr	r1, [pc, #576]	; (80071fc <HAL_RCC_OscConfig+0x504>)
 8006fba:	5c8a      	ldrb	r2, [r1, r2]
 8006fbc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006fbe:	4a90      	ldr	r2, [pc, #576]	; (8007200 <HAL_RCC_OscConfig+0x508>)
 8006fc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fc2:	4b90      	ldr	r3, [pc, #576]	; (8007204 <HAL_RCC_OscConfig+0x50c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fc f952 	bl	8003270 <HAL_InitTick>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d045      	beq.n	8007062 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	e1b5      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d029      	beq.n	8007036 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fe2:	4b89      	ldr	r3, [pc, #548]	; (8007208 <HAL_RCC_OscConfig+0x510>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe8:	f7fc f98e 	bl	8003308 <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ff0:	f7fc f98a 	bl	8003308 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e1a1      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007002:	4b7d      	ldr	r3, [pc, #500]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f0      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800700e:	4b7a      	ldr	r3, [pc, #488]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	4977      	ldr	r1, [pc, #476]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 800701c:	4313      	orrs	r3, r2
 800701e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007020:	4b75      	ldr	r3, [pc, #468]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	4972      	ldr	r1, [pc, #456]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]
 8007034:	e015      	b.n	8007062 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007036:	4b74      	ldr	r3, [pc, #464]	; (8007208 <HAL_RCC_OscConfig+0x510>)
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703c:	f7fc f964 	bl	8003308 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007044:	f7fc f960 	bl	8003308 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e177      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007056:	4b68      	ldr	r3, [pc, #416]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d030      	beq.n	80070d0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d016      	beq.n	80070a4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007076:	4b65      	ldr	r3, [pc, #404]	; (800720c <HAL_RCC_OscConfig+0x514>)
 8007078:	2201      	movs	r2, #1
 800707a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800707c:	f7fc f944 	bl	8003308 <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007084:	f7fc f940 	bl	8003308 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e157      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007096:	4b58      	ldr	r3, [pc, #352]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0f0      	beq.n	8007084 <HAL_RCC_OscConfig+0x38c>
 80070a2:	e015      	b.n	80070d0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070a4:	4b59      	ldr	r3, [pc, #356]	; (800720c <HAL_RCC_OscConfig+0x514>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070aa:	f7fc f92d 	bl	8003308 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070b2:	f7fc f929 	bl	8003308 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e140      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070c4:	4b4c      	ldr	r3, [pc, #304]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80070c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f0      	bne.n	80070b2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80b5 	beq.w	8007248 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070de:	2300      	movs	r3, #0
 80070e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070e2:	4b45      	ldr	r3, [pc, #276]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10d      	bne.n	800710a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ee:	4b42      	ldr	r3, [pc, #264]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	4a41      	ldr	r2, [pc, #260]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80070f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f8:	6253      	str	r3, [r2, #36]	; 0x24
 80070fa:	4b3f      	ldr	r3, [pc, #252]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007102:	60bb      	str	r3, [r7, #8]
 8007104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007106:	2301      	movs	r3, #1
 8007108:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800710a:	4b41      	ldr	r3, [pc, #260]	; (8007210 <HAL_RCC_OscConfig+0x518>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d118      	bne.n	8007148 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007116:	4b3e      	ldr	r3, [pc, #248]	; (8007210 <HAL_RCC_OscConfig+0x518>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3d      	ldr	r2, [pc, #244]	; (8007210 <HAL_RCC_OscConfig+0x518>)
 800711c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007122:	f7fc f8f1 	bl	8003308 <HAL_GetTick>
 8007126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800712a:	f7fc f8ed 	bl	8003308 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b64      	cmp	r3, #100	; 0x64
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e104      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713c:	4b34      	ldr	r3, [pc, #208]	; (8007210 <HAL_RCC_OscConfig+0x518>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0f0      	beq.n	800712a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d106      	bne.n	800715e <HAL_RCC_OscConfig+0x466>
 8007150:	4b29      	ldr	r3, [pc, #164]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	4a28      	ldr	r2, [pc, #160]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800715a:	6353      	str	r3, [r2, #52]	; 0x34
 800715c:	e02d      	b.n	80071ba <HAL_RCC_OscConfig+0x4c2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10c      	bne.n	8007180 <HAL_RCC_OscConfig+0x488>
 8007166:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	4a23      	ldr	r2, [pc, #140]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 800716c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007170:	6353      	str	r3, [r2, #52]	; 0x34
 8007172:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007176:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800717c:	6353      	str	r3, [r2, #52]	; 0x34
 800717e:	e01c      	b.n	80071ba <HAL_RCC_OscConfig+0x4c2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b05      	cmp	r3, #5
 8007186:	d10c      	bne.n	80071a2 <HAL_RCC_OscConfig+0x4aa>
 8007188:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 800718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718c:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 800718e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007192:	6353      	str	r3, [r2, #52]	; 0x34
 8007194:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 800719a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719e:	6353      	str	r3, [r2, #52]	; 0x34
 80071a0:	e00b      	b.n	80071ba <HAL_RCC_OscConfig+0x4c2>
 80071a2:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80071a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071ac:	6353      	str	r3, [r2, #52]	; 0x34
 80071ae:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	4a11      	ldr	r2, [pc, #68]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80071b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d015      	beq.n	80071ee <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071c2:	f7fc f8a1 	bl	8003308 <HAL_GetTick>
 80071c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071c8:	e00a      	b.n	80071e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ca:	f7fc f89d 	bl	8003308 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d8:	4293      	cmp	r3, r2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e0b2      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <HAL_RCC_OscConfig+0x500>)
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0ee      	beq.n	80071ca <HAL_RCC_OscConfig+0x4d2>
 80071ec:	e023      	b.n	8007236 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ee:	f7fc f88b 	bl	8003308 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071f4:	e019      	b.n	800722a <HAL_RCC_OscConfig+0x532>
 80071f6:	bf00      	nop
 80071f8:	40023800 	.word	0x40023800
 80071fc:	0800d4a0 	.word	0x0800d4a0
 8007200:	20000000 	.word	0x20000000
 8007204:	20000004 	.word	0x20000004
 8007208:	42470020 	.word	0x42470020
 800720c:	42470680 	.word	0x42470680
 8007210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007214:	f7fc f878 	bl	8003308 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007222:	4293      	cmp	r3, r2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e08d      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800722a:	4b49      	ldr	r3, [pc, #292]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 800722c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1ee      	bne.n	8007214 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007236:	7ffb      	ldrb	r3, [r7, #31]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d105      	bne.n	8007248 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800723c:	4b44      	ldr	r3, [pc, #272]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	4a43      	ldr	r2, [pc, #268]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 8007242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007246:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	d079      	beq.n	8007344 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b0c      	cmp	r3, #12
 8007254:	d056      	beq.n	8007304 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	2b02      	cmp	r3, #2
 800725c:	d13b      	bne.n	80072d6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800725e:	4b3d      	ldr	r3, [pc, #244]	; (8007354 <HAL_RCC_OscConfig+0x65c>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007264:	f7fc f850 	bl	8003308 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800726c:	f7fc f84c 	bl	8003308 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e063      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800727e:	4b34      	ldr	r3, [pc, #208]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729a:	4319      	orrs	r1, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	430b      	orrs	r3, r1
 80072a2:	492b      	ldr	r1, [pc, #172]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072a8:	4b2a      	ldr	r3, [pc, #168]	; (8007354 <HAL_RCC_OscConfig+0x65c>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ae:	f7fc f82b 	bl	8003308 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b6:	f7fc f827 	bl	8003308 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e03e      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072c8:	4b21      	ldr	r3, [pc, #132]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f0      	beq.n	80072b6 <HAL_RCC_OscConfig+0x5be>
 80072d4:	e036      	b.n	8007344 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d6:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <HAL_RCC_OscConfig+0x65c>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072dc:	f7fc f814 	bl	8003308 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e4:	f7fc f810 	bl	8003308 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e027      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072f6:	4b16      	ldr	r3, [pc, #88]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f0      	bne.n	80072e4 <HAL_RCC_OscConfig+0x5ec>
 8007302:	e01f      	b.n	8007344 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e01a      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <HAL_RCC_OscConfig+0x658>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	429a      	cmp	r2, r3
 8007322:	d10d      	bne.n	8007340 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732e:	429a      	cmp	r2, r3
 8007330:	d106      	bne.n	8007340 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800
 8007354:	42470060 	.word	0x42470060

08007358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e11a      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800736c:	4b8f      	ldr	r3, [pc, #572]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d919      	bls.n	80073ae <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d105      	bne.n	800738c <HAL_RCC_ClockConfig+0x34>
 8007380:	4b8a      	ldr	r3, [pc, #552]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a89      	ldr	r2, [pc, #548]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 8007386:	f043 0304 	orr.w	r3, r3, #4
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	4b87      	ldr	r3, [pc, #540]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f023 0201 	bic.w	r2, r3, #1
 8007394:	4985      	ldr	r1, [pc, #532]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	4313      	orrs	r3, r2
 800739a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800739c:	4b83      	ldr	r3, [pc, #524]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d001      	beq.n	80073ae <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e0f9      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d008      	beq.n	80073cc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073ba:	4b7d      	ldr	r3, [pc, #500]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	497a      	ldr	r1, [pc, #488]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 808e 	beq.w	80074f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d107      	bne.n	80073f2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073e2:	4b73      	ldr	r3, [pc, #460]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d121      	bne.n	8007432 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e0d7      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d107      	bne.n	800740a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073fa:	4b6d      	ldr	r3, [pc, #436]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d115      	bne.n	8007432 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e0cb      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d107      	bne.n	8007422 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007412:	4b67      	ldr	r3, [pc, #412]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e0bf      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007422:	4b63      	ldr	r3, [pc, #396]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e0b7      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007432:	4b5f      	ldr	r3, [pc, #380]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 0203 	bic.w	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	495c      	ldr	r1, [pc, #368]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007440:	4313      	orrs	r3, r2
 8007442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007444:	f7fb ff60 	bl	8003308 <HAL_GetTick>
 8007448:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d112      	bne.n	8007478 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007452:	e00a      	b.n	800746a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007454:	f7fb ff58 	bl	8003308 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007462:	4293      	cmp	r3, r2
 8007464:	d901      	bls.n	800746a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e09b      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800746a:	4b51      	ldr	r3, [pc, #324]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 030c 	and.w	r3, r3, #12
 8007472:	2b08      	cmp	r3, #8
 8007474:	d1ee      	bne.n	8007454 <HAL_RCC_ClockConfig+0xfc>
 8007476:	e03e      	b.n	80074f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b03      	cmp	r3, #3
 800747e:	d112      	bne.n	80074a6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007480:	e00a      	b.n	8007498 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007482:	f7fb ff41 	bl	8003308 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007490:	4293      	cmp	r3, r2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e084      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007498:	4b45      	ldr	r3, [pc, #276]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 030c 	and.w	r3, r3, #12
 80074a0:	2b0c      	cmp	r3, #12
 80074a2:	d1ee      	bne.n	8007482 <HAL_RCC_ClockConfig+0x12a>
 80074a4:	e027      	b.n	80074f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d11d      	bne.n	80074ea <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80074ae:	e00a      	b.n	80074c6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074b0:	f7fb ff2a 	bl	8003308 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80074be:	4293      	cmp	r3, r2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e06d      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80074c6:	4b3a      	ldr	r3, [pc, #232]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 030c 	and.w	r3, r3, #12
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d1ee      	bne.n	80074b0 <HAL_RCC_ClockConfig+0x158>
 80074d2:	e010      	b.n	80074f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074d4:	f7fb ff18 	bl	8003308 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e05b      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80074ea:	4b31      	ldr	r3, [pc, #196]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 030c 	and.w	r3, r3, #12
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1ee      	bne.n	80074d4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074f6:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d219      	bcs.n	8007538 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d105      	bne.n	8007516 <HAL_RCC_ClockConfig+0x1be>
 800750a:	4b28      	ldr	r3, [pc, #160]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a27      	ldr	r2, [pc, #156]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 8007510:	f043 0304 	orr.w	r3, r3, #4
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	4b25      	ldr	r3, [pc, #148]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 0201 	bic.w	r2, r3, #1
 800751e:	4923      	ldr	r1, [pc, #140]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007526:	4b21      	ldr	r3, [pc, #132]	; (80075ac <HAL_RCC_ClockConfig+0x254>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d001      	beq.n	8007538 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e034      	b.n	80075a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007544:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4917      	ldr	r1, [pc, #92]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007552:	4313      	orrs	r3, r2
 8007554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007562:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	490f      	ldr	r1, [pc, #60]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 8007572:	4313      	orrs	r3, r2
 8007574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007576:	f000 f823 	bl	80075c0 <HAL_RCC_GetSysClockFreq>
 800757a:	4602      	mov	r2, r0
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <HAL_RCC_ClockConfig+0x258>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	490b      	ldr	r1, [pc, #44]	; (80075b4 <HAL_RCC_ClockConfig+0x25c>)
 8007588:	5ccb      	ldrb	r3, [r1, r3]
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <HAL_RCC_ClockConfig+0x260>)
 8007590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007592:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <HAL_RCC_ClockConfig+0x264>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f7fb fe6a 	bl	8003270 <HAL_InitTick>
 800759c:	4603      	mov	r3, r0
 800759e:	72fb      	strb	r3, [r7, #11]

  return status;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40023c00 	.word	0x40023c00
 80075b0:	40023800 	.word	0x40023800
 80075b4:	0800d4a0 	.word	0x0800d4a0
 80075b8:	20000000 	.word	0x20000000
 80075bc:	20000004 	.word	0x20000004

080075c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c0:	b5b0      	push	{r4, r5, r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80075c6:	4b61      	ldr	r3, [pc, #388]	; (800774c <HAL_RCC_GetSysClockFreq+0x18c>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	2b0c      	cmp	r3, #12
 80075d4:	d00d      	beq.n	80075f2 <HAL_RCC_GetSysClockFreq+0x32>
 80075d6:	2b0c      	cmp	r3, #12
 80075d8:	f200 80a4 	bhi.w	8007724 <HAL_RCC_GetSysClockFreq+0x164>
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d002      	beq.n	80075e6 <HAL_RCC_GetSysClockFreq+0x26>
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d003      	beq.n	80075ec <HAL_RCC_GetSysClockFreq+0x2c>
 80075e4:	e09e      	b.n	8007724 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075e6:	4b5a      	ldr	r3, [pc, #360]	; (8007750 <HAL_RCC_GetSysClockFreq+0x190>)
 80075e8:	613b      	str	r3, [r7, #16]
      break;
 80075ea:	e0a9      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80075ec:	4b59      	ldr	r3, [pc, #356]	; (8007754 <HAL_RCC_GetSysClockFreq+0x194>)
 80075ee:	613b      	str	r3, [r7, #16]
      break;
 80075f0:	e0a6      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	0c9b      	lsrs	r3, r3, #18
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	4a57      	ldr	r2, [pc, #348]	; (8007758 <HAL_RCC_GetSysClockFreq+0x198>)
 80075fc:	5cd3      	ldrb	r3, [r2, r3]
 80075fe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	0d9b      	lsrs	r3, r3, #22
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	3301      	adds	r3, #1
 800760a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800760c:	4b4f      	ldr	r3, [pc, #316]	; (800774c <HAL_RCC_GetSysClockFreq+0x18c>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d041      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	461c      	mov	r4, r3
 800761c:	f04f 0500 	mov.w	r5, #0
 8007620:	4620      	mov	r0, r4
 8007622:	4629      	mov	r1, r5
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	014b      	lsls	r3, r1, #5
 800762e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007632:	0142      	lsls	r2, r0, #5
 8007634:	4610      	mov	r0, r2
 8007636:	4619      	mov	r1, r3
 8007638:	1b00      	subs	r0, r0, r4
 800763a:	eb61 0105 	sbc.w	r1, r1, r5
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	018b      	lsls	r3, r1, #6
 8007648:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800764c:	0182      	lsls	r2, r0, #6
 800764e:	1a12      	subs	r2, r2, r0
 8007650:	eb63 0301 	sbc.w	r3, r3, r1
 8007654:	f04f 0000 	mov.w	r0, #0
 8007658:	f04f 0100 	mov.w	r1, #0
 800765c:	00d9      	lsls	r1, r3, #3
 800765e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007662:	00d0      	lsls	r0, r2, #3
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	1912      	adds	r2, r2, r4
 800766a:	eb45 0303 	adc.w	r3, r5, r3
 800766e:	f04f 0000 	mov.w	r0, #0
 8007672:	f04f 0100 	mov.w	r1, #0
 8007676:	0259      	lsls	r1, r3, #9
 8007678:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800767c:	0250      	lsls	r0, r2, #9
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	461a      	mov	r2, r3
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	f7f9 fd7d 	bl	800118c <__aeabi_uldivmod>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4613      	mov	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e040      	b.n	800771e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	461c      	mov	r4, r3
 80076a0:	f04f 0500 	mov.w	r5, #0
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	014b      	lsls	r3, r1, #5
 80076b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076b6:	0142      	lsls	r2, r0, #5
 80076b8:	4610      	mov	r0, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	1b00      	subs	r0, r0, r4
 80076be:	eb61 0105 	sbc.w	r1, r1, r5
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	018b      	lsls	r3, r1, #6
 80076cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80076d0:	0182      	lsls	r2, r0, #6
 80076d2:	1a12      	subs	r2, r2, r0
 80076d4:	eb63 0301 	sbc.w	r3, r3, r1
 80076d8:	f04f 0000 	mov.w	r0, #0
 80076dc:	f04f 0100 	mov.w	r1, #0
 80076e0:	00d9      	lsls	r1, r3, #3
 80076e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076e6:	00d0      	lsls	r0, r2, #3
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	1912      	adds	r2, r2, r4
 80076ee:	eb45 0303 	adc.w	r3, r5, r3
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f04f 0100 	mov.w	r1, #0
 80076fa:	0299      	lsls	r1, r3, #10
 80076fc:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007700:	0290      	lsls	r0, r2, #10
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	461a      	mov	r2, r3
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	f7f9 fd3b 	bl	800118c <__aeabi_uldivmod>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4613      	mov	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	613b      	str	r3, [r7, #16]
      break;
 8007722:	e00d      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <HAL_RCC_GetSysClockFreq+0x18c>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	0b5b      	lsrs	r3, r3, #13
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007738:	fa02 f303 	lsl.w	r3, r2, r3
 800773c:	613b      	str	r3, [r7, #16]
      break;
 800773e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007740:	693b      	ldr	r3, [r7, #16]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bdb0      	pop	{r4, r5, r7, pc}
 800774a:	bf00      	nop
 800774c:	40023800 	.word	0x40023800
 8007750:	00f42400 	.word	0x00f42400
 8007754:	007a1200 	.word	0x007a1200
 8007758:	0800d494 	.word	0x0800d494

0800775c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007760:	4b02      	ldr	r3, [pc, #8]	; (800776c <HAL_RCC_GetHCLKFreq+0x10>)
 8007762:	681b      	ldr	r3, [r3, #0]
}
 8007764:	4618      	mov	r0, r3
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr
 800776c:	20000000 	.word	0x20000000

08007770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007774:	f7ff fff2 	bl	800775c <HAL_RCC_GetHCLKFreq>
 8007778:	4602      	mov	r2, r0
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	0a1b      	lsrs	r3, r3, #8
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	4903      	ldr	r1, [pc, #12]	; (8007794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007786:	5ccb      	ldrb	r3, [r1, r3]
 8007788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800778c:	4618      	mov	r0, r3
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40023800 	.word	0x40023800
 8007794:	0800d4b0 	.word	0x0800d4b0

08007798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800779c:	f7ff ffde 	bl	800775c <HAL_RCC_GetHCLKFreq>
 80077a0:	4602      	mov	r2, r0
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	0adb      	lsrs	r3, r3, #11
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	4903      	ldr	r1, [pc, #12]	; (80077bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ae:	5ccb      	ldrb	r3, [r1, r3]
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40023800 	.word	0x40023800
 80077bc:	0800d4b0 	.word	0x0800d4b0

080077c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80077cc:	4b29      	ldr	r3, [pc, #164]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d12c      	bne.n	8007832 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80077d8:	4b26      	ldr	r3, [pc, #152]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80077e4:	4b24      	ldr	r3, [pc, #144]	; (8007878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	e016      	b.n	800781e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077f0:	4b20      	ldr	r3, [pc, #128]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	4a1f      	ldr	r2, [pc, #124]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80077f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077fa:	6253      	str	r3, [r2, #36]	; 0x24
 80077fc:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007808:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007810:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007812:	4b18      	ldr	r3, [pc, #96]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	4a17      	ldr	r2, [pc, #92]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800781c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007824:	d105      	bne.n	8007832 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800782c:	d101      	bne.n	8007832 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800782e:	2301      	movs	r3, #1
 8007830:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d105      	bne.n	8007844 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a0f      	ldr	r2, [pc, #60]	; (800787c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800783e:	f043 0304 	orr.w	r3, r3, #4
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	4b0d      	ldr	r3, [pc, #52]	; (800787c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f023 0201 	bic.w	r2, r3, #1
 800784c:	490b      	ldr	r1, [pc, #44]	; (800787c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007854:	4b09      	ldr	r3, [pc, #36]	; (800787c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	429a      	cmp	r2, r3
 8007860:	d001      	beq.n	8007866 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40023800 	.word	0x40023800
 8007878:	40007000 	.word	0x40007000
 800787c:	40023c00 	.word	0x40023c00

08007880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e031      	b.n	80078f6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fb facc 	bl	8002e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f000 f970 	bl	8007ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	d001      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e03a      	b.n	800798e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007938:	d00e      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x58>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a16      	ldr	r2, [pc, #88]	; (8007998 <HAL_TIM_Base_Start_IT+0x98>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x58>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a14      	ldr	r2, [pc, #80]	; (800799c <HAL_TIM_Base_Start_IT+0x9c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_TIM_Base_Start_IT+0x58>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d111      	bne.n	800797c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b06      	cmp	r3, #6
 8007968:	d010      	beq.n	800798c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797a:	e007      	b.n	800798c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40010800 	.word	0x40010800

080079a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d122      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d11b      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0202 	mvn.w	r2, #2
 80079d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f8c1 	bl	8007b6e <HAL_TIM_IC_CaptureCallback>
 80079ec:	e005      	b.n	80079fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f8b4 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f8c3 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d122      	bne.n	8007a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d11b      	bne.n	8007a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0204 	mvn.w	r2, #4
 8007a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f897 	bl	8007b6e <HAL_TIM_IC_CaptureCallback>
 8007a40:	e005      	b.n	8007a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f88a 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f899 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0308 	and.w	r3, r3, #8
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d122      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0208 	mvn.w	r2, #8
 8007a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f86d 	bl	8007b6e <HAL_TIM_IC_CaptureCallback>
 8007a94:	e005      	b.n	8007aa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f860 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f86f 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	2b10      	cmp	r3, #16
 8007ab4:	d122      	bne.n	8007afc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d11b      	bne.n	8007afc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0210 	mvn.w	r2, #16
 8007acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f843 	bl	8007b6e <HAL_TIM_IC_CaptureCallback>
 8007ae8:	e005      	b.n	8007af6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f836 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f845 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d10e      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0201 	mvn.w	r2, #1
 8007b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7f9 fe58 	bl	80017d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d10e      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f81f 	bl	8007b92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr

08007b92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr

08007ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bba:	d00f      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a2b      	ldr	r2, [pc, #172]	; (8007c6c <TIM_Base_SetConfig+0xc8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00b      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a2a      	ldr	r2, [pc, #168]	; (8007c70 <TIM_Base_SetConfig+0xcc>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d007      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a29      	ldr	r2, [pc, #164]	; (8007c74 <TIM_Base_SetConfig+0xd0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a28      	ldr	r2, [pc, #160]	; (8007c78 <TIM_Base_SetConfig+0xd4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d108      	bne.n	8007bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	d017      	beq.n	8007c26 <TIM_Base_SetConfig+0x82>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a1c      	ldr	r2, [pc, #112]	; (8007c6c <TIM_Base_SetConfig+0xc8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <TIM_Base_SetConfig+0x82>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <TIM_Base_SetConfig+0xcc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00f      	beq.n	8007c26 <TIM_Base_SetConfig+0x82>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a1a      	ldr	r2, [pc, #104]	; (8007c74 <TIM_Base_SetConfig+0xd0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00b      	beq.n	8007c26 <TIM_Base_SetConfig+0x82>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a19      	ldr	r2, [pc, #100]	; (8007c78 <TIM_Base_SetConfig+0xd4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <TIM_Base_SetConfig+0x82>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a18      	ldr	r2, [pc, #96]	; (8007c7c <TIM_Base_SetConfig+0xd8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d003      	beq.n	8007c26 <TIM_Base_SetConfig+0x82>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a17      	ldr	r2, [pc, #92]	; (8007c80 <TIM_Base_SetConfig+0xdc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d108      	bne.n	8007c38 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	615a      	str	r2, [r3, #20]
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800
 8007c74:	40000c00 	.word	0x40000c00
 8007c78:	40010800 	.word	0x40010800
 8007c7c:	40010c00 	.word	0x40010c00
 8007c80:	40011000 	.word	0x40011000

08007c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e046      	b.n	8007d2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cde:	d00e      	beq.n	8007cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a13      	ldr	r2, [pc, #76]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a12      	ldr	r2, [pc, #72]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d10c      	bne.n	8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800
 8007d3c:	40010800 	.word	0x40010800

08007d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e03f      	b.n	8007dd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fb f8e6 	bl	8002f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2224      	movs	r2, #36	; 0x24
 8007d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fc2f 	bl	80085e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695a      	ldr	r2, [r3, #20]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b088      	sub	sp, #32
 8007dde:	af02      	add	r7, sp, #8
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	4613      	mov	r3, r2
 8007de8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b20      	cmp	r3, #32
 8007df8:	f040 8083 	bne.w	8007f02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_UART_Transmit+0x2e>
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e07b      	b.n	8007f04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Transmit+0x40>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e074      	b.n	8007f04 <HAL_UART_Transmit+0x12a>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2221      	movs	r2, #33	; 0x21
 8007e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007e30:	f7fb fa6a 	bl	8003308 <HAL_GetTick>
 8007e34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	88fa      	ldrh	r2, [r7, #6]
 8007e3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007e4a:	e042      	b.n	8007ed2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e62:	d122      	bne.n	8007eaa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2180      	movs	r1, #128	; 0x80
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fa51 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e042      	b.n	8007f04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	60bb      	str	r3, [r7, #8]
 8007ea0:	e017      	b.n	8007ed2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	60bb      	str	r3, [r7, #8]
 8007ea8:	e013      	b.n	8007ed2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2180      	movs	r1, #128	; 0x80
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fa2e 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e01f      	b.n	8007f04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	60ba      	str	r2, [r7, #8]
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1b7      	bne.n	8007e4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2140      	movs	r1, #64	; 0x40
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 fa15 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e006      	b.n	8007f04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e000      	b.n	8007f04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007f02:	2302      	movs	r3, #2
  }
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	f040 8090 	bne.w	800804e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_UART_Receive+0x2e>
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e088      	b.n	8008050 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_UART_Receive+0x40>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e081      	b.n	8008050 <HAL_UART_Receive+0x144>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2222      	movs	r2, #34	; 0x22
 8007f5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007f62:	f7fb f9d1 	bl	8003308 <HAL_GetTick>
 8007f66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	88fa      	ldrh	r2, [r7, #6]
 8007f6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	88fa      	ldrh	r2, [r7, #6]
 8007f72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007f7c:	e05c      	b.n	8008038 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f94:	d12b      	bne.n	8007fee <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2120      	movs	r1, #32
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f9b8 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e04f      	b.n	8008050 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10c      	bne.n	8007fd6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	3302      	adds	r3, #2
 8007fd2:	60bb      	str	r3, [r7, #8]
 8007fd4:	e030      	b.n	8008038 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60bb      	str	r3, [r7, #8]
 8007fec:	e024      	b.n	8008038 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2120      	movs	r1, #32
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f98c 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e023      	b.n	8008050 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d108      	bne.n	8008022 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6859      	ldr	r1, [r3, #4]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	60ba      	str	r2, [r7, #8]
 800801c:	b2ca      	uxtb	r2, r1
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	e00a      	b.n	8008038 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	b2da      	uxtb	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	1c59      	adds	r1, r3, #1
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d19d      	bne.n	8007f7e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	e000      	b.n	8008050 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800804e:	2302      	movs	r3, #2
  }
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b20      	cmp	r3, #32
 8008070:	d130      	bne.n	80080d4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <HAL_UART_Transmit_IT+0x26>
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e029      	b.n	80080d6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008088:	2b01      	cmp	r3, #1
 800808a:	d101      	bne.n	8008090 <HAL_UART_Transmit_IT+0x38>
 800808c:	2302      	movs	r3, #2
 800808e:	e022      	b.n	80080d6 <HAL_UART_Transmit_IT+0x7e>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	88fa      	ldrh	r2, [r7, #6]
 80080a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	88fa      	ldrh	r2, [r7, #6]
 80080a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2221      	movs	r2, #33	; 0x21
 80080b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e000      	b.n	80080d6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80080d4:	2302      	movs	r3, #2
  }
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	bc80      	pop	{r7}
 80080de:	4770      	bx	lr

080080e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008100:	2300      	movs	r3, #0
 8008102:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10d      	bne.n	8008132 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <HAL_UART_IRQHandler+0x52>
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f9db 	bl	80084e6 <UART_Receive_IT>
      return;
 8008130:	e0d0      	b.n	80082d4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80b0 	beq.w	800829a <HAL_UART_IRQHandler+0x1ba>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <HAL_UART_IRQHandler+0x70>
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80a5 	beq.w	800829a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <HAL_UART_IRQHandler+0x90>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008168:	f043 0201 	orr.w	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <HAL_UART_IRQHandler+0xb0>
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	f043 0202 	orr.w	r2, r3, #2
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_UART_IRQHandler+0xd0>
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a8:	f043 0204 	orr.w	r2, r3, #4
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00f      	beq.n	80081da <HAL_UART_IRQHandler+0xfa>
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <HAL_UART_IRQHandler+0xee>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	f043 0208 	orr.w	r2, r3, #8
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d077      	beq.n	80082d2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <HAL_UART_IRQHandler+0x11c>
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f003 0320 	and.w	r3, r3, #32
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f975 	bl	80084e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008206:	2b40      	cmp	r3, #64	; 0x40
 8008208:	bf0c      	ite	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	2300      	movne	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <HAL_UART_IRQHandler+0x144>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d031      	beq.n	8008288 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f8c0 	bl	80083aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d123      	bne.n	8008280 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008246:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824c:	2b00      	cmp	r3, #0
 800824e:	d013      	beq.n	8008278 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008254:	4a21      	ldr	r2, [pc, #132]	; (80082dc <HAL_UART_IRQHandler+0x1fc>)
 8008256:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825c:	4618      	mov	r0, r3
 800825e:	f7fb fdbc 	bl	8003dda <HAL_DMA_Abort_IT>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d016      	beq.n	8008296 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008272:	4610      	mov	r0, r2
 8008274:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008276:	e00e      	b.n	8008296 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f843 	bl	8008304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827e:	e00a      	b.n	8008296 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f83f 	bl	8008304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008286:	e006      	b.n	8008296 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f83b 	bl	8008304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008294:	e01d      	b.n	80082d2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008296:	bf00      	nop
    return;
 8008298:	e01b      	b.n	80082d2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d008      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1d6>
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f8ac 	bl	800840c <UART_Transmit_IT>
    return;
 80082b4:	e00e      	b.n	80082d4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d009      	beq.n	80082d4 <HAL_UART_IRQHandler+0x1f4>
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f8f3 	bl	80084b6 <UART_EndTransmit_IT>
    return;
 80082d0:	e000      	b.n	80082d4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80082d2:	bf00      	nop
  }
}
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	080083e5 	.word	0x080083e5

080082e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bc80      	pop	{r7}
 80082f0:	4770      	bx	lr

080082f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr

08008304 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008326:	e02c      	b.n	8008382 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d028      	beq.n	8008382 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <UART_WaitOnFlagUntilTimeout+0x30>
 8008336:	f7fa ffe7 	bl	8003308 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	429a      	cmp	r2, r3
 8008344:	d21d      	bcs.n	8008382 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68da      	ldr	r2, [r3, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008354:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695a      	ldr	r2, [r3, #20]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0201 	bic.w	r2, r2, #1
 8008364:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e00f      	b.n	80083a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4013      	ands	r3, r2
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	bf0c      	ite	eq
 8008392:	2301      	moveq	r3, #1
 8008394:	2300      	movne	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	429a      	cmp	r2, r3
 800839e:	d0c3      	beq.n	8008328 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0201 	bic.w	r2, r2, #1
 80083d0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff ff80 	bl	8008304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008404:	bf00      	nop
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b21      	cmp	r3, #33	; 0x21
 800841e:	d144      	bne.n	80084aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008428:	d11a      	bne.n	8008460 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800843e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	1c9a      	adds	r2, r3, #2
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	621a      	str	r2, [r3, #32]
 8008452:	e00e      	b.n	8008472 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	621a      	str	r2, [r3, #32]
 800845e:	e008      	b.n	8008472 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	1c59      	adds	r1, r3, #1
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	6211      	str	r1, [r2, #32]
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	b29b      	uxth	r3, r3
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	4619      	mov	r1, r3
 8008480:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10f      	bne.n	80084a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008494:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e000      	b.n	80084ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80084aa:	2302      	movs	r3, #2
  }
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff ff02 	bl	80082e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b22      	cmp	r3, #34	; 0x22
 80084f8:	d171      	bne.n	80085de <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008502:	d123      	bne.n	800854c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10e      	bne.n	8008530 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	b29b      	uxth	r3, r3
 800851a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	1c9a      	adds	r2, r3, #2
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	629a      	str	r2, [r3, #40]	; 0x28
 800852e:	e029      	b.n	8008584 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b29b      	uxth	r3, r3
 8008538:	b2db      	uxtb	r3, r3
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	629a      	str	r2, [r3, #40]	; 0x28
 800854a:	e01b      	b.n	8008584 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10a      	bne.n	800856a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6858      	ldr	r0, [r3, #4]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855e:	1c59      	adds	r1, r3, #1
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6291      	str	r1, [r2, #40]	; 0x28
 8008564:	b2c2      	uxtb	r2, r0
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	e00c      	b.n	8008584 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	1c58      	adds	r0, r3, #1
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	6288      	str	r0, [r1, #40]	; 0x28
 800857c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008580:	b2d2      	uxtb	r2, r2
 8008582:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	b29b      	uxth	r3, r3
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	4619      	mov	r1, r3
 8008592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008594:	2b00      	cmp	r3, #0
 8008596:	d120      	bne.n	80085da <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0220 	bic.w	r2, r2, #32
 80085a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0201 	bic.w	r2, r2, #1
 80085c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff fe8e 	bl	80082f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e002      	b.n	80085e0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e000      	b.n	80085e0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80085de:	2302      	movs	r3, #2
  }
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	4313      	orrs	r3, r2
 800861c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008628:	f023 030c 	bic.w	r3, r3, #12
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	430b      	orrs	r3, r1
 8008634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a55      	ldr	r2, [pc, #340]	; (80087a8 <UART_SetConfig+0x1c0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d103      	bne.n	800865e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008656:	f7ff f89f 	bl	8007798 <HAL_RCC_GetPCLK2Freq>
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	e002      	b.n	8008664 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800865e:	f7ff f887 	bl	8007770 <HAL_RCC_GetPCLK1Freq>
 8008662:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800866c:	d14c      	bne.n	8008708 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009a      	lsls	r2, r3, #2
 8008678:	441a      	add	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	4a49      	ldr	r2, [pc, #292]	; (80087ac <UART_SetConfig+0x1c4>)
 8008686:	fba2 2303 	umull	r2, r3, r2, r3
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	0119      	lsls	r1, r3, #4
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009a      	lsls	r2, r3, #2
 8008698:	441a      	add	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80086a4:	4b41      	ldr	r3, [pc, #260]	; (80087ac <UART_SetConfig+0x1c4>)
 80086a6:	fba3 0302 	umull	r0, r3, r3, r2
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	2064      	movs	r0, #100	; 0x64
 80086ae:	fb00 f303 	mul.w	r3, r0, r3
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	3332      	adds	r3, #50	; 0x32
 80086b8:	4a3c      	ldr	r2, [pc, #240]	; (80087ac <UART_SetConfig+0x1c4>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	095b      	lsrs	r3, r3, #5
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086c6:	4419      	add	r1, r3
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009a      	lsls	r2, r3, #2
 80086d2:	441a      	add	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	fbb2 f2f3 	udiv	r2, r2, r3
 80086de:	4b33      	ldr	r3, [pc, #204]	; (80087ac <UART_SetConfig+0x1c4>)
 80086e0:	fba3 0302 	umull	r0, r3, r3, r2
 80086e4:	095b      	lsrs	r3, r3, #5
 80086e6:	2064      	movs	r0, #100	; 0x64
 80086e8:	fb00 f303 	mul.w	r3, r0, r3
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	3332      	adds	r3, #50	; 0x32
 80086f2:	4a2e      	ldr	r2, [pc, #184]	; (80087ac <UART_SetConfig+0x1c4>)
 80086f4:	fba2 2303 	umull	r2, r3, r2, r3
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	f003 0207 	and.w	r2, r3, #7
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	440a      	add	r2, r1
 8008704:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008706:	e04a      	b.n	800879e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009a      	lsls	r2, r3, #2
 8008712:	441a      	add	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	fbb2 f3f3 	udiv	r3, r2, r3
 800871e:	4a23      	ldr	r2, [pc, #140]	; (80087ac <UART_SetConfig+0x1c4>)
 8008720:	fba2 2303 	umull	r2, r3, r2, r3
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	0119      	lsls	r1, r3, #4
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009a      	lsls	r2, r3, #2
 8008732:	441a      	add	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	fbb2 f2f3 	udiv	r2, r2, r3
 800873e:	4b1b      	ldr	r3, [pc, #108]	; (80087ac <UART_SetConfig+0x1c4>)
 8008740:	fba3 0302 	umull	r0, r3, r3, r2
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	2064      	movs	r0, #100	; 0x64
 8008748:	fb00 f303 	mul.w	r3, r0, r3
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	3332      	adds	r3, #50	; 0x32
 8008752:	4a16      	ldr	r2, [pc, #88]	; (80087ac <UART_SetConfig+0x1c4>)
 8008754:	fba2 2303 	umull	r2, r3, r2, r3
 8008758:	095b      	lsrs	r3, r3, #5
 800875a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800875e:	4419      	add	r1, r3
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009a      	lsls	r2, r3, #2
 800876a:	441a      	add	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	fbb2 f2f3 	udiv	r2, r2, r3
 8008776:	4b0d      	ldr	r3, [pc, #52]	; (80087ac <UART_SetConfig+0x1c4>)
 8008778:	fba3 0302 	umull	r0, r3, r3, r2
 800877c:	095b      	lsrs	r3, r3, #5
 800877e:	2064      	movs	r0, #100	; 0x64
 8008780:	fb00 f303 	mul.w	r3, r0, r3
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	3332      	adds	r3, #50	; 0x32
 800878a:	4a08      	ldr	r2, [pc, #32]	; (80087ac <UART_SetConfig+0x1c4>)
 800878c:	fba2 2303 	umull	r2, r3, r2, r3
 8008790:	095b      	lsrs	r3, r3, #5
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	440a      	add	r2, r1
 800879c:	609a      	str	r2, [r3, #8]
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40013800 	.word	0x40013800
 80087ac:	51eb851f 	.word	0x51eb851f

080087b0 <__errno>:
 80087b0:	4b01      	ldr	r3, [pc, #4]	; (80087b8 <__errno+0x8>)
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	2000000c 	.word	0x2000000c

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	2600      	movs	r6, #0
 80087c0:	4d0c      	ldr	r5, [pc, #48]	; (80087f4 <__libc_init_array+0x38>)
 80087c2:	4c0d      	ldr	r4, [pc, #52]	; (80087f8 <__libc_init_array+0x3c>)
 80087c4:	1b64      	subs	r4, r4, r5
 80087c6:	10a4      	asrs	r4, r4, #2
 80087c8:	42a6      	cmp	r6, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	f004 fc72 	bl	800d0b4 <_init>
 80087d0:	2600      	movs	r6, #0
 80087d2:	4d0a      	ldr	r5, [pc, #40]	; (80087fc <__libc_init_array+0x40>)
 80087d4:	4c0a      	ldr	r4, [pc, #40]	; (8008800 <__libc_init_array+0x44>)
 80087d6:	1b64      	subs	r4, r4, r5
 80087d8:	10a4      	asrs	r4, r4, #2
 80087da:	42a6      	cmp	r6, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e4:	4798      	blx	r3
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ee:	4798      	blx	r3
 80087f0:	3601      	adds	r6, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	0800d974 	.word	0x0800d974
 80087f8:	0800d974 	.word	0x0800d974
 80087fc:	0800d974 	.word	0x0800d974
 8008800:	0800d978 	.word	0x0800d978

08008804 <memset>:
 8008804:	4603      	mov	r3, r0
 8008806:	4402      	add	r2, r0
 8008808:	4293      	cmp	r3, r2
 800880a:	d100      	bne.n	800880e <memset+0xa>
 800880c:	4770      	bx	lr
 800880e:	f803 1b01 	strb.w	r1, [r3], #1
 8008812:	e7f9      	b.n	8008808 <memset+0x4>

08008814 <__cvt>:
 8008814:	2b00      	cmp	r3, #0
 8008816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881a:	461f      	mov	r7, r3
 800881c:	bfbb      	ittet	lt
 800881e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008822:	461f      	movlt	r7, r3
 8008824:	2300      	movge	r3, #0
 8008826:	232d      	movlt	r3, #45	; 0x2d
 8008828:	b088      	sub	sp, #32
 800882a:	4614      	mov	r4, r2
 800882c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800882e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008830:	7013      	strb	r3, [r2, #0]
 8008832:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008834:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008838:	f023 0820 	bic.w	r8, r3, #32
 800883c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008840:	d005      	beq.n	800884e <__cvt+0x3a>
 8008842:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008846:	d100      	bne.n	800884a <__cvt+0x36>
 8008848:	3501      	adds	r5, #1
 800884a:	2302      	movs	r3, #2
 800884c:	e000      	b.n	8008850 <__cvt+0x3c>
 800884e:	2303      	movs	r3, #3
 8008850:	aa07      	add	r2, sp, #28
 8008852:	9204      	str	r2, [sp, #16]
 8008854:	aa06      	add	r2, sp, #24
 8008856:	e9cd a202 	strd	sl, r2, [sp, #8]
 800885a:	e9cd 3500 	strd	r3, r5, [sp]
 800885e:	4622      	mov	r2, r4
 8008860:	463b      	mov	r3, r7
 8008862:	f001 fde9 	bl	800a438 <_dtoa_r>
 8008866:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800886a:	4606      	mov	r6, r0
 800886c:	d102      	bne.n	8008874 <__cvt+0x60>
 800886e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008870:	07db      	lsls	r3, r3, #31
 8008872:	d522      	bpl.n	80088ba <__cvt+0xa6>
 8008874:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008878:	eb06 0905 	add.w	r9, r6, r5
 800887c:	d110      	bne.n	80088a0 <__cvt+0x8c>
 800887e:	7833      	ldrb	r3, [r6, #0]
 8008880:	2b30      	cmp	r3, #48	; 0x30
 8008882:	d10a      	bne.n	800889a <__cvt+0x86>
 8008884:	2200      	movs	r2, #0
 8008886:	2300      	movs	r3, #0
 8008888:	4620      	mov	r0, r4
 800888a:	4639      	mov	r1, r7
 800888c:	f7f8 f8a4 	bl	80009d8 <__aeabi_dcmpeq>
 8008890:	b918      	cbnz	r0, 800889a <__cvt+0x86>
 8008892:	f1c5 0501 	rsb	r5, r5, #1
 8008896:	f8ca 5000 	str.w	r5, [sl]
 800889a:	f8da 3000 	ldr.w	r3, [sl]
 800889e:	4499      	add	r9, r3
 80088a0:	2200      	movs	r2, #0
 80088a2:	2300      	movs	r3, #0
 80088a4:	4620      	mov	r0, r4
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f896 	bl	80009d8 <__aeabi_dcmpeq>
 80088ac:	b108      	cbz	r0, 80088b2 <__cvt+0x9e>
 80088ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80088b2:	2230      	movs	r2, #48	; 0x30
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	454b      	cmp	r3, r9
 80088b8:	d307      	bcc.n	80088ca <__cvt+0xb6>
 80088ba:	4630      	mov	r0, r6
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088c0:	1b9b      	subs	r3, r3, r6
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	b008      	add	sp, #32
 80088c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ca:	1c59      	adds	r1, r3, #1
 80088cc:	9107      	str	r1, [sp, #28]
 80088ce:	701a      	strb	r2, [r3, #0]
 80088d0:	e7f0      	b.n	80088b4 <__cvt+0xa0>

080088d2 <__exponent>:
 80088d2:	4603      	mov	r3, r0
 80088d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088d6:	2900      	cmp	r1, #0
 80088d8:	f803 2b02 	strb.w	r2, [r3], #2
 80088dc:	bfb6      	itet	lt
 80088de:	222d      	movlt	r2, #45	; 0x2d
 80088e0:	222b      	movge	r2, #43	; 0x2b
 80088e2:	4249      	neglt	r1, r1
 80088e4:	2909      	cmp	r1, #9
 80088e6:	7042      	strb	r2, [r0, #1]
 80088e8:	dd2b      	ble.n	8008942 <__exponent+0x70>
 80088ea:	f10d 0407 	add.w	r4, sp, #7
 80088ee:	46a4      	mov	ip, r4
 80088f0:	270a      	movs	r7, #10
 80088f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80088f6:	460a      	mov	r2, r1
 80088f8:	46a6      	mov	lr, r4
 80088fa:	fb07 1516 	mls	r5, r7, r6, r1
 80088fe:	2a63      	cmp	r2, #99	; 0x63
 8008900:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008904:	4631      	mov	r1, r6
 8008906:	f104 34ff 	add.w	r4, r4, #4294967295
 800890a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800890e:	dcf0      	bgt.n	80088f2 <__exponent+0x20>
 8008910:	3130      	adds	r1, #48	; 0x30
 8008912:	f1ae 0502 	sub.w	r5, lr, #2
 8008916:	f804 1c01 	strb.w	r1, [r4, #-1]
 800891a:	4629      	mov	r1, r5
 800891c:	1c44      	adds	r4, r0, #1
 800891e:	4561      	cmp	r1, ip
 8008920:	d30a      	bcc.n	8008938 <__exponent+0x66>
 8008922:	f10d 0209 	add.w	r2, sp, #9
 8008926:	eba2 020e 	sub.w	r2, r2, lr
 800892a:	4565      	cmp	r5, ip
 800892c:	bf88      	it	hi
 800892e:	2200      	movhi	r2, #0
 8008930:	4413      	add	r3, r2
 8008932:	1a18      	subs	r0, r3, r0
 8008934:	b003      	add	sp, #12
 8008936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008938:	f811 2b01 	ldrb.w	r2, [r1], #1
 800893c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008940:	e7ed      	b.n	800891e <__exponent+0x4c>
 8008942:	2330      	movs	r3, #48	; 0x30
 8008944:	3130      	adds	r1, #48	; 0x30
 8008946:	7083      	strb	r3, [r0, #2]
 8008948:	70c1      	strb	r1, [r0, #3]
 800894a:	1d03      	adds	r3, r0, #4
 800894c:	e7f1      	b.n	8008932 <__exponent+0x60>
	...

08008950 <_printf_float>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	b091      	sub	sp, #68	; 0x44
 8008956:	460c      	mov	r4, r1
 8008958:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800895c:	4616      	mov	r6, r2
 800895e:	461f      	mov	r7, r3
 8008960:	4605      	mov	r5, r0
 8008962:	f002 febd 	bl	800b6e0 <_localeconv_r>
 8008966:	6803      	ldr	r3, [r0, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	9309      	str	r3, [sp, #36]	; 0x24
 800896c:	f7f7 fc08 	bl	8000180 <strlen>
 8008970:	2300      	movs	r3, #0
 8008972:	930e      	str	r3, [sp, #56]	; 0x38
 8008974:	f8d8 3000 	ldr.w	r3, [r8]
 8008978:	900a      	str	r0, [sp, #40]	; 0x28
 800897a:	3307      	adds	r3, #7
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	f103 0208 	add.w	r2, r3, #8
 8008984:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008988:	f8d4 b000 	ldr.w	fp, [r4]
 800898c:	f8c8 2000 	str.w	r2, [r8]
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008998:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800899c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80089a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295
 80089a6:	4640      	mov	r0, r8
 80089a8:	4b9c      	ldr	r3, [pc, #624]	; (8008c1c <_printf_float+0x2cc>)
 80089aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089ac:	f7f8 f846 	bl	8000a3c <__aeabi_dcmpun>
 80089b0:	bb70      	cbnz	r0, 8008a10 <_printf_float+0xc0>
 80089b2:	f04f 32ff 	mov.w	r2, #4294967295
 80089b6:	4640      	mov	r0, r8
 80089b8:	4b98      	ldr	r3, [pc, #608]	; (8008c1c <_printf_float+0x2cc>)
 80089ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089bc:	f7f8 f820 	bl	8000a00 <__aeabi_dcmple>
 80089c0:	bb30      	cbnz	r0, 8008a10 <_printf_float+0xc0>
 80089c2:	2200      	movs	r2, #0
 80089c4:	2300      	movs	r3, #0
 80089c6:	4640      	mov	r0, r8
 80089c8:	4651      	mov	r1, sl
 80089ca:	f7f8 f80f 	bl	80009ec <__aeabi_dcmplt>
 80089ce:	b110      	cbz	r0, 80089d6 <_printf_float+0x86>
 80089d0:	232d      	movs	r3, #45	; 0x2d
 80089d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d6:	4b92      	ldr	r3, [pc, #584]	; (8008c20 <_printf_float+0x2d0>)
 80089d8:	4892      	ldr	r0, [pc, #584]	; (8008c24 <_printf_float+0x2d4>)
 80089da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80089de:	bf94      	ite	ls
 80089e0:	4698      	movls	r8, r3
 80089e2:	4680      	movhi	r8, r0
 80089e4:	2303      	movs	r3, #3
 80089e6:	f04f 0a00 	mov.w	sl, #0
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	f02b 0304 	bic.w	r3, fp, #4
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	4633      	mov	r3, r6
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	9700      	str	r7, [sp, #0]
 80089fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80089fc:	f000 f9d4 	bl	8008da8 <_printf_common>
 8008a00:	3001      	adds	r0, #1
 8008a02:	f040 8090 	bne.w	8008b26 <_printf_float+0x1d6>
 8008a06:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0a:	b011      	add	sp, #68	; 0x44
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	4642      	mov	r2, r8
 8008a12:	4653      	mov	r3, sl
 8008a14:	4640      	mov	r0, r8
 8008a16:	4651      	mov	r1, sl
 8008a18:	f7f8 f810 	bl	8000a3c <__aeabi_dcmpun>
 8008a1c:	b148      	cbz	r0, 8008a32 <_printf_float+0xe2>
 8008a1e:	f1ba 0f00 	cmp.w	sl, #0
 8008a22:	bfb8      	it	lt
 8008a24:	232d      	movlt	r3, #45	; 0x2d
 8008a26:	4880      	ldr	r0, [pc, #512]	; (8008c28 <_printf_float+0x2d8>)
 8008a28:	bfb8      	it	lt
 8008a2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a2e:	4b7f      	ldr	r3, [pc, #508]	; (8008c2c <_printf_float+0x2dc>)
 8008a30:	e7d3      	b.n	80089da <_printf_float+0x8a>
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	d142      	bne.n	8008ac2 <_printf_float+0x172>
 8008a3c:	2306      	movs	r3, #6
 8008a3e:	6063      	str	r3, [r4, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	9206      	str	r2, [sp, #24]
 8008a44:	aa0e      	add	r2, sp, #56	; 0x38
 8008a46:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008a4a:	aa0d      	add	r2, sp, #52	; 0x34
 8008a4c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008a50:	9203      	str	r2, [sp, #12]
 8008a52:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008a56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	4642      	mov	r2, r8
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4628      	mov	r0, r5
 8008a64:	4653      	mov	r3, sl
 8008a66:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a68:	f7ff fed4 	bl	8008814 <__cvt>
 8008a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a6e:	4680      	mov	r8, r0
 8008a70:	2947      	cmp	r1, #71	; 0x47
 8008a72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a74:	d108      	bne.n	8008a88 <_printf_float+0x138>
 8008a76:	1cc8      	adds	r0, r1, #3
 8008a78:	db02      	blt.n	8008a80 <_printf_float+0x130>
 8008a7a:	6863      	ldr	r3, [r4, #4]
 8008a7c:	4299      	cmp	r1, r3
 8008a7e:	dd40      	ble.n	8008b02 <_printf_float+0x1b2>
 8008a80:	f1a9 0902 	sub.w	r9, r9, #2
 8008a84:	fa5f f989 	uxtb.w	r9, r9
 8008a88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a8c:	d81f      	bhi.n	8008ace <_printf_float+0x17e>
 8008a8e:	464a      	mov	r2, r9
 8008a90:	3901      	subs	r1, #1
 8008a92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a96:	910d      	str	r1, [sp, #52]	; 0x34
 8008a98:	f7ff ff1b 	bl	80088d2 <__exponent>
 8008a9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a9e:	4682      	mov	sl, r0
 8008aa0:	1813      	adds	r3, r2, r0
 8008aa2:	2a01      	cmp	r2, #1
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	dc02      	bgt.n	8008aae <_printf_float+0x15e>
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	07d2      	lsls	r2, r2, #31
 8008aac:	d501      	bpl.n	8008ab2 <_printf_float+0x162>
 8008aae:	3301      	adds	r3, #1
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d09b      	beq.n	80089f2 <_printf_float+0xa2>
 8008aba:	232d      	movs	r3, #45	; 0x2d
 8008abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac0:	e797      	b.n	80089f2 <_printf_float+0xa2>
 8008ac2:	2947      	cmp	r1, #71	; 0x47
 8008ac4:	d1bc      	bne.n	8008a40 <_printf_float+0xf0>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1ba      	bne.n	8008a40 <_printf_float+0xf0>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e7b7      	b.n	8008a3e <_printf_float+0xee>
 8008ace:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ad2:	d118      	bne.n	8008b06 <_printf_float+0x1b6>
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	6863      	ldr	r3, [r4, #4]
 8008ad8:	dd0b      	ble.n	8008af2 <_printf_float+0x1a2>
 8008ada:	6121      	str	r1, [r4, #16]
 8008adc:	b913      	cbnz	r3, 8008ae4 <_printf_float+0x194>
 8008ade:	6822      	ldr	r2, [r4, #0]
 8008ae0:	07d0      	lsls	r0, r2, #31
 8008ae2:	d502      	bpl.n	8008aea <_printf_float+0x19a>
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	440b      	add	r3, r1
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	f04f 0a00 	mov.w	sl, #0
 8008aee:	65a1      	str	r1, [r4, #88]	; 0x58
 8008af0:	e7df      	b.n	8008ab2 <_printf_float+0x162>
 8008af2:	b913      	cbnz	r3, 8008afa <_printf_float+0x1aa>
 8008af4:	6822      	ldr	r2, [r4, #0]
 8008af6:	07d2      	lsls	r2, r2, #31
 8008af8:	d501      	bpl.n	8008afe <_printf_float+0x1ae>
 8008afa:	3302      	adds	r3, #2
 8008afc:	e7f4      	b.n	8008ae8 <_printf_float+0x198>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e7f2      	b.n	8008ae8 <_printf_float+0x198>
 8008b02:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	db05      	blt.n	8008b18 <_printf_float+0x1c8>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	6121      	str	r1, [r4, #16]
 8008b10:	07d8      	lsls	r0, r3, #31
 8008b12:	d5ea      	bpl.n	8008aea <_printf_float+0x19a>
 8008b14:	1c4b      	adds	r3, r1, #1
 8008b16:	e7e7      	b.n	8008ae8 <_printf_float+0x198>
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	bfcc      	ite	gt
 8008b1c:	2201      	movgt	r2, #1
 8008b1e:	f1c1 0202 	rsble	r2, r1, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	e7e0      	b.n	8008ae8 <_printf_float+0x198>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	055a      	lsls	r2, r3, #21
 8008b2a:	d407      	bmi.n	8008b3c <_printf_float+0x1ec>
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	4642      	mov	r2, r8
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	d12b      	bne.n	8008b92 <_printf_float+0x242>
 8008b3a:	e764      	b.n	8008a06 <_printf_float+0xb6>
 8008b3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b40:	f240 80dd 	bls.w	8008cfe <_printf_float+0x3ae>
 8008b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f7f7 ff44 	bl	80009d8 <__aeabi_dcmpeq>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d033      	beq.n	8008bbc <_printf_float+0x26c>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	4a35      	ldr	r2, [pc, #212]	; (8008c30 <_printf_float+0x2e0>)
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f af51 	beq.w	8008a06 <_printf_float+0xb6>
 8008b64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	db02      	blt.n	8008b72 <_printf_float+0x222>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	07d8      	lsls	r0, r3, #31
 8008b70:	d50f      	bpl.n	8008b92 <_printf_float+0x242>
 8008b72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f af42 	beq.w	8008a06 <_printf_float+0xb6>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	f104 091a 	add.w	r9, r4, #26
 8008b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	4543      	cmp	r3, r8
 8008b90:	dc09      	bgt.n	8008ba6 <_printf_float+0x256>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	079b      	lsls	r3, r3, #30
 8008b96:	f100 8102 	bmi.w	8008d9e <_printf_float+0x44e>
 8008b9a:	68e0      	ldr	r0, [r4, #12]
 8008b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b9e:	4298      	cmp	r0, r3
 8008ba0:	bfb8      	it	lt
 8008ba2:	4618      	movlt	r0, r3
 8008ba4:	e731      	b.n	8008a0a <_printf_float+0xba>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	464a      	mov	r2, r9
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	f43f af28 	beq.w	8008a06 <_printf_float+0xb6>
 8008bb6:	f108 0801 	add.w	r8, r8, #1
 8008bba:	e7e6      	b.n	8008b8a <_printf_float+0x23a>
 8008bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dc38      	bgt.n	8008c34 <_printf_float+0x2e4>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	4a19      	ldr	r2, [pc, #100]	; (8008c30 <_printf_float+0x2e0>)
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f43f af1a 	beq.w	8008a06 <_printf_float+0xb6>
 8008bd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	d102      	bne.n	8008be0 <_printf_float+0x290>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	07d9      	lsls	r1, r3, #31
 8008bde:	d5d8      	bpl.n	8008b92 <_printf_float+0x242>
 8008be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be4:	4631      	mov	r1, r6
 8008be6:	4628      	mov	r0, r5
 8008be8:	47b8      	blx	r7
 8008bea:	3001      	adds	r0, #1
 8008bec:	f43f af0b 	beq.w	8008a06 <_printf_float+0xb6>
 8008bf0:	f04f 0900 	mov.w	r9, #0
 8008bf4:	f104 0a1a 	add.w	sl, r4, #26
 8008bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bfa:	425b      	negs	r3, r3
 8008bfc:	454b      	cmp	r3, r9
 8008bfe:	dc01      	bgt.n	8008c04 <_printf_float+0x2b4>
 8008c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c02:	e794      	b.n	8008b2e <_printf_float+0x1de>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4652      	mov	r2, sl
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f43f aef9 	beq.w	8008a06 <_printf_float+0xb6>
 8008c14:	f109 0901 	add.w	r9, r9, #1
 8008c18:	e7ee      	b.n	8008bf8 <_printf_float+0x2a8>
 8008c1a:	bf00      	nop
 8008c1c:	7fefffff 	.word	0x7fefffff
 8008c20:	0800d4bc 	.word	0x0800d4bc
 8008c24:	0800d4c0 	.word	0x0800d4c0
 8008c28:	0800d4c8 	.word	0x0800d4c8
 8008c2c:	0800d4c4 	.word	0x0800d4c4
 8008c30:	0800d4cc 	.word	0x0800d4cc
 8008c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	bfa8      	it	ge
 8008c3c:	461a      	movge	r2, r3
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	4691      	mov	r9, r2
 8008c42:	dc37      	bgt.n	8008cb4 <_printf_float+0x364>
 8008c44:	f04f 0b00 	mov.w	fp, #0
 8008c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c4c:	f104 021a 	add.w	r2, r4, #26
 8008c50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c54:	ebaa 0309 	sub.w	r3, sl, r9
 8008c58:	455b      	cmp	r3, fp
 8008c5a:	dc33      	bgt.n	8008cc4 <_printf_float+0x374>
 8008c5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c60:	429a      	cmp	r2, r3
 8008c62:	db3b      	blt.n	8008cdc <_printf_float+0x38c>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	07da      	lsls	r2, r3, #31
 8008c68:	d438      	bmi.n	8008cdc <_printf_float+0x38c>
 8008c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c6e:	eba2 030a 	sub.w	r3, r2, sl
 8008c72:	eba2 0901 	sub.w	r9, r2, r1
 8008c76:	4599      	cmp	r9, r3
 8008c78:	bfa8      	it	ge
 8008c7a:	4699      	movge	r9, r3
 8008c7c:	f1b9 0f00 	cmp.w	r9, #0
 8008c80:	dc34      	bgt.n	8008cec <_printf_float+0x39c>
 8008c82:	f04f 0800 	mov.w	r8, #0
 8008c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c8a:	f104 0a1a 	add.w	sl, r4, #26
 8008c8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	eba3 0309 	sub.w	r3, r3, r9
 8008c98:	4543      	cmp	r3, r8
 8008c9a:	f77f af7a 	ble.w	8008b92 <_printf_float+0x242>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4652      	mov	r2, sl
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f43f aeac 	beq.w	8008a06 <_printf_float+0xb6>
 8008cae:	f108 0801 	add.w	r8, r8, #1
 8008cb2:	e7ec      	b.n	8008c8e <_printf_float+0x33e>
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4642      	mov	r2, r8
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d1c0      	bne.n	8008c44 <_printf_float+0x2f4>
 8008cc2:	e6a0      	b.n	8008a06 <_printf_float+0xb6>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ccc:	47b8      	blx	r7
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f43f ae99 	beq.w	8008a06 <_printf_float+0xb6>
 8008cd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cd6:	f10b 0b01 	add.w	fp, fp, #1
 8008cda:	e7b9      	b.n	8008c50 <_printf_float+0x300>
 8008cdc:	4631      	mov	r1, r6
 8008cde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	47b8      	blx	r7
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d1bf      	bne.n	8008c6a <_printf_float+0x31a>
 8008cea:	e68c      	b.n	8008a06 <_printf_float+0xb6>
 8008cec:	464b      	mov	r3, r9
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	eb08 020a 	add.w	r2, r8, sl
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d1c2      	bne.n	8008c82 <_printf_float+0x332>
 8008cfc:	e683      	b.n	8008a06 <_printf_float+0xb6>
 8008cfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d00:	2a01      	cmp	r2, #1
 8008d02:	dc01      	bgt.n	8008d08 <_printf_float+0x3b8>
 8008d04:	07db      	lsls	r3, r3, #31
 8008d06:	d537      	bpl.n	8008d78 <_printf_float+0x428>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4642      	mov	r2, r8
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	47b8      	blx	r7
 8008d12:	3001      	adds	r0, #1
 8008d14:	f43f ae77 	beq.w	8008a06 <_printf_float+0xb6>
 8008d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f ae6f 	beq.w	8008a06 <_printf_float+0xb6>
 8008d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f7f7 fe52 	bl	80009d8 <__aeabi_dcmpeq>
 8008d34:	b9d8      	cbnz	r0, 8008d6e <_printf_float+0x41e>
 8008d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d38:	f108 0201 	add.w	r2, r8, #1
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	d10e      	bne.n	8008d66 <_printf_float+0x416>
 8008d48:	e65d      	b.n	8008a06 <_printf_float+0xb6>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	464a      	mov	r2, r9
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	f43f ae56 	beq.w	8008a06 <_printf_float+0xb6>
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d60:	3b01      	subs	r3, #1
 8008d62:	4543      	cmp	r3, r8
 8008d64:	dcf1      	bgt.n	8008d4a <_printf_float+0x3fa>
 8008d66:	4653      	mov	r3, sl
 8008d68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d6c:	e6e0      	b.n	8008b30 <_printf_float+0x1e0>
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	f104 091a 	add.w	r9, r4, #26
 8008d76:	e7f2      	b.n	8008d5e <_printf_float+0x40e>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4642      	mov	r2, r8
 8008d7c:	e7df      	b.n	8008d3e <_printf_float+0x3ee>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	464a      	mov	r2, r9
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f ae3c 	beq.w	8008a06 <_printf_float+0xb6>
 8008d8e:	f108 0801 	add.w	r8, r8, #1
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d96:	1a5b      	subs	r3, r3, r1
 8008d98:	4543      	cmp	r3, r8
 8008d9a:	dcf0      	bgt.n	8008d7e <_printf_float+0x42e>
 8008d9c:	e6fd      	b.n	8008b9a <_printf_float+0x24a>
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	f104 0919 	add.w	r9, r4, #25
 8008da6:	e7f4      	b.n	8008d92 <_printf_float+0x442>

08008da8 <_printf_common>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	4616      	mov	r6, r2
 8008dae:	4699      	mov	r9, r3
 8008db0:	688a      	ldr	r2, [r1, #8]
 8008db2:	690b      	ldr	r3, [r1, #16]
 8008db4:	4607      	mov	r7, r0
 8008db6:	4293      	cmp	r3, r2
 8008db8:	bfb8      	it	lt
 8008dba:	4613      	movlt	r3, r2
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc8:	b10a      	cbz	r2, 8008dce <_printf_common+0x26>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	6033      	str	r3, [r6, #0]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	0699      	lsls	r1, r3, #26
 8008dd2:	bf42      	ittt	mi
 8008dd4:	6833      	ldrmi	r3, [r6, #0]
 8008dd6:	3302      	addmi	r3, #2
 8008dd8:	6033      	strmi	r3, [r6, #0]
 8008dda:	6825      	ldr	r5, [r4, #0]
 8008ddc:	f015 0506 	ands.w	r5, r5, #6
 8008de0:	d106      	bne.n	8008df0 <_printf_common+0x48>
 8008de2:	f104 0a19 	add.w	sl, r4, #25
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	6832      	ldr	r2, [r6, #0]
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dc28      	bgt.n	8008e42 <_printf_common+0x9a>
 8008df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008df4:	1e13      	subs	r3, r2, #0
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	bf18      	it	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	0692      	lsls	r2, r2, #26
 8008dfe:	d42d      	bmi.n	8008e5c <_printf_common+0xb4>
 8008e00:	4649      	mov	r1, r9
 8008e02:	4638      	mov	r0, r7
 8008e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e08:	47c0      	blx	r8
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d020      	beq.n	8008e50 <_printf_common+0xa8>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	68e5      	ldr	r5, [r4, #12]
 8008e12:	f003 0306 	and.w	r3, r3, #6
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	bf18      	it	ne
 8008e1a:	2500      	movne	r5, #0
 8008e1c:	6832      	ldr	r2, [r6, #0]
 8008e1e:	f04f 0600 	mov.w	r6, #0
 8008e22:	68a3      	ldr	r3, [r4, #8]
 8008e24:	bf08      	it	eq
 8008e26:	1aad      	subeq	r5, r5, r2
 8008e28:	6922      	ldr	r2, [r4, #16]
 8008e2a:	bf08      	it	eq
 8008e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e30:	4293      	cmp	r3, r2
 8008e32:	bfc4      	itt	gt
 8008e34:	1a9b      	subgt	r3, r3, r2
 8008e36:	18ed      	addgt	r5, r5, r3
 8008e38:	341a      	adds	r4, #26
 8008e3a:	42b5      	cmp	r5, r6
 8008e3c:	d11a      	bne.n	8008e74 <_printf_common+0xcc>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e008      	b.n	8008e54 <_printf_common+0xac>
 8008e42:	2301      	movs	r3, #1
 8008e44:	4652      	mov	r2, sl
 8008e46:	4649      	mov	r1, r9
 8008e48:	4638      	mov	r0, r7
 8008e4a:	47c0      	blx	r8
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d103      	bne.n	8008e58 <_printf_common+0xb0>
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e58:	3501      	adds	r5, #1
 8008e5a:	e7c4      	b.n	8008de6 <_printf_common+0x3e>
 8008e5c:	2030      	movs	r0, #48	; 0x30
 8008e5e:	18e1      	adds	r1, r4, r3
 8008e60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e6a:	4422      	add	r2, r4
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e72:	e7c5      	b.n	8008e00 <_printf_common+0x58>
 8008e74:	2301      	movs	r3, #1
 8008e76:	4622      	mov	r2, r4
 8008e78:	4649      	mov	r1, r9
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	47c0      	blx	r8
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d0e6      	beq.n	8008e50 <_printf_common+0xa8>
 8008e82:	3601      	adds	r6, #1
 8008e84:	e7d9      	b.n	8008e3a <_printf_common+0x92>
	...

08008e88 <_printf_i>:
 8008e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	7e27      	ldrb	r7, [r4, #24]
 8008e90:	4691      	mov	r9, r2
 8008e92:	2f78      	cmp	r7, #120	; 0x78
 8008e94:	4680      	mov	r8, r0
 8008e96:	469a      	mov	sl, r3
 8008e98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e9e:	d807      	bhi.n	8008eb0 <_printf_i+0x28>
 8008ea0:	2f62      	cmp	r7, #98	; 0x62
 8008ea2:	d80a      	bhi.n	8008eba <_printf_i+0x32>
 8008ea4:	2f00      	cmp	r7, #0
 8008ea6:	f000 80d9 	beq.w	800905c <_printf_i+0x1d4>
 8008eaa:	2f58      	cmp	r7, #88	; 0x58
 8008eac:	f000 80a4 	beq.w	8008ff8 <_printf_i+0x170>
 8008eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eb8:	e03a      	b.n	8008f30 <_printf_i+0xa8>
 8008eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ebe:	2b15      	cmp	r3, #21
 8008ec0:	d8f6      	bhi.n	8008eb0 <_printf_i+0x28>
 8008ec2:	a001      	add	r0, pc, #4	; (adr r0, 8008ec8 <_printf_i+0x40>)
 8008ec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ec8:	08008f21 	.word	0x08008f21
 8008ecc:	08008f35 	.word	0x08008f35
 8008ed0:	08008eb1 	.word	0x08008eb1
 8008ed4:	08008eb1 	.word	0x08008eb1
 8008ed8:	08008eb1 	.word	0x08008eb1
 8008edc:	08008eb1 	.word	0x08008eb1
 8008ee0:	08008f35 	.word	0x08008f35
 8008ee4:	08008eb1 	.word	0x08008eb1
 8008ee8:	08008eb1 	.word	0x08008eb1
 8008eec:	08008eb1 	.word	0x08008eb1
 8008ef0:	08008eb1 	.word	0x08008eb1
 8008ef4:	08009043 	.word	0x08009043
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	08009025 	.word	0x08009025
 8008f00:	08008eb1 	.word	0x08008eb1
 8008f04:	08008eb1 	.word	0x08008eb1
 8008f08:	08009065 	.word	0x08009065
 8008f0c:	08008eb1 	.word	0x08008eb1
 8008f10:	08008f65 	.word	0x08008f65
 8008f14:	08008eb1 	.word	0x08008eb1
 8008f18:	08008eb1 	.word	0x08008eb1
 8008f1c:	0800902d 	.word	0x0800902d
 8008f20:	680b      	ldr	r3, [r1, #0]
 8008f22:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f26:	1d1a      	adds	r2, r3, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	600a      	str	r2, [r1, #0]
 8008f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f30:	2301      	movs	r3, #1
 8008f32:	e0a4      	b.n	800907e <_printf_i+0x1f6>
 8008f34:	6825      	ldr	r5, [r4, #0]
 8008f36:	6808      	ldr	r0, [r1, #0]
 8008f38:	062e      	lsls	r6, r5, #24
 8008f3a:	f100 0304 	add.w	r3, r0, #4
 8008f3e:	d50a      	bpl.n	8008f56 <_printf_i+0xce>
 8008f40:	6805      	ldr	r5, [r0, #0]
 8008f42:	600b      	str	r3, [r1, #0]
 8008f44:	2d00      	cmp	r5, #0
 8008f46:	da03      	bge.n	8008f50 <_printf_i+0xc8>
 8008f48:	232d      	movs	r3, #45	; 0x2d
 8008f4a:	426d      	negs	r5, r5
 8008f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f50:	230a      	movs	r3, #10
 8008f52:	485e      	ldr	r0, [pc, #376]	; (80090cc <_printf_i+0x244>)
 8008f54:	e019      	b.n	8008f8a <_printf_i+0x102>
 8008f56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f5a:	6805      	ldr	r5, [r0, #0]
 8008f5c:	600b      	str	r3, [r1, #0]
 8008f5e:	bf18      	it	ne
 8008f60:	b22d      	sxthne	r5, r5
 8008f62:	e7ef      	b.n	8008f44 <_printf_i+0xbc>
 8008f64:	680b      	ldr	r3, [r1, #0]
 8008f66:	6825      	ldr	r5, [r4, #0]
 8008f68:	1d18      	adds	r0, r3, #4
 8008f6a:	6008      	str	r0, [r1, #0]
 8008f6c:	0628      	lsls	r0, r5, #24
 8008f6e:	d501      	bpl.n	8008f74 <_printf_i+0xec>
 8008f70:	681d      	ldr	r5, [r3, #0]
 8008f72:	e002      	b.n	8008f7a <_printf_i+0xf2>
 8008f74:	0669      	lsls	r1, r5, #25
 8008f76:	d5fb      	bpl.n	8008f70 <_printf_i+0xe8>
 8008f78:	881d      	ldrh	r5, [r3, #0]
 8008f7a:	2f6f      	cmp	r7, #111	; 0x6f
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2308      	moveq	r3, #8
 8008f80:	230a      	movne	r3, #10
 8008f82:	4852      	ldr	r0, [pc, #328]	; (80090cc <_printf_i+0x244>)
 8008f84:	2100      	movs	r1, #0
 8008f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f8a:	6866      	ldr	r6, [r4, #4]
 8008f8c:	2e00      	cmp	r6, #0
 8008f8e:	bfa8      	it	ge
 8008f90:	6821      	ldrge	r1, [r4, #0]
 8008f92:	60a6      	str	r6, [r4, #8]
 8008f94:	bfa4      	itt	ge
 8008f96:	f021 0104 	bicge.w	r1, r1, #4
 8008f9a:	6021      	strge	r1, [r4, #0]
 8008f9c:	b90d      	cbnz	r5, 8008fa2 <_printf_i+0x11a>
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	d04d      	beq.n	800903e <_printf_i+0x1b6>
 8008fa2:	4616      	mov	r6, r2
 8008fa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fa8:	fb03 5711 	mls	r7, r3, r1, r5
 8008fac:	5dc7      	ldrb	r7, [r0, r7]
 8008fae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fb2:	462f      	mov	r7, r5
 8008fb4:	42bb      	cmp	r3, r7
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	d9f4      	bls.n	8008fa4 <_printf_i+0x11c>
 8008fba:	2b08      	cmp	r3, #8
 8008fbc:	d10b      	bne.n	8008fd6 <_printf_i+0x14e>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	07df      	lsls	r7, r3, #31
 8008fc2:	d508      	bpl.n	8008fd6 <_printf_i+0x14e>
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	6861      	ldr	r1, [r4, #4]
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	bfde      	ittt	le
 8008fcc:	2330      	movle	r3, #48	; 0x30
 8008fce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fd6:	1b92      	subs	r2, r2, r6
 8008fd8:	6122      	str	r2, [r4, #16]
 8008fda:	464b      	mov	r3, r9
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4640      	mov	r0, r8
 8008fe0:	f8cd a000 	str.w	sl, [sp]
 8008fe4:	aa03      	add	r2, sp, #12
 8008fe6:	f7ff fedf 	bl	8008da8 <_printf_common>
 8008fea:	3001      	adds	r0, #1
 8008fec:	d14c      	bne.n	8009088 <_printf_i+0x200>
 8008fee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff2:	b004      	add	sp, #16
 8008ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff8:	4834      	ldr	r0, [pc, #208]	; (80090cc <_printf_i+0x244>)
 8008ffa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ffe:	680e      	ldr	r6, [r1, #0]
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	f856 5b04 	ldr.w	r5, [r6], #4
 8009006:	061f      	lsls	r7, r3, #24
 8009008:	600e      	str	r6, [r1, #0]
 800900a:	d514      	bpl.n	8009036 <_printf_i+0x1ae>
 800900c:	07d9      	lsls	r1, r3, #31
 800900e:	bf44      	itt	mi
 8009010:	f043 0320 	orrmi.w	r3, r3, #32
 8009014:	6023      	strmi	r3, [r4, #0]
 8009016:	b91d      	cbnz	r5, 8009020 <_printf_i+0x198>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	f023 0320 	bic.w	r3, r3, #32
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	2310      	movs	r3, #16
 8009022:	e7af      	b.n	8008f84 <_printf_i+0xfc>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	f043 0320 	orr.w	r3, r3, #32
 800902a:	6023      	str	r3, [r4, #0]
 800902c:	2378      	movs	r3, #120	; 0x78
 800902e:	4828      	ldr	r0, [pc, #160]	; (80090d0 <_printf_i+0x248>)
 8009030:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009034:	e7e3      	b.n	8008ffe <_printf_i+0x176>
 8009036:	065e      	lsls	r6, r3, #25
 8009038:	bf48      	it	mi
 800903a:	b2ad      	uxthmi	r5, r5
 800903c:	e7e6      	b.n	800900c <_printf_i+0x184>
 800903e:	4616      	mov	r6, r2
 8009040:	e7bb      	b.n	8008fba <_printf_i+0x132>
 8009042:	680b      	ldr	r3, [r1, #0]
 8009044:	6826      	ldr	r6, [r4, #0]
 8009046:	1d1d      	adds	r5, r3, #4
 8009048:	6960      	ldr	r0, [r4, #20]
 800904a:	600d      	str	r5, [r1, #0]
 800904c:	0635      	lsls	r5, r6, #24
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	d501      	bpl.n	8009056 <_printf_i+0x1ce>
 8009052:	6018      	str	r0, [r3, #0]
 8009054:	e002      	b.n	800905c <_printf_i+0x1d4>
 8009056:	0671      	lsls	r1, r6, #25
 8009058:	d5fb      	bpl.n	8009052 <_printf_i+0x1ca>
 800905a:	8018      	strh	r0, [r3, #0]
 800905c:	2300      	movs	r3, #0
 800905e:	4616      	mov	r6, r2
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	e7ba      	b.n	8008fda <_printf_i+0x152>
 8009064:	680b      	ldr	r3, [r1, #0]
 8009066:	1d1a      	adds	r2, r3, #4
 8009068:	600a      	str	r2, [r1, #0]
 800906a:	681e      	ldr	r6, [r3, #0]
 800906c:	2100      	movs	r1, #0
 800906e:	4630      	mov	r0, r6
 8009070:	6862      	ldr	r2, [r4, #4]
 8009072:	f002 fb53 	bl	800b71c <memchr>
 8009076:	b108      	cbz	r0, 800907c <_printf_i+0x1f4>
 8009078:	1b80      	subs	r0, r0, r6
 800907a:	6060      	str	r0, [r4, #4]
 800907c:	6863      	ldr	r3, [r4, #4]
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	2300      	movs	r3, #0
 8009082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009086:	e7a8      	b.n	8008fda <_printf_i+0x152>
 8009088:	4632      	mov	r2, r6
 800908a:	4649      	mov	r1, r9
 800908c:	4640      	mov	r0, r8
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	47d0      	blx	sl
 8009092:	3001      	adds	r0, #1
 8009094:	d0ab      	beq.n	8008fee <_printf_i+0x166>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	079b      	lsls	r3, r3, #30
 800909a:	d413      	bmi.n	80090c4 <_printf_i+0x23c>
 800909c:	68e0      	ldr	r0, [r4, #12]
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	4298      	cmp	r0, r3
 80090a2:	bfb8      	it	lt
 80090a4:	4618      	movlt	r0, r3
 80090a6:	e7a4      	b.n	8008ff2 <_printf_i+0x16a>
 80090a8:	2301      	movs	r3, #1
 80090aa:	4632      	mov	r2, r6
 80090ac:	4649      	mov	r1, r9
 80090ae:	4640      	mov	r0, r8
 80090b0:	47d0      	blx	sl
 80090b2:	3001      	adds	r0, #1
 80090b4:	d09b      	beq.n	8008fee <_printf_i+0x166>
 80090b6:	3501      	adds	r5, #1
 80090b8:	68e3      	ldr	r3, [r4, #12]
 80090ba:	9903      	ldr	r1, [sp, #12]
 80090bc:	1a5b      	subs	r3, r3, r1
 80090be:	42ab      	cmp	r3, r5
 80090c0:	dcf2      	bgt.n	80090a8 <_printf_i+0x220>
 80090c2:	e7eb      	b.n	800909c <_printf_i+0x214>
 80090c4:	2500      	movs	r5, #0
 80090c6:	f104 0619 	add.w	r6, r4, #25
 80090ca:	e7f5      	b.n	80090b8 <_printf_i+0x230>
 80090cc:	0800d4ce 	.word	0x0800d4ce
 80090d0:	0800d4df 	.word	0x0800d4df

080090d4 <_scanf_float>:
 80090d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	b087      	sub	sp, #28
 80090da:	9303      	str	r3, [sp, #12]
 80090dc:	688b      	ldr	r3, [r1, #8]
 80090de:	4617      	mov	r7, r2
 80090e0:	1e5a      	subs	r2, r3, #1
 80090e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80090e6:	bf85      	ittet	hi
 80090e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090ec:	195b      	addhi	r3, r3, r5
 80090ee:	2300      	movls	r3, #0
 80090f0:	9302      	strhi	r3, [sp, #8]
 80090f2:	bf88      	it	hi
 80090f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090f8:	468b      	mov	fp, r1
 80090fa:	f04f 0500 	mov.w	r5, #0
 80090fe:	bf8c      	ite	hi
 8009100:	608b      	strhi	r3, [r1, #8]
 8009102:	9302      	strls	r3, [sp, #8]
 8009104:	680b      	ldr	r3, [r1, #0]
 8009106:	4680      	mov	r8, r0
 8009108:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800910c:	f84b 3b1c 	str.w	r3, [fp], #28
 8009110:	460c      	mov	r4, r1
 8009112:	465e      	mov	r6, fp
 8009114:	46aa      	mov	sl, r5
 8009116:	46a9      	mov	r9, r5
 8009118:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800911c:	9501      	str	r5, [sp, #4]
 800911e:	68a2      	ldr	r2, [r4, #8]
 8009120:	b152      	cbz	r2, 8009138 <_scanf_float+0x64>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b4e      	cmp	r3, #78	; 0x4e
 8009128:	d864      	bhi.n	80091f4 <_scanf_float+0x120>
 800912a:	2b40      	cmp	r3, #64	; 0x40
 800912c:	d83c      	bhi.n	80091a8 <_scanf_float+0xd4>
 800912e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009132:	b2c8      	uxtb	r0, r1
 8009134:	280e      	cmp	r0, #14
 8009136:	d93a      	bls.n	80091ae <_scanf_float+0xda>
 8009138:	f1b9 0f00 	cmp.w	r9, #0
 800913c:	d003      	beq.n	8009146 <_scanf_float+0x72>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800914a:	f1ba 0f01 	cmp.w	sl, #1
 800914e:	f200 8113 	bhi.w	8009378 <_scanf_float+0x2a4>
 8009152:	455e      	cmp	r6, fp
 8009154:	f200 8105 	bhi.w	8009362 <_scanf_float+0x28e>
 8009158:	2501      	movs	r5, #1
 800915a:	4628      	mov	r0, r5
 800915c:	b007      	add	sp, #28
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009162:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009166:	2a0d      	cmp	r2, #13
 8009168:	d8e6      	bhi.n	8009138 <_scanf_float+0x64>
 800916a:	a101      	add	r1, pc, #4	; (adr r1, 8009170 <_scanf_float+0x9c>)
 800916c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009170:	080092af 	.word	0x080092af
 8009174:	08009139 	.word	0x08009139
 8009178:	08009139 	.word	0x08009139
 800917c:	08009139 	.word	0x08009139
 8009180:	0800930f 	.word	0x0800930f
 8009184:	080092e7 	.word	0x080092e7
 8009188:	08009139 	.word	0x08009139
 800918c:	08009139 	.word	0x08009139
 8009190:	080092bd 	.word	0x080092bd
 8009194:	08009139 	.word	0x08009139
 8009198:	08009139 	.word	0x08009139
 800919c:	08009139 	.word	0x08009139
 80091a0:	08009139 	.word	0x08009139
 80091a4:	08009275 	.word	0x08009275
 80091a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80091ac:	e7db      	b.n	8009166 <_scanf_float+0x92>
 80091ae:	290e      	cmp	r1, #14
 80091b0:	d8c2      	bhi.n	8009138 <_scanf_float+0x64>
 80091b2:	a001      	add	r0, pc, #4	; (adr r0, 80091b8 <_scanf_float+0xe4>)
 80091b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091b8:	08009267 	.word	0x08009267
 80091bc:	08009139 	.word	0x08009139
 80091c0:	08009267 	.word	0x08009267
 80091c4:	080092fb 	.word	0x080092fb
 80091c8:	08009139 	.word	0x08009139
 80091cc:	08009215 	.word	0x08009215
 80091d0:	08009251 	.word	0x08009251
 80091d4:	08009251 	.word	0x08009251
 80091d8:	08009251 	.word	0x08009251
 80091dc:	08009251 	.word	0x08009251
 80091e0:	08009251 	.word	0x08009251
 80091e4:	08009251 	.word	0x08009251
 80091e8:	08009251 	.word	0x08009251
 80091ec:	08009251 	.word	0x08009251
 80091f0:	08009251 	.word	0x08009251
 80091f4:	2b6e      	cmp	r3, #110	; 0x6e
 80091f6:	d809      	bhi.n	800920c <_scanf_float+0x138>
 80091f8:	2b60      	cmp	r3, #96	; 0x60
 80091fa:	d8b2      	bhi.n	8009162 <_scanf_float+0x8e>
 80091fc:	2b54      	cmp	r3, #84	; 0x54
 80091fe:	d077      	beq.n	80092f0 <_scanf_float+0x21c>
 8009200:	2b59      	cmp	r3, #89	; 0x59
 8009202:	d199      	bne.n	8009138 <_scanf_float+0x64>
 8009204:	2d07      	cmp	r5, #7
 8009206:	d197      	bne.n	8009138 <_scanf_float+0x64>
 8009208:	2508      	movs	r5, #8
 800920a:	e029      	b.n	8009260 <_scanf_float+0x18c>
 800920c:	2b74      	cmp	r3, #116	; 0x74
 800920e:	d06f      	beq.n	80092f0 <_scanf_float+0x21c>
 8009210:	2b79      	cmp	r3, #121	; 0x79
 8009212:	e7f6      	b.n	8009202 <_scanf_float+0x12e>
 8009214:	6821      	ldr	r1, [r4, #0]
 8009216:	05c8      	lsls	r0, r1, #23
 8009218:	d51a      	bpl.n	8009250 <_scanf_float+0x17c>
 800921a:	9b02      	ldr	r3, [sp, #8]
 800921c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009220:	6021      	str	r1, [r4, #0]
 8009222:	f109 0901 	add.w	r9, r9, #1
 8009226:	b11b      	cbz	r3, 8009230 <_scanf_float+0x15c>
 8009228:	3b01      	subs	r3, #1
 800922a:	3201      	adds	r2, #1
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	60a2      	str	r2, [r4, #8]
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	3b01      	subs	r3, #1
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	3301      	adds	r3, #1
 800923a:	6123      	str	r3, [r4, #16]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3b01      	subs	r3, #1
 8009240:	2b00      	cmp	r3, #0
 8009242:	607b      	str	r3, [r7, #4]
 8009244:	f340 8084 	ble.w	8009350 <_scanf_float+0x27c>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	603b      	str	r3, [r7, #0]
 800924e:	e766      	b.n	800911e <_scanf_float+0x4a>
 8009250:	eb1a 0f05 	cmn.w	sl, r5
 8009254:	f47f af70 	bne.w	8009138 <_scanf_float+0x64>
 8009258:	6822      	ldr	r2, [r4, #0]
 800925a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800925e:	6022      	str	r2, [r4, #0]
 8009260:	f806 3b01 	strb.w	r3, [r6], #1
 8009264:	e7e4      	b.n	8009230 <_scanf_float+0x15c>
 8009266:	6822      	ldr	r2, [r4, #0]
 8009268:	0610      	lsls	r0, r2, #24
 800926a:	f57f af65 	bpl.w	8009138 <_scanf_float+0x64>
 800926e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009272:	e7f4      	b.n	800925e <_scanf_float+0x18a>
 8009274:	f1ba 0f00 	cmp.w	sl, #0
 8009278:	d10e      	bne.n	8009298 <_scanf_float+0x1c4>
 800927a:	f1b9 0f00 	cmp.w	r9, #0
 800927e:	d10e      	bne.n	800929e <_scanf_float+0x1ca>
 8009280:	6822      	ldr	r2, [r4, #0]
 8009282:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009286:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800928a:	d108      	bne.n	800929e <_scanf_float+0x1ca>
 800928c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009290:	f04f 0a01 	mov.w	sl, #1
 8009294:	6022      	str	r2, [r4, #0]
 8009296:	e7e3      	b.n	8009260 <_scanf_float+0x18c>
 8009298:	f1ba 0f02 	cmp.w	sl, #2
 800929c:	d055      	beq.n	800934a <_scanf_float+0x276>
 800929e:	2d01      	cmp	r5, #1
 80092a0:	d002      	beq.n	80092a8 <_scanf_float+0x1d4>
 80092a2:	2d04      	cmp	r5, #4
 80092a4:	f47f af48 	bne.w	8009138 <_scanf_float+0x64>
 80092a8:	3501      	adds	r5, #1
 80092aa:	b2ed      	uxtb	r5, r5
 80092ac:	e7d8      	b.n	8009260 <_scanf_float+0x18c>
 80092ae:	f1ba 0f01 	cmp.w	sl, #1
 80092b2:	f47f af41 	bne.w	8009138 <_scanf_float+0x64>
 80092b6:	f04f 0a02 	mov.w	sl, #2
 80092ba:	e7d1      	b.n	8009260 <_scanf_float+0x18c>
 80092bc:	b97d      	cbnz	r5, 80092de <_scanf_float+0x20a>
 80092be:	f1b9 0f00 	cmp.w	r9, #0
 80092c2:	f47f af3c 	bne.w	800913e <_scanf_float+0x6a>
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092d0:	f47f af39 	bne.w	8009146 <_scanf_float+0x72>
 80092d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092d8:	2501      	movs	r5, #1
 80092da:	6022      	str	r2, [r4, #0]
 80092dc:	e7c0      	b.n	8009260 <_scanf_float+0x18c>
 80092de:	2d03      	cmp	r5, #3
 80092e0:	d0e2      	beq.n	80092a8 <_scanf_float+0x1d4>
 80092e2:	2d05      	cmp	r5, #5
 80092e4:	e7de      	b.n	80092a4 <_scanf_float+0x1d0>
 80092e6:	2d02      	cmp	r5, #2
 80092e8:	f47f af26 	bne.w	8009138 <_scanf_float+0x64>
 80092ec:	2503      	movs	r5, #3
 80092ee:	e7b7      	b.n	8009260 <_scanf_float+0x18c>
 80092f0:	2d06      	cmp	r5, #6
 80092f2:	f47f af21 	bne.w	8009138 <_scanf_float+0x64>
 80092f6:	2507      	movs	r5, #7
 80092f8:	e7b2      	b.n	8009260 <_scanf_float+0x18c>
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	0591      	lsls	r1, r2, #22
 80092fe:	f57f af1b 	bpl.w	8009138 <_scanf_float+0x64>
 8009302:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009306:	6022      	str	r2, [r4, #0]
 8009308:	f8cd 9004 	str.w	r9, [sp, #4]
 800930c:	e7a8      	b.n	8009260 <_scanf_float+0x18c>
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009314:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009318:	d006      	beq.n	8009328 <_scanf_float+0x254>
 800931a:	0550      	lsls	r0, r2, #21
 800931c:	f57f af0c 	bpl.w	8009138 <_scanf_float+0x64>
 8009320:	f1b9 0f00 	cmp.w	r9, #0
 8009324:	f43f af0f 	beq.w	8009146 <_scanf_float+0x72>
 8009328:	0591      	lsls	r1, r2, #22
 800932a:	bf58      	it	pl
 800932c:	9901      	ldrpl	r1, [sp, #4]
 800932e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009332:	bf58      	it	pl
 8009334:	eba9 0101 	subpl.w	r1, r9, r1
 8009338:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800933c:	f04f 0900 	mov.w	r9, #0
 8009340:	bf58      	it	pl
 8009342:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009346:	6022      	str	r2, [r4, #0]
 8009348:	e78a      	b.n	8009260 <_scanf_float+0x18c>
 800934a:	f04f 0a03 	mov.w	sl, #3
 800934e:	e787      	b.n	8009260 <_scanf_float+0x18c>
 8009350:	4639      	mov	r1, r7
 8009352:	4640      	mov	r0, r8
 8009354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009358:	4798      	blx	r3
 800935a:	2800      	cmp	r0, #0
 800935c:	f43f aedf 	beq.w	800911e <_scanf_float+0x4a>
 8009360:	e6ea      	b.n	8009138 <_scanf_float+0x64>
 8009362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009366:	463a      	mov	r2, r7
 8009368:	4640      	mov	r0, r8
 800936a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800936e:	4798      	blx	r3
 8009370:	6923      	ldr	r3, [r4, #16]
 8009372:	3b01      	subs	r3, #1
 8009374:	6123      	str	r3, [r4, #16]
 8009376:	e6ec      	b.n	8009152 <_scanf_float+0x7e>
 8009378:	1e6b      	subs	r3, r5, #1
 800937a:	2b06      	cmp	r3, #6
 800937c:	d825      	bhi.n	80093ca <_scanf_float+0x2f6>
 800937e:	2d02      	cmp	r5, #2
 8009380:	d836      	bhi.n	80093f0 <_scanf_float+0x31c>
 8009382:	455e      	cmp	r6, fp
 8009384:	f67f aee8 	bls.w	8009158 <_scanf_float+0x84>
 8009388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800938c:	463a      	mov	r2, r7
 800938e:	4640      	mov	r0, r8
 8009390:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009394:	4798      	blx	r3
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	3b01      	subs	r3, #1
 800939a:	6123      	str	r3, [r4, #16]
 800939c:	e7f1      	b.n	8009382 <_scanf_float+0x2ae>
 800939e:	9802      	ldr	r0, [sp, #8]
 80093a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80093a8:	463a      	mov	r2, r7
 80093aa:	9002      	str	r0, [sp, #8]
 80093ac:	4640      	mov	r0, r8
 80093ae:	4798      	blx	r3
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093ba:	fa5f fa8a 	uxtb.w	sl, sl
 80093be:	f1ba 0f02 	cmp.w	sl, #2
 80093c2:	d1ec      	bne.n	800939e <_scanf_float+0x2ca>
 80093c4:	3d03      	subs	r5, #3
 80093c6:	b2ed      	uxtb	r5, r5
 80093c8:	1b76      	subs	r6, r6, r5
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	05da      	lsls	r2, r3, #23
 80093ce:	d52f      	bpl.n	8009430 <_scanf_float+0x35c>
 80093d0:	055b      	lsls	r3, r3, #21
 80093d2:	d510      	bpl.n	80093f6 <_scanf_float+0x322>
 80093d4:	455e      	cmp	r6, fp
 80093d6:	f67f aebf 	bls.w	8009158 <_scanf_float+0x84>
 80093da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093de:	463a      	mov	r2, r7
 80093e0:	4640      	mov	r0, r8
 80093e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093e6:	4798      	blx	r3
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	e7f1      	b.n	80093d4 <_scanf_float+0x300>
 80093f0:	46aa      	mov	sl, r5
 80093f2:	9602      	str	r6, [sp, #8]
 80093f4:	e7df      	b.n	80093b6 <_scanf_float+0x2e2>
 80093f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	2965      	cmp	r1, #101	; 0x65
 80093fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009402:	f106 35ff 	add.w	r5, r6, #4294967295
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	d00c      	beq.n	8009424 <_scanf_float+0x350>
 800940a:	2945      	cmp	r1, #69	; 0x45
 800940c:	d00a      	beq.n	8009424 <_scanf_float+0x350>
 800940e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009412:	463a      	mov	r2, r7
 8009414:	4640      	mov	r0, r8
 8009416:	4798      	blx	r3
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800941e:	3b01      	subs	r3, #1
 8009420:	1eb5      	subs	r5, r6, #2
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	463a      	mov	r2, r7
 8009426:	4640      	mov	r0, r8
 8009428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800942c:	4798      	blx	r3
 800942e:	462e      	mov	r6, r5
 8009430:	6825      	ldr	r5, [r4, #0]
 8009432:	f015 0510 	ands.w	r5, r5, #16
 8009436:	d159      	bne.n	80094ec <_scanf_float+0x418>
 8009438:	7035      	strb	r5, [r6, #0]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009444:	d11c      	bne.n	8009480 <_scanf_float+0x3ac>
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	454b      	cmp	r3, r9
 800944a:	eba3 0209 	sub.w	r2, r3, r9
 800944e:	d124      	bne.n	800949a <_scanf_float+0x3c6>
 8009450:	2200      	movs	r2, #0
 8009452:	4659      	mov	r1, fp
 8009454:	4640      	mov	r0, r8
 8009456:	f000 fed3 	bl	800a200 <_strtod_r>
 800945a:	f8d4 c000 	ldr.w	ip, [r4]
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	f01c 0f02 	tst.w	ip, #2
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	d021      	beq.n	80094b0 <_scanf_float+0x3dc>
 800946c:	9903      	ldr	r1, [sp, #12]
 800946e:	1d1a      	adds	r2, r3, #4
 8009470:	600a      	str	r2, [r1, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	e9c3 6700 	strd	r6, r7, [r3]
 8009478:	68e3      	ldr	r3, [r4, #12]
 800947a:	3301      	adds	r3, #1
 800947c:	60e3      	str	r3, [r4, #12]
 800947e:	e66c      	b.n	800915a <_scanf_float+0x86>
 8009480:	9b04      	ldr	r3, [sp, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0e4      	beq.n	8009450 <_scanf_float+0x37c>
 8009486:	9905      	ldr	r1, [sp, #20]
 8009488:	230a      	movs	r3, #10
 800948a:	462a      	mov	r2, r5
 800948c:	4640      	mov	r0, r8
 800948e:	3101      	adds	r1, #1
 8009490:	f000 ff42 	bl	800a318 <_strtol_r>
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	9e05      	ldr	r6, [sp, #20]
 8009498:	1ac2      	subs	r2, r0, r3
 800949a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800949e:	429e      	cmp	r6, r3
 80094a0:	bf28      	it	cs
 80094a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80094a6:	4630      	mov	r0, r6
 80094a8:	4911      	ldr	r1, [pc, #68]	; (80094f0 <_scanf_float+0x41c>)
 80094aa:	f000 f85d 	bl	8009568 <siprintf>
 80094ae:	e7cf      	b.n	8009450 <_scanf_float+0x37c>
 80094b0:	f01c 0f04 	tst.w	ip, #4
 80094b4:	f103 0e04 	add.w	lr, r3, #4
 80094b8:	d003      	beq.n	80094c2 <_scanf_float+0x3ee>
 80094ba:	9903      	ldr	r1, [sp, #12]
 80094bc:	f8c1 e000 	str.w	lr, [r1]
 80094c0:	e7d7      	b.n	8009472 <_scanf_float+0x39e>
 80094c2:	9a03      	ldr	r2, [sp, #12]
 80094c4:	f8c2 e000 	str.w	lr, [r2]
 80094c8:	f8d3 8000 	ldr.w	r8, [r3]
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	f7f7 fab4 	bl	8000a3c <__aeabi_dcmpun>
 80094d4:	b128      	cbz	r0, 80094e2 <_scanf_float+0x40e>
 80094d6:	4807      	ldr	r0, [pc, #28]	; (80094f4 <_scanf_float+0x420>)
 80094d8:	f000 f80e 	bl	80094f8 <nanf>
 80094dc:	f8c8 0000 	str.w	r0, [r8]
 80094e0:	e7ca      	b.n	8009478 <_scanf_float+0x3a4>
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f7 fb07 	bl	8000af8 <__aeabi_d2f>
 80094ea:	e7f7      	b.n	80094dc <_scanf_float+0x408>
 80094ec:	2500      	movs	r5, #0
 80094ee:	e634      	b.n	800915a <_scanf_float+0x86>
 80094f0:	0800d4f0 	.word	0x0800d4f0
 80094f4:	0800d908 	.word	0x0800d908

080094f8 <nanf>:
 80094f8:	4800      	ldr	r0, [pc, #0]	; (80094fc <nanf+0x4>)
 80094fa:	4770      	bx	lr
 80094fc:	7fc00000 	.word	0x7fc00000

08009500 <sniprintf>:
 8009500:	b40c      	push	{r2, r3}
 8009502:	b530      	push	{r4, r5, lr}
 8009504:	4b17      	ldr	r3, [pc, #92]	; (8009564 <sniprintf+0x64>)
 8009506:	1e0c      	subs	r4, r1, #0
 8009508:	681d      	ldr	r5, [r3, #0]
 800950a:	b09d      	sub	sp, #116	; 0x74
 800950c:	da08      	bge.n	8009520 <sniprintf+0x20>
 800950e:	238b      	movs	r3, #139	; 0x8b
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	602b      	str	r3, [r5, #0]
 8009516:	b01d      	add	sp, #116	; 0x74
 8009518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800951c:	b002      	add	sp, #8
 800951e:	4770      	bx	lr
 8009520:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009524:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009528:	bf0c      	ite	eq
 800952a:	4623      	moveq	r3, r4
 800952c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	9307      	str	r3, [sp, #28]
 8009534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009538:	9002      	str	r0, [sp, #8]
 800953a:	9006      	str	r0, [sp, #24]
 800953c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009540:	4628      	mov	r0, r5
 8009542:	ab21      	add	r3, sp, #132	; 0x84
 8009544:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009546:	a902      	add	r1, sp, #8
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	f002 fecb 	bl	800c2e4 <_svfiprintf_r>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	bfbc      	itt	lt
 8009552:	238b      	movlt	r3, #139	; 0x8b
 8009554:	602b      	strlt	r3, [r5, #0]
 8009556:	2c00      	cmp	r4, #0
 8009558:	d0dd      	beq.n	8009516 <sniprintf+0x16>
 800955a:	2200      	movs	r2, #0
 800955c:	9b02      	ldr	r3, [sp, #8]
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	e7d9      	b.n	8009516 <sniprintf+0x16>
 8009562:	bf00      	nop
 8009564:	2000000c 	.word	0x2000000c

08009568 <siprintf>:
 8009568:	b40e      	push	{r1, r2, r3}
 800956a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800956e:	b500      	push	{lr}
 8009570:	b09c      	sub	sp, #112	; 0x70
 8009572:	ab1d      	add	r3, sp, #116	; 0x74
 8009574:	9002      	str	r0, [sp, #8]
 8009576:	9006      	str	r0, [sp, #24]
 8009578:	9107      	str	r1, [sp, #28]
 800957a:	9104      	str	r1, [sp, #16]
 800957c:	4808      	ldr	r0, [pc, #32]	; (80095a0 <siprintf+0x38>)
 800957e:	4909      	ldr	r1, [pc, #36]	; (80095a4 <siprintf+0x3c>)
 8009580:	f853 2b04 	ldr.w	r2, [r3], #4
 8009584:	9105      	str	r1, [sp, #20]
 8009586:	6800      	ldr	r0, [r0, #0]
 8009588:	a902      	add	r1, sp, #8
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	f002 feaa 	bl	800c2e4 <_svfiprintf_r>
 8009590:	2200      	movs	r2, #0
 8009592:	9b02      	ldr	r3, [sp, #8]
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	b01c      	add	sp, #112	; 0x70
 8009598:	f85d eb04 	ldr.w	lr, [sp], #4
 800959c:	b003      	add	sp, #12
 800959e:	4770      	bx	lr
 80095a0:	2000000c 	.word	0x2000000c
 80095a4:	ffff0208 	.word	0xffff0208

080095a8 <strstr>:
 80095a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095aa:	780c      	ldrb	r4, [r1, #0]
 80095ac:	b164      	cbz	r4, 80095c8 <strstr+0x20>
 80095ae:	4603      	mov	r3, r0
 80095b0:	781a      	ldrb	r2, [r3, #0]
 80095b2:	4618      	mov	r0, r3
 80095b4:	1c5e      	adds	r6, r3, #1
 80095b6:	b90a      	cbnz	r2, 80095bc <strstr+0x14>
 80095b8:	4610      	mov	r0, r2
 80095ba:	e005      	b.n	80095c8 <strstr+0x20>
 80095bc:	4294      	cmp	r4, r2
 80095be:	d108      	bne.n	80095d2 <strstr+0x2a>
 80095c0:	460d      	mov	r5, r1
 80095c2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80095c6:	b902      	cbnz	r2, 80095ca <strstr+0x22>
 80095c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80095ce:	4297      	cmp	r7, r2
 80095d0:	d0f7      	beq.n	80095c2 <strstr+0x1a>
 80095d2:	4633      	mov	r3, r6
 80095d4:	e7ec      	b.n	80095b0 <strstr+0x8>

080095d6 <sulp>:
 80095d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095da:	460f      	mov	r7, r1
 80095dc:	4690      	mov	r8, r2
 80095de:	f002 fc29 	bl	800be34 <__ulp>
 80095e2:	4604      	mov	r4, r0
 80095e4:	460d      	mov	r5, r1
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	d011      	beq.n	8009610 <sulp+0x3a>
 80095ec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80095f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dd0b      	ble.n	8009610 <sulp+0x3a>
 80095f8:	2400      	movs	r4, #0
 80095fa:	051b      	lsls	r3, r3, #20
 80095fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009600:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009604:	4622      	mov	r2, r4
 8009606:	462b      	mov	r3, r5
 8009608:	f7f6 ff7e 	bl	8000508 <__aeabi_dmul>
 800960c:	4604      	mov	r4, r0
 800960e:	460d      	mov	r5, r1
 8009610:	4620      	mov	r0, r4
 8009612:	4629      	mov	r1, r5
 8009614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009618 <_strtod_l>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	469b      	mov	fp, r3
 800961e:	2300      	movs	r3, #0
 8009620:	b0a1      	sub	sp, #132	; 0x84
 8009622:	931c      	str	r3, [sp, #112]	; 0x70
 8009624:	4ba1      	ldr	r3, [pc, #644]	; (80098ac <_strtod_l+0x294>)
 8009626:	4682      	mov	sl, r0
 8009628:	681f      	ldr	r7, [r3, #0]
 800962a:	460e      	mov	r6, r1
 800962c:	4638      	mov	r0, r7
 800962e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009630:	f7f6 fda6 	bl	8000180 <strlen>
 8009634:	f04f 0800 	mov.w	r8, #0
 8009638:	4604      	mov	r4, r0
 800963a:	f04f 0900 	mov.w	r9, #0
 800963e:	961b      	str	r6, [sp, #108]	; 0x6c
 8009640:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	2a2b      	cmp	r2, #43	; 0x2b
 8009646:	d04c      	beq.n	80096e2 <_strtod_l+0xca>
 8009648:	d83a      	bhi.n	80096c0 <_strtod_l+0xa8>
 800964a:	2a0d      	cmp	r2, #13
 800964c:	d833      	bhi.n	80096b6 <_strtod_l+0x9e>
 800964e:	2a08      	cmp	r2, #8
 8009650:	d833      	bhi.n	80096ba <_strtod_l+0xa2>
 8009652:	2a00      	cmp	r2, #0
 8009654:	d03d      	beq.n	80096d2 <_strtod_l+0xba>
 8009656:	2300      	movs	r3, #0
 8009658:	930c      	str	r3, [sp, #48]	; 0x30
 800965a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800965c:	782b      	ldrb	r3, [r5, #0]
 800965e:	2b30      	cmp	r3, #48	; 0x30
 8009660:	f040 80af 	bne.w	80097c2 <_strtod_l+0x1aa>
 8009664:	786b      	ldrb	r3, [r5, #1]
 8009666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800966a:	2b58      	cmp	r3, #88	; 0x58
 800966c:	d16c      	bne.n	8009748 <_strtod_l+0x130>
 800966e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009670:	4650      	mov	r0, sl
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	ab1c      	add	r3, sp, #112	; 0x70
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4a8d      	ldr	r2, [pc, #564]	; (80098b0 <_strtod_l+0x298>)
 800967a:	f8cd b008 	str.w	fp, [sp, #8]
 800967e:	ab1d      	add	r3, sp, #116	; 0x74
 8009680:	a91b      	add	r1, sp, #108	; 0x6c
 8009682:	f001 fd2f 	bl	800b0e4 <__gethex>
 8009686:	f010 0607 	ands.w	r6, r0, #7
 800968a:	4604      	mov	r4, r0
 800968c:	d005      	beq.n	800969a <_strtod_l+0x82>
 800968e:	2e06      	cmp	r6, #6
 8009690:	d129      	bne.n	80096e6 <_strtod_l+0xce>
 8009692:	2300      	movs	r3, #0
 8009694:	3501      	adds	r5, #1
 8009696:	951b      	str	r5, [sp, #108]	; 0x6c
 8009698:	930c      	str	r3, [sp, #48]	; 0x30
 800969a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 8596 	bne.w	800a1ce <_strtod_l+0xbb6>
 80096a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096a4:	b1d3      	cbz	r3, 80096dc <_strtod_l+0xc4>
 80096a6:	4642      	mov	r2, r8
 80096a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80096ac:	4610      	mov	r0, r2
 80096ae:	4619      	mov	r1, r3
 80096b0:	b021      	add	sp, #132	; 0x84
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	2a20      	cmp	r2, #32
 80096b8:	d1cd      	bne.n	8009656 <_strtod_l+0x3e>
 80096ba:	3301      	adds	r3, #1
 80096bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80096be:	e7bf      	b.n	8009640 <_strtod_l+0x28>
 80096c0:	2a2d      	cmp	r2, #45	; 0x2d
 80096c2:	d1c8      	bne.n	8009656 <_strtod_l+0x3e>
 80096c4:	2201      	movs	r2, #1
 80096c6:	920c      	str	r2, [sp, #48]	; 0x30
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80096cc:	785b      	ldrb	r3, [r3, #1]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1c3      	bne.n	800965a <_strtod_l+0x42>
 80096d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f040 8577 	bne.w	800a1ca <_strtod_l+0xbb2>
 80096dc:	4642      	mov	r2, r8
 80096de:	464b      	mov	r3, r9
 80096e0:	e7e4      	b.n	80096ac <_strtod_l+0x94>
 80096e2:	2200      	movs	r2, #0
 80096e4:	e7ef      	b.n	80096c6 <_strtod_l+0xae>
 80096e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80096e8:	b13a      	cbz	r2, 80096fa <_strtod_l+0xe2>
 80096ea:	2135      	movs	r1, #53	; 0x35
 80096ec:	a81e      	add	r0, sp, #120	; 0x78
 80096ee:	f002 fca5 	bl	800c03c <__copybits>
 80096f2:	4650      	mov	r0, sl
 80096f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80096f6:	f002 f86d 	bl	800b7d4 <_Bfree>
 80096fa:	3e01      	subs	r6, #1
 80096fc:	2e05      	cmp	r6, #5
 80096fe:	d807      	bhi.n	8009710 <_strtod_l+0xf8>
 8009700:	e8df f006 	tbb	[pc, r6]
 8009704:	1d180b0e 	.word	0x1d180b0e
 8009708:	030e      	.short	0x030e
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	46c8      	mov	r8, r9
 8009710:	0721      	lsls	r1, r4, #28
 8009712:	d5c2      	bpl.n	800969a <_strtod_l+0x82>
 8009714:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009718:	e7bf      	b.n	800969a <_strtod_l+0x82>
 800971a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800971e:	e7f7      	b.n	8009710 <_strtod_l+0xf8>
 8009720:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009722:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800972a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800972e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009732:	e7ed      	b.n	8009710 <_strtod_l+0xf8>
 8009734:	f04f 0800 	mov.w	r8, #0
 8009738:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80098b4 <_strtod_l+0x29c>
 800973c:	e7e8      	b.n	8009710 <_strtod_l+0xf8>
 800973e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009742:	f04f 38ff 	mov.w	r8, #4294967295
 8009746:	e7e3      	b.n	8009710 <_strtod_l+0xf8>
 8009748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	921b      	str	r2, [sp, #108]	; 0x6c
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	2b30      	cmp	r3, #48	; 0x30
 8009752:	d0f9      	beq.n	8009748 <_strtod_l+0x130>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0a0      	beq.n	800969a <_strtod_l+0x82>
 8009758:	2301      	movs	r3, #1
 800975a:	9307      	str	r3, [sp, #28]
 800975c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800975e:	220a      	movs	r2, #10
 8009760:	9308      	str	r3, [sp, #32]
 8009762:	2300      	movs	r3, #0
 8009764:	469b      	mov	fp, r3
 8009766:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800976a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800976c:	7805      	ldrb	r5, [r0, #0]
 800976e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009772:	b2d9      	uxtb	r1, r3
 8009774:	2909      	cmp	r1, #9
 8009776:	d926      	bls.n	80097c6 <_strtod_l+0x1ae>
 8009778:	4622      	mov	r2, r4
 800977a:	4639      	mov	r1, r7
 800977c:	f002 fec8 	bl	800c510 <strncmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	d032      	beq.n	80097ea <_strtod_l+0x1d2>
 8009784:	2000      	movs	r0, #0
 8009786:	462b      	mov	r3, r5
 8009788:	465c      	mov	r4, fp
 800978a:	4602      	mov	r2, r0
 800978c:	9004      	str	r0, [sp, #16]
 800978e:	2b65      	cmp	r3, #101	; 0x65
 8009790:	d001      	beq.n	8009796 <_strtod_l+0x17e>
 8009792:	2b45      	cmp	r3, #69	; 0x45
 8009794:	d113      	bne.n	80097be <_strtod_l+0x1a6>
 8009796:	b91c      	cbnz	r4, 80097a0 <_strtod_l+0x188>
 8009798:	9b07      	ldr	r3, [sp, #28]
 800979a:	4303      	orrs	r3, r0
 800979c:	d099      	beq.n	80096d2 <_strtod_l+0xba>
 800979e:	2400      	movs	r4, #0
 80097a0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80097a2:	1c73      	adds	r3, r6, #1
 80097a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80097a6:	7873      	ldrb	r3, [r6, #1]
 80097a8:	2b2b      	cmp	r3, #43	; 0x2b
 80097aa:	d078      	beq.n	800989e <_strtod_l+0x286>
 80097ac:	2b2d      	cmp	r3, #45	; 0x2d
 80097ae:	d07b      	beq.n	80098a8 <_strtod_l+0x290>
 80097b0:	2700      	movs	r7, #0
 80097b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80097b6:	2909      	cmp	r1, #9
 80097b8:	f240 8082 	bls.w	80098c0 <_strtod_l+0x2a8>
 80097bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80097be:	2500      	movs	r5, #0
 80097c0:	e09e      	b.n	8009900 <_strtod_l+0x2e8>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e7c9      	b.n	800975a <_strtod_l+0x142>
 80097c6:	f1bb 0f08 	cmp.w	fp, #8
 80097ca:	bfd5      	itete	le
 80097cc:	9906      	ldrle	r1, [sp, #24]
 80097ce:	9905      	ldrgt	r1, [sp, #20]
 80097d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80097d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097d8:	f100 0001 	add.w	r0, r0, #1
 80097dc:	bfd4      	ite	le
 80097de:	9306      	strle	r3, [sp, #24]
 80097e0:	9305      	strgt	r3, [sp, #20]
 80097e2:	f10b 0b01 	add.w	fp, fp, #1
 80097e6:	901b      	str	r0, [sp, #108]	; 0x6c
 80097e8:	e7bf      	b.n	800976a <_strtod_l+0x152>
 80097ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097ec:	191a      	adds	r2, r3, r4
 80097ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80097f0:	5d1b      	ldrb	r3, [r3, r4]
 80097f2:	f1bb 0f00 	cmp.w	fp, #0
 80097f6:	d036      	beq.n	8009866 <_strtod_l+0x24e>
 80097f8:	465c      	mov	r4, fp
 80097fa:	9004      	str	r0, [sp, #16]
 80097fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009800:	2a09      	cmp	r2, #9
 8009802:	d912      	bls.n	800982a <_strtod_l+0x212>
 8009804:	2201      	movs	r2, #1
 8009806:	e7c2      	b.n	800978e <_strtod_l+0x176>
 8009808:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800980a:	3001      	adds	r0, #1
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009810:	785b      	ldrb	r3, [r3, #1]
 8009812:	2b30      	cmp	r3, #48	; 0x30
 8009814:	d0f8      	beq.n	8009808 <_strtod_l+0x1f0>
 8009816:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800981a:	2a08      	cmp	r2, #8
 800981c:	f200 84dc 	bhi.w	800a1d8 <_strtod_l+0xbc0>
 8009820:	9004      	str	r0, [sp, #16]
 8009822:	2000      	movs	r0, #0
 8009824:	4604      	mov	r4, r0
 8009826:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009828:	9208      	str	r2, [sp, #32]
 800982a:	3b30      	subs	r3, #48	; 0x30
 800982c:	f100 0201 	add.w	r2, r0, #1
 8009830:	d013      	beq.n	800985a <_strtod_l+0x242>
 8009832:	9904      	ldr	r1, [sp, #16]
 8009834:	1905      	adds	r5, r0, r4
 8009836:	4411      	add	r1, r2
 8009838:	9104      	str	r1, [sp, #16]
 800983a:	4622      	mov	r2, r4
 800983c:	210a      	movs	r1, #10
 800983e:	42aa      	cmp	r2, r5
 8009840:	d113      	bne.n	800986a <_strtod_l+0x252>
 8009842:	1822      	adds	r2, r4, r0
 8009844:	2a08      	cmp	r2, #8
 8009846:	f104 0401 	add.w	r4, r4, #1
 800984a:	4404      	add	r4, r0
 800984c:	dc1b      	bgt.n	8009886 <_strtod_l+0x26e>
 800984e:	220a      	movs	r2, #10
 8009850:	9906      	ldr	r1, [sp, #24]
 8009852:	fb02 3301 	mla	r3, r2, r1, r3
 8009856:	9306      	str	r3, [sp, #24]
 8009858:	2200      	movs	r2, #0
 800985a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800985c:	4610      	mov	r0, r2
 800985e:	1c59      	adds	r1, r3, #1
 8009860:	911b      	str	r1, [sp, #108]	; 0x6c
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	e7ca      	b.n	80097fc <_strtod_l+0x1e4>
 8009866:	4658      	mov	r0, fp
 8009868:	e7d3      	b.n	8009812 <_strtod_l+0x1fa>
 800986a:	2a08      	cmp	r2, #8
 800986c:	dc04      	bgt.n	8009878 <_strtod_l+0x260>
 800986e:	9f06      	ldr	r7, [sp, #24]
 8009870:	434f      	muls	r7, r1
 8009872:	9706      	str	r7, [sp, #24]
 8009874:	3201      	adds	r2, #1
 8009876:	e7e2      	b.n	800983e <_strtod_l+0x226>
 8009878:	1c57      	adds	r7, r2, #1
 800987a:	2f10      	cmp	r7, #16
 800987c:	bfde      	ittt	le
 800987e:	9f05      	ldrle	r7, [sp, #20]
 8009880:	434f      	mulle	r7, r1
 8009882:	9705      	strle	r7, [sp, #20]
 8009884:	e7f6      	b.n	8009874 <_strtod_l+0x25c>
 8009886:	2c10      	cmp	r4, #16
 8009888:	bfdf      	itttt	le
 800988a:	220a      	movle	r2, #10
 800988c:	9905      	ldrle	r1, [sp, #20]
 800988e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009892:	9305      	strle	r3, [sp, #20]
 8009894:	e7e0      	b.n	8009858 <_strtod_l+0x240>
 8009896:	2300      	movs	r3, #0
 8009898:	2201      	movs	r2, #1
 800989a:	9304      	str	r3, [sp, #16]
 800989c:	e77c      	b.n	8009798 <_strtod_l+0x180>
 800989e:	2700      	movs	r7, #0
 80098a0:	1cb3      	adds	r3, r6, #2
 80098a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80098a4:	78b3      	ldrb	r3, [r6, #2]
 80098a6:	e784      	b.n	80097b2 <_strtod_l+0x19a>
 80098a8:	2701      	movs	r7, #1
 80098aa:	e7f9      	b.n	80098a0 <_strtod_l+0x288>
 80098ac:	0800d748 	.word	0x0800d748
 80098b0:	0800d4f8 	.word	0x0800d4f8
 80098b4:	7ff00000 	.word	0x7ff00000
 80098b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098ba:	1c59      	adds	r1, r3, #1
 80098bc:	911b      	str	r1, [sp, #108]	; 0x6c
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b30      	cmp	r3, #48	; 0x30
 80098c2:	d0f9      	beq.n	80098b8 <_strtod_l+0x2a0>
 80098c4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80098c8:	2908      	cmp	r1, #8
 80098ca:	f63f af78 	bhi.w	80097be <_strtod_l+0x1a6>
 80098ce:	f04f 0e0a 	mov.w	lr, #10
 80098d2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80098d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098d8:	9309      	str	r3, [sp, #36]	; 0x24
 80098da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098dc:	1c59      	adds	r1, r3, #1
 80098de:	911b      	str	r1, [sp, #108]	; 0x6c
 80098e0:	785b      	ldrb	r3, [r3, #1]
 80098e2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80098e6:	2d09      	cmp	r5, #9
 80098e8:	d935      	bls.n	8009956 <_strtod_l+0x33e>
 80098ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80098ec:	1b49      	subs	r1, r1, r5
 80098ee:	2908      	cmp	r1, #8
 80098f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80098f4:	dc02      	bgt.n	80098fc <_strtod_l+0x2e4>
 80098f6:	4565      	cmp	r5, ip
 80098f8:	bfa8      	it	ge
 80098fa:	4665      	movge	r5, ip
 80098fc:	b107      	cbz	r7, 8009900 <_strtod_l+0x2e8>
 80098fe:	426d      	negs	r5, r5
 8009900:	2c00      	cmp	r4, #0
 8009902:	d14c      	bne.n	800999e <_strtod_l+0x386>
 8009904:	9907      	ldr	r1, [sp, #28]
 8009906:	4301      	orrs	r1, r0
 8009908:	f47f aec7 	bne.w	800969a <_strtod_l+0x82>
 800990c:	2a00      	cmp	r2, #0
 800990e:	f47f aee0 	bne.w	80096d2 <_strtod_l+0xba>
 8009912:	2b69      	cmp	r3, #105	; 0x69
 8009914:	d026      	beq.n	8009964 <_strtod_l+0x34c>
 8009916:	dc23      	bgt.n	8009960 <_strtod_l+0x348>
 8009918:	2b49      	cmp	r3, #73	; 0x49
 800991a:	d023      	beq.n	8009964 <_strtod_l+0x34c>
 800991c:	2b4e      	cmp	r3, #78	; 0x4e
 800991e:	f47f aed8 	bne.w	80096d2 <_strtod_l+0xba>
 8009922:	499c      	ldr	r1, [pc, #624]	; (8009b94 <_strtod_l+0x57c>)
 8009924:	a81b      	add	r0, sp, #108	; 0x6c
 8009926:	f001 fe2b 	bl	800b580 <__match>
 800992a:	2800      	cmp	r0, #0
 800992c:	f43f aed1 	beq.w	80096d2 <_strtod_l+0xba>
 8009930:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b28      	cmp	r3, #40	; 0x28
 8009936:	d12c      	bne.n	8009992 <_strtod_l+0x37a>
 8009938:	4997      	ldr	r1, [pc, #604]	; (8009b98 <_strtod_l+0x580>)
 800993a:	aa1e      	add	r2, sp, #120	; 0x78
 800993c:	a81b      	add	r0, sp, #108	; 0x6c
 800993e:	f001 fe33 	bl	800b5a8 <__hexnan>
 8009942:	2805      	cmp	r0, #5
 8009944:	d125      	bne.n	8009992 <_strtod_l+0x37a>
 8009946:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009948:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800994c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009950:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009954:	e6a1      	b.n	800969a <_strtod_l+0x82>
 8009956:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800995a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800995e:	e7bc      	b.n	80098da <_strtod_l+0x2c2>
 8009960:	2b6e      	cmp	r3, #110	; 0x6e
 8009962:	e7dc      	b.n	800991e <_strtod_l+0x306>
 8009964:	498d      	ldr	r1, [pc, #564]	; (8009b9c <_strtod_l+0x584>)
 8009966:	a81b      	add	r0, sp, #108	; 0x6c
 8009968:	f001 fe0a 	bl	800b580 <__match>
 800996c:	2800      	cmp	r0, #0
 800996e:	f43f aeb0 	beq.w	80096d2 <_strtod_l+0xba>
 8009972:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009974:	498a      	ldr	r1, [pc, #552]	; (8009ba0 <_strtod_l+0x588>)
 8009976:	3b01      	subs	r3, #1
 8009978:	a81b      	add	r0, sp, #108	; 0x6c
 800997a:	931b      	str	r3, [sp, #108]	; 0x6c
 800997c:	f001 fe00 	bl	800b580 <__match>
 8009980:	b910      	cbnz	r0, 8009988 <_strtod_l+0x370>
 8009982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009984:	3301      	adds	r3, #1
 8009986:	931b      	str	r3, [sp, #108]	; 0x6c
 8009988:	f04f 0800 	mov.w	r8, #0
 800998c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009bb0 <_strtod_l+0x598>
 8009990:	e683      	b.n	800969a <_strtod_l+0x82>
 8009992:	4884      	ldr	r0, [pc, #528]	; (8009ba4 <_strtod_l+0x58c>)
 8009994:	f002 fda6 	bl	800c4e4 <nan>
 8009998:	4680      	mov	r8, r0
 800999a:	4689      	mov	r9, r1
 800999c:	e67d      	b.n	800969a <_strtod_l+0x82>
 800999e:	9b04      	ldr	r3, [sp, #16]
 80099a0:	f1bb 0f00 	cmp.w	fp, #0
 80099a4:	bf08      	it	eq
 80099a6:	46a3      	moveq	fp, r4
 80099a8:	1aeb      	subs	r3, r5, r3
 80099aa:	2c10      	cmp	r4, #16
 80099ac:	9806      	ldr	r0, [sp, #24]
 80099ae:	4626      	mov	r6, r4
 80099b0:	9307      	str	r3, [sp, #28]
 80099b2:	bfa8      	it	ge
 80099b4:	2610      	movge	r6, #16
 80099b6:	f7f6 fd2d 	bl	8000414 <__aeabi_ui2d>
 80099ba:	2c09      	cmp	r4, #9
 80099bc:	4680      	mov	r8, r0
 80099be:	4689      	mov	r9, r1
 80099c0:	dd13      	ble.n	80099ea <_strtod_l+0x3d2>
 80099c2:	4b79      	ldr	r3, [pc, #484]	; (8009ba8 <_strtod_l+0x590>)
 80099c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80099cc:	f7f6 fd9c 	bl	8000508 <__aeabi_dmul>
 80099d0:	4680      	mov	r8, r0
 80099d2:	9805      	ldr	r0, [sp, #20]
 80099d4:	4689      	mov	r9, r1
 80099d6:	f7f6 fd1d 	bl	8000414 <__aeabi_ui2d>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4640      	mov	r0, r8
 80099e0:	4649      	mov	r1, r9
 80099e2:	f7f6 fbdb 	bl	800019c <__adddf3>
 80099e6:	4680      	mov	r8, r0
 80099e8:	4689      	mov	r9, r1
 80099ea:	2c0f      	cmp	r4, #15
 80099ec:	dc36      	bgt.n	8009a5c <_strtod_l+0x444>
 80099ee:	9b07      	ldr	r3, [sp, #28]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f43f ae52 	beq.w	800969a <_strtod_l+0x82>
 80099f6:	dd22      	ble.n	8009a3e <_strtod_l+0x426>
 80099f8:	2b16      	cmp	r3, #22
 80099fa:	dc09      	bgt.n	8009a10 <_strtod_l+0x3f8>
 80099fc:	4c6a      	ldr	r4, [pc, #424]	; (8009ba8 <_strtod_l+0x590>)
 80099fe:	4642      	mov	r2, r8
 8009a00:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009a04:	464b      	mov	r3, r9
 8009a06:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009a0a:	f7f6 fd7d 	bl	8000508 <__aeabi_dmul>
 8009a0e:	e7c3      	b.n	8009998 <_strtod_l+0x380>
 8009a10:	9a07      	ldr	r2, [sp, #28]
 8009a12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009a16:	4293      	cmp	r3, r2
 8009a18:	db20      	blt.n	8009a5c <_strtod_l+0x444>
 8009a1a:	4d63      	ldr	r5, [pc, #396]	; (8009ba8 <_strtod_l+0x590>)
 8009a1c:	f1c4 040f 	rsb	r4, r4, #15
 8009a20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009a24:	4642      	mov	r2, r8
 8009a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	f7f6 fd6c 	bl	8000508 <__aeabi_dmul>
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	1b1c      	subs	r4, r3, r4
 8009a34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009a38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a3c:	e7e5      	b.n	8009a0a <_strtod_l+0x3f2>
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	3316      	adds	r3, #22
 8009a42:	db0b      	blt.n	8009a5c <_strtod_l+0x444>
 8009a44:	9b04      	ldr	r3, [sp, #16]
 8009a46:	4a58      	ldr	r2, [pc, #352]	; (8009ba8 <_strtod_l+0x590>)
 8009a48:	1b5d      	subs	r5, r3, r5
 8009a4a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009a4e:	4640      	mov	r0, r8
 8009a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fe81 	bl	800075c <__aeabi_ddiv>
 8009a5a:	e79d      	b.n	8009998 <_strtod_l+0x380>
 8009a5c:	9b07      	ldr	r3, [sp, #28]
 8009a5e:	1ba6      	subs	r6, r4, r6
 8009a60:	441e      	add	r6, r3
 8009a62:	2e00      	cmp	r6, #0
 8009a64:	dd71      	ble.n	8009b4a <_strtod_l+0x532>
 8009a66:	f016 030f 	ands.w	r3, r6, #15
 8009a6a:	d00a      	beq.n	8009a82 <_strtod_l+0x46a>
 8009a6c:	494e      	ldr	r1, [pc, #312]	; (8009ba8 <_strtod_l+0x590>)
 8009a6e:	4642      	mov	r2, r8
 8009a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a78:	464b      	mov	r3, r9
 8009a7a:	f7f6 fd45 	bl	8000508 <__aeabi_dmul>
 8009a7e:	4680      	mov	r8, r0
 8009a80:	4689      	mov	r9, r1
 8009a82:	f036 060f 	bics.w	r6, r6, #15
 8009a86:	d050      	beq.n	8009b2a <_strtod_l+0x512>
 8009a88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009a8c:	dd27      	ble.n	8009ade <_strtod_l+0x4c6>
 8009a8e:	f04f 0b00 	mov.w	fp, #0
 8009a92:	f8cd b010 	str.w	fp, [sp, #16]
 8009a96:	f8cd b020 	str.w	fp, [sp, #32]
 8009a9a:	f8cd b018 	str.w	fp, [sp, #24]
 8009a9e:	2322      	movs	r3, #34	; 0x22
 8009aa0:	f04f 0800 	mov.w	r8, #0
 8009aa4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009bb0 <_strtod_l+0x598>
 8009aa8:	f8ca 3000 	str.w	r3, [sl]
 8009aac:	9b08      	ldr	r3, [sp, #32]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f43f adf3 	beq.w	800969a <_strtod_l+0x82>
 8009ab4:	4650      	mov	r0, sl
 8009ab6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ab8:	f001 fe8c 	bl	800b7d4 <_Bfree>
 8009abc:	4650      	mov	r0, sl
 8009abe:	9906      	ldr	r1, [sp, #24]
 8009ac0:	f001 fe88 	bl	800b7d4 <_Bfree>
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	9904      	ldr	r1, [sp, #16]
 8009ac8:	f001 fe84 	bl	800b7d4 <_Bfree>
 8009acc:	4650      	mov	r0, sl
 8009ace:	9908      	ldr	r1, [sp, #32]
 8009ad0:	f001 fe80 	bl	800b7d4 <_Bfree>
 8009ad4:	4659      	mov	r1, fp
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	f001 fe7c 	bl	800b7d4 <_Bfree>
 8009adc:	e5dd      	b.n	800969a <_strtod_l+0x82>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	461f      	mov	r7, r3
 8009ae6:	1136      	asrs	r6, r6, #4
 8009ae8:	2e01      	cmp	r6, #1
 8009aea:	dc21      	bgt.n	8009b30 <_strtod_l+0x518>
 8009aec:	b10b      	cbz	r3, 8009af2 <_strtod_l+0x4da>
 8009aee:	4680      	mov	r8, r0
 8009af0:	4689      	mov	r9, r1
 8009af2:	4b2e      	ldr	r3, [pc, #184]	; (8009bac <_strtod_l+0x594>)
 8009af4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009af8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009afc:	4642      	mov	r2, r8
 8009afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b02:	464b      	mov	r3, r9
 8009b04:	f7f6 fd00 	bl	8000508 <__aeabi_dmul>
 8009b08:	4b29      	ldr	r3, [pc, #164]	; (8009bb0 <_strtod_l+0x598>)
 8009b0a:	460a      	mov	r2, r1
 8009b0c:	400b      	ands	r3, r1
 8009b0e:	4929      	ldr	r1, [pc, #164]	; (8009bb4 <_strtod_l+0x59c>)
 8009b10:	4680      	mov	r8, r0
 8009b12:	428b      	cmp	r3, r1
 8009b14:	d8bb      	bhi.n	8009a8e <_strtod_l+0x476>
 8009b16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b1a:	428b      	cmp	r3, r1
 8009b1c:	bf86      	itte	hi
 8009b1e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009b22:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009bb8 <_strtod_l+0x5a0>
 8009b26:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	e07e      	b.n	8009c2e <_strtod_l+0x616>
 8009b30:	07f2      	lsls	r2, r6, #31
 8009b32:	d507      	bpl.n	8009b44 <_strtod_l+0x52c>
 8009b34:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <_strtod_l+0x594>)
 8009b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fce3 	bl	8000508 <__aeabi_dmul>
 8009b42:	2301      	movs	r3, #1
 8009b44:	3701      	adds	r7, #1
 8009b46:	1076      	asrs	r6, r6, #1
 8009b48:	e7ce      	b.n	8009ae8 <_strtod_l+0x4d0>
 8009b4a:	d0ee      	beq.n	8009b2a <_strtod_l+0x512>
 8009b4c:	4276      	negs	r6, r6
 8009b4e:	f016 020f 	ands.w	r2, r6, #15
 8009b52:	d00a      	beq.n	8009b6a <_strtod_l+0x552>
 8009b54:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <_strtod_l+0x590>)
 8009b56:	4640      	mov	r0, r8
 8009b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fdfb 	bl	800075c <__aeabi_ddiv>
 8009b66:	4680      	mov	r8, r0
 8009b68:	4689      	mov	r9, r1
 8009b6a:	1136      	asrs	r6, r6, #4
 8009b6c:	d0dd      	beq.n	8009b2a <_strtod_l+0x512>
 8009b6e:	2e1f      	cmp	r6, #31
 8009b70:	dd24      	ble.n	8009bbc <_strtod_l+0x5a4>
 8009b72:	f04f 0b00 	mov.w	fp, #0
 8009b76:	f8cd b010 	str.w	fp, [sp, #16]
 8009b7a:	f8cd b020 	str.w	fp, [sp, #32]
 8009b7e:	f8cd b018 	str.w	fp, [sp, #24]
 8009b82:	2322      	movs	r3, #34	; 0x22
 8009b84:	f04f 0800 	mov.w	r8, #0
 8009b88:	f04f 0900 	mov.w	r9, #0
 8009b8c:	f8ca 3000 	str.w	r3, [sl]
 8009b90:	e78c      	b.n	8009aac <_strtod_l+0x494>
 8009b92:	bf00      	nop
 8009b94:	0800d4c9 	.word	0x0800d4c9
 8009b98:	0800d50c 	.word	0x0800d50c
 8009b9c:	0800d4c1 	.word	0x0800d4c1
 8009ba0:	0800d64c 	.word	0x0800d64c
 8009ba4:	0800d908 	.word	0x0800d908
 8009ba8:	0800d7e8 	.word	0x0800d7e8
 8009bac:	0800d7c0 	.word	0x0800d7c0
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	7ca00000 	.word	0x7ca00000
 8009bb8:	7fefffff 	.word	0x7fefffff
 8009bbc:	f016 0310 	ands.w	r3, r6, #16
 8009bc0:	bf18      	it	ne
 8009bc2:	236a      	movne	r3, #106	; 0x6a
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	9305      	str	r3, [sp, #20]
 8009bc8:	4649      	mov	r1, r9
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4fb2      	ldr	r7, [pc, #712]	; (8009e98 <_strtod_l+0x880>)
 8009bce:	07f2      	lsls	r2, r6, #31
 8009bd0:	d504      	bpl.n	8009bdc <_strtod_l+0x5c4>
 8009bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd6:	f7f6 fc97 	bl	8000508 <__aeabi_dmul>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	1076      	asrs	r6, r6, #1
 8009bde:	f107 0708 	add.w	r7, r7, #8
 8009be2:	d1f4      	bne.n	8009bce <_strtod_l+0x5b6>
 8009be4:	b10b      	cbz	r3, 8009bea <_strtod_l+0x5d2>
 8009be6:	4680      	mov	r8, r0
 8009be8:	4689      	mov	r9, r1
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	b1bb      	cbz	r3, 8009c1e <_strtod_l+0x606>
 8009bee:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009bf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	dd10      	ble.n	8009c1e <_strtod_l+0x606>
 8009bfc:	2b1f      	cmp	r3, #31
 8009bfe:	f340 812b 	ble.w	8009e58 <_strtod_l+0x840>
 8009c02:	2b34      	cmp	r3, #52	; 0x34
 8009c04:	bfd8      	it	le
 8009c06:	f04f 32ff 	movle.w	r2, #4294967295
 8009c0a:	f04f 0800 	mov.w	r8, #0
 8009c0e:	bfcf      	iteee	gt
 8009c10:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009c14:	3b20      	suble	r3, #32
 8009c16:	fa02 f303 	lslle.w	r3, r2, r3
 8009c1a:	ea03 0901 	andle.w	r9, r3, r1
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2300      	movs	r3, #0
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 fed7 	bl	80009d8 <__aeabi_dcmpeq>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1a1      	bne.n	8009b72 <_strtod_l+0x55a>
 8009c2e:	9b06      	ldr	r3, [sp, #24]
 8009c30:	465a      	mov	r2, fp
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	4650      	mov	r0, sl
 8009c36:	4623      	mov	r3, r4
 8009c38:	9908      	ldr	r1, [sp, #32]
 8009c3a:	f001 fe37 	bl	800b8ac <__s2b>
 8009c3e:	9008      	str	r0, [sp, #32]
 8009c40:	2800      	cmp	r0, #0
 8009c42:	f43f af24 	beq.w	8009a8e <_strtod_l+0x476>
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	f04f 0b00 	mov.w	fp, #0
 8009c4c:	1b5d      	subs	r5, r3, r5
 8009c4e:	9b07      	ldr	r3, [sp, #28]
 8009c50:	f8cd b010 	str.w	fp, [sp, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	bfb4      	ite	lt
 8009c58:	462b      	movlt	r3, r5
 8009c5a:	2300      	movge	r3, #0
 8009c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c5e:	9b07      	ldr	r3, [sp, #28]
 8009c60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c64:	9316      	str	r3, [sp, #88]	; 0x58
 8009c66:	9b08      	ldr	r3, [sp, #32]
 8009c68:	4650      	mov	r0, sl
 8009c6a:	6859      	ldr	r1, [r3, #4]
 8009c6c:	f001 fd72 	bl	800b754 <_Balloc>
 8009c70:	9006      	str	r0, [sp, #24]
 8009c72:	2800      	cmp	r0, #0
 8009c74:	f43f af13 	beq.w	8009a9e <_strtod_l+0x486>
 8009c78:	9b08      	ldr	r3, [sp, #32]
 8009c7a:	300c      	adds	r0, #12
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	f103 010c 	add.w	r1, r3, #12
 8009c82:	3202      	adds	r2, #2
 8009c84:	0092      	lsls	r2, r2, #2
 8009c86:	f001 fd57 	bl	800b738 <memcpy>
 8009c8a:	ab1e      	add	r3, sp, #120	; 0x78
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	4642      	mov	r2, r8
 8009c94:	464b      	mov	r3, r9
 8009c96:	4650      	mov	r0, sl
 8009c98:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009c9c:	f002 f944 	bl	800bf28 <__d2b>
 8009ca0:	901c      	str	r0, [sp, #112]	; 0x70
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f43f aefb 	beq.w	8009a9e <_strtod_l+0x486>
 8009ca8:	2101      	movs	r1, #1
 8009caa:	4650      	mov	r0, sl
 8009cac:	f001 fe96 	bl	800b9dc <__i2b>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	9004      	str	r0, [sp, #16]
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f43f aef2 	beq.w	8009a9e <_strtod_l+0x486>
 8009cba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009cbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	bfab      	itete	ge
 8009cc2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009cc4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009cc6:	18ee      	addge	r6, r5, r3
 8009cc8:	1b5c      	sublt	r4, r3, r5
 8009cca:	9b05      	ldr	r3, [sp, #20]
 8009ccc:	bfa8      	it	ge
 8009cce:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009cd0:	eba5 0503 	sub.w	r5, r5, r3
 8009cd4:	4415      	add	r5, r2
 8009cd6:	4b71      	ldr	r3, [pc, #452]	; (8009e9c <_strtod_l+0x884>)
 8009cd8:	f105 35ff 	add.w	r5, r5, #4294967295
 8009cdc:	bfb8      	it	lt
 8009cde:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009ce0:	429d      	cmp	r5, r3
 8009ce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ce6:	f280 80c9 	bge.w	8009e7c <_strtod_l+0x864>
 8009cea:	1b5b      	subs	r3, r3, r5
 8009cec:	2b1f      	cmp	r3, #31
 8009cee:	f04f 0701 	mov.w	r7, #1
 8009cf2:	eba2 0203 	sub.w	r2, r2, r3
 8009cf6:	f300 80b6 	bgt.w	8009e66 <_strtod_l+0x84e>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	fa07 f303 	lsl.w	r3, r7, r3
 8009d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d02:	18b7      	adds	r7, r6, r2
 8009d04:	9b05      	ldr	r3, [sp, #20]
 8009d06:	42be      	cmp	r6, r7
 8009d08:	4414      	add	r4, r2
 8009d0a:	441c      	add	r4, r3
 8009d0c:	4633      	mov	r3, r6
 8009d0e:	bfa8      	it	ge
 8009d10:	463b      	movge	r3, r7
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	bfa8      	it	ge
 8009d16:	4623      	movge	r3, r4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfc2      	ittt	gt
 8009d1c:	1aff      	subgt	r7, r7, r3
 8009d1e:	1ae4      	subgt	r4, r4, r3
 8009d20:	1af6      	subgt	r6, r6, r3
 8009d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dd17      	ble.n	8009d58 <_strtod_l+0x740>
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	9904      	ldr	r1, [sp, #16]
 8009d2e:	f001 ff0f 	bl	800bb50 <__pow5mult>
 8009d32:	9004      	str	r0, [sp, #16]
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f43f aeb2 	beq.w	8009a9e <_strtod_l+0x486>
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d3e:	4650      	mov	r0, sl
 8009d40:	f001 fe62 	bl	800ba08 <__multiply>
 8009d44:	9009      	str	r0, [sp, #36]	; 0x24
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f43f aea9 	beq.w	8009a9e <_strtod_l+0x486>
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d50:	f001 fd40 	bl	800b7d4 <_Bfree>
 8009d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d56:	931c      	str	r3, [sp, #112]	; 0x70
 8009d58:	2f00      	cmp	r7, #0
 8009d5a:	f300 8093 	bgt.w	8009e84 <_strtod_l+0x86c>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	dd08      	ble.n	8009d76 <_strtod_l+0x75e>
 8009d64:	4650      	mov	r0, sl
 8009d66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d68:	9906      	ldr	r1, [sp, #24]
 8009d6a:	f001 fef1 	bl	800bb50 <__pow5mult>
 8009d6e:	9006      	str	r0, [sp, #24]
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f43f ae94 	beq.w	8009a9e <_strtod_l+0x486>
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	dd08      	ble.n	8009d8c <_strtod_l+0x774>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	4650      	mov	r0, sl
 8009d7e:	9906      	ldr	r1, [sp, #24]
 8009d80:	f001 ff40 	bl	800bc04 <__lshift>
 8009d84:	9006      	str	r0, [sp, #24]
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f43f ae89 	beq.w	8009a9e <_strtod_l+0x486>
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	dd08      	ble.n	8009da2 <_strtod_l+0x78a>
 8009d90:	4632      	mov	r2, r6
 8009d92:	4650      	mov	r0, sl
 8009d94:	9904      	ldr	r1, [sp, #16]
 8009d96:	f001 ff35 	bl	800bc04 <__lshift>
 8009d9a:	9004      	str	r0, [sp, #16]
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f43f ae7e 	beq.w	8009a9e <_strtod_l+0x486>
 8009da2:	4650      	mov	r0, sl
 8009da4:	9a06      	ldr	r2, [sp, #24]
 8009da6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009da8:	f001 ffb4 	bl	800bd14 <__mdiff>
 8009dac:	4683      	mov	fp, r0
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f43f ae75 	beq.w	8009a9e <_strtod_l+0x486>
 8009db4:	2400      	movs	r4, #0
 8009db6:	68c3      	ldr	r3, [r0, #12]
 8009db8:	9904      	ldr	r1, [sp, #16]
 8009dba:	60c4      	str	r4, [r0, #12]
 8009dbc:	930d      	str	r3, [sp, #52]	; 0x34
 8009dbe:	f001 ff8d 	bl	800bcdc <__mcmp>
 8009dc2:	42a0      	cmp	r0, r4
 8009dc4:	da70      	bge.n	8009ea8 <_strtod_l+0x890>
 8009dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dc8:	ea53 0308 	orrs.w	r3, r3, r8
 8009dcc:	f040 8096 	bne.w	8009efc <_strtod_l+0x8e4>
 8009dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 8091 	bne.w	8009efc <_strtod_l+0x8e4>
 8009dda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dde:	0d1b      	lsrs	r3, r3, #20
 8009de0:	051b      	lsls	r3, r3, #20
 8009de2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009de6:	f240 8089 	bls.w	8009efc <_strtod_l+0x8e4>
 8009dea:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009dee:	b923      	cbnz	r3, 8009dfa <_strtod_l+0x7e2>
 8009df0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	f340 8081 	ble.w	8009efc <_strtod_l+0x8e4>
 8009dfa:	4659      	mov	r1, fp
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f001 ff00 	bl	800bc04 <__lshift>
 8009e04:	9904      	ldr	r1, [sp, #16]
 8009e06:	4683      	mov	fp, r0
 8009e08:	f001 ff68 	bl	800bcdc <__mcmp>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	dd75      	ble.n	8009efc <_strtod_l+0x8e4>
 8009e10:	9905      	ldr	r1, [sp, #20]
 8009e12:	464b      	mov	r3, r9
 8009e14:	4a22      	ldr	r2, [pc, #136]	; (8009ea0 <_strtod_l+0x888>)
 8009e16:	2900      	cmp	r1, #0
 8009e18:	f000 8091 	beq.w	8009f3e <_strtod_l+0x926>
 8009e1c:	ea02 0109 	and.w	r1, r2, r9
 8009e20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e24:	f300 808b 	bgt.w	8009f3e <_strtod_l+0x926>
 8009e28:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e2c:	f77f aea9 	ble.w	8009b82 <_strtod_l+0x56a>
 8009e30:	2300      	movs	r3, #0
 8009e32:	4a1c      	ldr	r2, [pc, #112]	; (8009ea4 <_strtod_l+0x88c>)
 8009e34:	4640      	mov	r0, r8
 8009e36:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e40:	f7f6 fb62 	bl	8000508 <__aeabi_dmul>
 8009e44:	460b      	mov	r3, r1
 8009e46:	4303      	orrs	r3, r0
 8009e48:	bf08      	it	eq
 8009e4a:	2322      	moveq	r3, #34	; 0x22
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	4689      	mov	r9, r1
 8009e50:	bf08      	it	eq
 8009e52:	f8ca 3000 	streq.w	r3, [sl]
 8009e56:	e62d      	b.n	8009ab4 <_strtod_l+0x49c>
 8009e58:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e60:	ea03 0808 	and.w	r8, r3, r8
 8009e64:	e6db      	b.n	8009c1e <_strtod_l+0x606>
 8009e66:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009e6a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009e6e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009e72:	35e2      	adds	r5, #226	; 0xe2
 8009e74:	fa07 f505 	lsl.w	r5, r7, r5
 8009e78:	970f      	str	r7, [sp, #60]	; 0x3c
 8009e7a:	e742      	b.n	8009d02 <_strtod_l+0x6ea>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	2500      	movs	r5, #0
 8009e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e82:	e73e      	b.n	8009d02 <_strtod_l+0x6ea>
 8009e84:	463a      	mov	r2, r7
 8009e86:	4650      	mov	r0, sl
 8009e88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e8a:	f001 febb 	bl	800bc04 <__lshift>
 8009e8e:	901c      	str	r0, [sp, #112]	; 0x70
 8009e90:	2800      	cmp	r0, #0
 8009e92:	f47f af64 	bne.w	8009d5e <_strtod_l+0x746>
 8009e96:	e602      	b.n	8009a9e <_strtod_l+0x486>
 8009e98:	0800d520 	.word	0x0800d520
 8009e9c:	fffffc02 	.word	0xfffffc02
 8009ea0:	7ff00000 	.word	0x7ff00000
 8009ea4:	39500000 	.word	0x39500000
 8009ea8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009eac:	d166      	bne.n	8009f7c <_strtod_l+0x964>
 8009eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb4:	b35a      	cbz	r2, 8009f0e <_strtod_l+0x8f6>
 8009eb6:	4a9c      	ldr	r2, [pc, #624]	; (800a128 <_strtod_l+0xb10>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d12c      	bne.n	8009f16 <_strtod_l+0x8fe>
 8009ebc:	9b05      	ldr	r3, [sp, #20]
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	b303      	cbz	r3, 8009f04 <_strtod_l+0x8ec>
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	4a99      	ldr	r2, [pc, #612]	; (800a12c <_strtod_l+0xb14>)
 8009ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8009eca:	401a      	ands	r2, r3
 8009ecc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009ed0:	d81b      	bhi.n	8009f0a <_strtod_l+0x8f2>
 8009ed2:	0d12      	lsrs	r2, r2, #20
 8009ed4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8009edc:	4298      	cmp	r0, r3
 8009ede:	d11a      	bne.n	8009f16 <_strtod_l+0x8fe>
 8009ee0:	4b93      	ldr	r3, [pc, #588]	; (800a130 <_strtod_l+0xb18>)
 8009ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d102      	bne.n	8009eee <_strtod_l+0x8d6>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f add8 	beq.w	8009a9e <_strtod_l+0x486>
 8009eee:	f04f 0800 	mov.w	r8, #0
 8009ef2:	4b8e      	ldr	r3, [pc, #568]	; (800a12c <_strtod_l+0xb14>)
 8009ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef6:	401a      	ands	r2, r3
 8009ef8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009efc:	9b05      	ldr	r3, [sp, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d196      	bne.n	8009e30 <_strtod_l+0x818>
 8009f02:	e5d7      	b.n	8009ab4 <_strtod_l+0x49c>
 8009f04:	f04f 33ff 	mov.w	r3, #4294967295
 8009f08:	e7e8      	b.n	8009edc <_strtod_l+0x8c4>
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	e7e6      	b.n	8009edc <_strtod_l+0x8c4>
 8009f0e:	ea53 0308 	orrs.w	r3, r3, r8
 8009f12:	f43f af7d 	beq.w	8009e10 <_strtod_l+0x7f8>
 8009f16:	b1e5      	cbz	r5, 8009f52 <_strtod_l+0x93a>
 8009f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1a:	421d      	tst	r5, r3
 8009f1c:	d0ee      	beq.n	8009efc <_strtod_l+0x8e4>
 8009f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f20:	4640      	mov	r0, r8
 8009f22:	4649      	mov	r1, r9
 8009f24:	9a05      	ldr	r2, [sp, #20]
 8009f26:	b1c3      	cbz	r3, 8009f5a <_strtod_l+0x942>
 8009f28:	f7ff fb55 	bl	80095d6 <sulp>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f34:	f7f6 f932 	bl	800019c <__adddf3>
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4689      	mov	r9, r1
 8009f3c:	e7de      	b.n	8009efc <_strtod_l+0x8e4>
 8009f3e:	4013      	ands	r3, r2
 8009f40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f44:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f48:	f04f 38ff 	mov.w	r8, #4294967295
 8009f4c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009f50:	e7d4      	b.n	8009efc <_strtod_l+0x8e4>
 8009f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f54:	ea13 0f08 	tst.w	r3, r8
 8009f58:	e7e0      	b.n	8009f1c <_strtod_l+0x904>
 8009f5a:	f7ff fb3c 	bl	80095d6 <sulp>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f66:	f7f6 f917 	bl	8000198 <__aeabi_dsub>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4680      	mov	r8, r0
 8009f70:	4689      	mov	r9, r1
 8009f72:	f7f6 fd31 	bl	80009d8 <__aeabi_dcmpeq>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0c0      	beq.n	8009efc <_strtod_l+0x8e4>
 8009f7a:	e602      	b.n	8009b82 <_strtod_l+0x56a>
 8009f7c:	4658      	mov	r0, fp
 8009f7e:	9904      	ldr	r1, [sp, #16]
 8009f80:	f002 f82e 	bl	800bfe0 <__ratio>
 8009f84:	2200      	movs	r2, #0
 8009f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460f      	mov	r7, r1
 8009f8e:	f7f6 fd37 	bl	8000a00 <__aeabi_dcmple>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d075      	beq.n	800a082 <_strtod_l+0xa6a>
 8009f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d047      	beq.n	800a02c <_strtod_l+0xa14>
 8009f9c:	2600      	movs	r6, #0
 8009f9e:	4f65      	ldr	r7, [pc, #404]	; (800a134 <_strtod_l+0xb1c>)
 8009fa0:	4d64      	ldr	r5, [pc, #400]	; (800a134 <_strtod_l+0xb1c>)
 8009fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fa8:	0d1b      	lsrs	r3, r3, #20
 8009faa:	051b      	lsls	r3, r3, #20
 8009fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fb0:	4b61      	ldr	r3, [pc, #388]	; (800a138 <_strtod_l+0xb20>)
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	f040 80c8 	bne.w	800a148 <_strtod_l+0xb30>
 8009fb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fbc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009fc8:	4649      	mov	r1, r9
 8009fca:	f001 ff33 	bl	800be34 <__ulp>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 fa97 	bl	8000508 <__aeabi_dmul>
 8009fda:	4642      	mov	r2, r8
 8009fdc:	464b      	mov	r3, r9
 8009fde:	f7f6 f8dd 	bl	800019c <__adddf3>
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4951      	ldr	r1, [pc, #324]	; (800a12c <_strtod_l+0xb14>)
 8009fe6:	4a55      	ldr	r2, [pc, #340]	; (800a13c <_strtod_l+0xb24>)
 8009fe8:	4019      	ands	r1, r3
 8009fea:	4291      	cmp	r1, r2
 8009fec:	4680      	mov	r8, r0
 8009fee:	d95e      	bls.n	800a0ae <_strtod_l+0xa96>
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d103      	bne.n	800a002 <_strtod_l+0x9ea>
 8009ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f43f ad4e 	beq.w	8009a9e <_strtod_l+0x486>
 800a002:	f04f 38ff 	mov.w	r8, #4294967295
 800a006:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a130 <_strtod_l+0xb18>
 800a00a:	4650      	mov	r0, sl
 800a00c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a00e:	f001 fbe1 	bl	800b7d4 <_Bfree>
 800a012:	4650      	mov	r0, sl
 800a014:	9906      	ldr	r1, [sp, #24]
 800a016:	f001 fbdd 	bl	800b7d4 <_Bfree>
 800a01a:	4650      	mov	r0, sl
 800a01c:	9904      	ldr	r1, [sp, #16]
 800a01e:	f001 fbd9 	bl	800b7d4 <_Bfree>
 800a022:	4659      	mov	r1, fp
 800a024:	4650      	mov	r0, sl
 800a026:	f001 fbd5 	bl	800b7d4 <_Bfree>
 800a02a:	e61c      	b.n	8009c66 <_strtod_l+0x64e>
 800a02c:	f1b8 0f00 	cmp.w	r8, #0
 800a030:	d119      	bne.n	800a066 <_strtod_l+0xa4e>
 800a032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a038:	b9e3      	cbnz	r3, 800a074 <_strtod_l+0xa5c>
 800a03a:	2200      	movs	r2, #0
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	4b3c      	ldr	r3, [pc, #240]	; (800a134 <_strtod_l+0xb1c>)
 800a042:	f7f6 fcd3 	bl	80009ec <__aeabi_dcmplt>
 800a046:	b9c8      	cbnz	r0, 800a07c <_strtod_l+0xa64>
 800a048:	2200      	movs	r2, #0
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	4b3c      	ldr	r3, [pc, #240]	; (800a140 <_strtod_l+0xb28>)
 800a050:	f7f6 fa5a 	bl	8000508 <__aeabi_dmul>
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a05c:	9418      	str	r4, [sp, #96]	; 0x60
 800a05e:	9319      	str	r3, [sp, #100]	; 0x64
 800a060:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a064:	e79d      	b.n	8009fa2 <_strtod_l+0x98a>
 800a066:	f1b8 0f01 	cmp.w	r8, #1
 800a06a:	d103      	bne.n	800a074 <_strtod_l+0xa5c>
 800a06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f43f ad87 	beq.w	8009b82 <_strtod_l+0x56a>
 800a074:	2600      	movs	r6, #0
 800a076:	2400      	movs	r4, #0
 800a078:	4f32      	ldr	r7, [pc, #200]	; (800a144 <_strtod_l+0xb2c>)
 800a07a:	e791      	b.n	8009fa0 <_strtod_l+0x988>
 800a07c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a07e:	4d30      	ldr	r5, [pc, #192]	; (800a140 <_strtod_l+0xb28>)
 800a080:	e7ea      	b.n	800a058 <_strtod_l+0xa40>
 800a082:	4b2f      	ldr	r3, [pc, #188]	; (800a140 <_strtod_l+0xb28>)
 800a084:	2200      	movs	r2, #0
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 fa3d 	bl	8000508 <__aeabi_dmul>
 800a08e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	b933      	cbnz	r3, 800a0a4 <_strtod_l+0xa8c>
 800a096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a09a:	9010      	str	r0, [sp, #64]	; 0x40
 800a09c:	9311      	str	r3, [sp, #68]	; 0x44
 800a09e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a0a2:	e77e      	b.n	8009fa2 <_strtod_l+0x98a>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a0ac:	e7f7      	b.n	800a09e <_strtod_l+0xa86>
 800a0ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a0b2:	9b05      	ldr	r3, [sp, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1a8      	bne.n	800a00a <_strtod_l+0x9f2>
 800a0b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0be:	0d1b      	lsrs	r3, r3, #20
 800a0c0:	051b      	lsls	r3, r3, #20
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d1a1      	bne.n	800a00a <_strtod_l+0x9f2>
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	f7f7 f877 	bl	80011bc <__aeabi_d2lz>
 800a0ce:	f7f6 f9ed 	bl	80004ac <__aeabi_l2d>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 f85d 	bl	8000198 <__aeabi_dsub>
 800a0de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0e4:	ea43 0308 	orr.w	r3, r3, r8
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	d066      	beq.n	800a1be <_strtod_l+0xba6>
 800a0f0:	a309      	add	r3, pc, #36	; (adr r3, 800a118 <_strtod_l+0xb00>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fc79 	bl	80009ec <__aeabi_dcmplt>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f47f acda 	bne.w	8009ab4 <_strtod_l+0x49c>
 800a100:	a307      	add	r3, pc, #28	; (adr r3, 800a120 <_strtod_l+0xb08>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	4620      	mov	r0, r4
 800a108:	4629      	mov	r1, r5
 800a10a:	f7f6 fc8d 	bl	8000a28 <__aeabi_dcmpgt>
 800a10e:	2800      	cmp	r0, #0
 800a110:	f43f af7b 	beq.w	800a00a <_strtod_l+0x9f2>
 800a114:	e4ce      	b.n	8009ab4 <_strtod_l+0x49c>
 800a116:	bf00      	nop
 800a118:	94a03595 	.word	0x94a03595
 800a11c:	3fdfffff 	.word	0x3fdfffff
 800a120:	35afe535 	.word	0x35afe535
 800a124:	3fe00000 	.word	0x3fe00000
 800a128:	000fffff 	.word	0x000fffff
 800a12c:	7ff00000 	.word	0x7ff00000
 800a130:	7fefffff 	.word	0x7fefffff
 800a134:	3ff00000 	.word	0x3ff00000
 800a138:	7fe00000 	.word	0x7fe00000
 800a13c:	7c9fffff 	.word	0x7c9fffff
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	bff00000 	.word	0xbff00000
 800a148:	9b05      	ldr	r3, [sp, #20]
 800a14a:	b313      	cbz	r3, 800a192 <_strtod_l+0xb7a>
 800a14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a14e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a152:	d81e      	bhi.n	800a192 <_strtod_l+0xb7a>
 800a154:	a326      	add	r3, pc, #152	; (adr r3, 800a1f0 <_strtod_l+0xbd8>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7f6 fc4f 	bl	8000a00 <__aeabi_dcmple>
 800a162:	b190      	cbz	r0, 800a18a <_strtod_l+0xb72>
 800a164:	4629      	mov	r1, r5
 800a166:	4620      	mov	r0, r4
 800a168:	f7f6 fca6 	bl	8000ab8 <__aeabi_d2uiz>
 800a16c:	2801      	cmp	r0, #1
 800a16e:	bf38      	it	cc
 800a170:	2001      	movcc	r0, #1
 800a172:	f7f6 f94f 	bl	8000414 <__aeabi_ui2d>
 800a176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a178:	4604      	mov	r4, r0
 800a17a:	460d      	mov	r5, r1
 800a17c:	b9d3      	cbnz	r3, 800a1b4 <_strtod_l+0xb9c>
 800a17e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a182:	9012      	str	r0, [sp, #72]	; 0x48
 800a184:	9313      	str	r3, [sp, #76]	; 0x4c
 800a186:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a18a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a18c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a190:	1a9f      	subs	r7, r3, r2
 800a192:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a196:	f001 fe4d 	bl	800be34 <__ulp>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f6 f9b1 	bl	8000508 <__aeabi_dmul>
 800a1a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1aa:	f7f5 fff7 	bl	800019c <__adddf3>
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	4689      	mov	r9, r1
 800a1b2:	e77e      	b.n	800a0b2 <_strtod_l+0xa9a>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a1bc:	e7e3      	b.n	800a186 <_strtod_l+0xb6e>
 800a1be:	a30e      	add	r3, pc, #56	; (adr r3, 800a1f8 <_strtod_l+0xbe0>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 fc12 	bl	80009ec <__aeabi_dcmplt>
 800a1c8:	e7a1      	b.n	800a10e <_strtod_l+0xaf6>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	f7ff ba65 	b.w	80096a2 <_strtod_l+0x8a>
 800a1d8:	2b65      	cmp	r3, #101	; 0x65
 800a1da:	f43f ab5c 	beq.w	8009896 <_strtod_l+0x27e>
 800a1de:	2b45      	cmp	r3, #69	; 0x45
 800a1e0:	f43f ab59 	beq.w	8009896 <_strtod_l+0x27e>
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f7ff bb8d 	b.w	8009904 <_strtod_l+0x2ec>
 800a1ea:	bf00      	nop
 800a1ec:	f3af 8000 	nop.w
 800a1f0:	ffc00000 	.word	0xffc00000
 800a1f4:	41dfffff 	.word	0x41dfffff
 800a1f8:	94a03595 	.word	0x94a03595
 800a1fc:	3fcfffff 	.word	0x3fcfffff

0800a200 <_strtod_r>:
 800a200:	4b01      	ldr	r3, [pc, #4]	; (800a208 <_strtod_r+0x8>)
 800a202:	f7ff ba09 	b.w	8009618 <_strtod_l>
 800a206:	bf00      	nop
 800a208:	20000074 	.word	0x20000074

0800a20c <_strtol_l.isra.0>:
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a212:	4686      	mov	lr, r0
 800a214:	d001      	beq.n	800a21a <_strtol_l.isra.0+0xe>
 800a216:	2b24      	cmp	r3, #36	; 0x24
 800a218:	d906      	bls.n	800a228 <_strtol_l.isra.0+0x1c>
 800a21a:	f7fe fac9 	bl	80087b0 <__errno>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	2000      	movs	r0, #0
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	468c      	mov	ip, r1
 800a22a:	4e3a      	ldr	r6, [pc, #232]	; (800a314 <_strtol_l.isra.0+0x108>)
 800a22c:	4660      	mov	r0, ip
 800a22e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a232:	5da5      	ldrb	r5, [r4, r6]
 800a234:	f015 0508 	ands.w	r5, r5, #8
 800a238:	d1f8      	bne.n	800a22c <_strtol_l.isra.0+0x20>
 800a23a:	2c2d      	cmp	r4, #45	; 0x2d
 800a23c:	d133      	bne.n	800a2a6 <_strtol_l.isra.0+0x9a>
 800a23e:	f04f 0801 	mov.w	r8, #1
 800a242:	f89c 4000 	ldrb.w	r4, [ip]
 800a246:	f100 0c02 	add.w	ip, r0, #2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d05d      	beq.n	800a30a <_strtol_l.isra.0+0xfe>
 800a24e:	2b10      	cmp	r3, #16
 800a250:	d10c      	bne.n	800a26c <_strtol_l.isra.0+0x60>
 800a252:	2c30      	cmp	r4, #48	; 0x30
 800a254:	d10a      	bne.n	800a26c <_strtol_l.isra.0+0x60>
 800a256:	f89c 0000 	ldrb.w	r0, [ip]
 800a25a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a25e:	2858      	cmp	r0, #88	; 0x58
 800a260:	d14e      	bne.n	800a300 <_strtol_l.isra.0+0xf4>
 800a262:	2310      	movs	r3, #16
 800a264:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a268:	f10c 0c02 	add.w	ip, ip, #2
 800a26c:	2500      	movs	r5, #0
 800a26e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a272:	3f01      	subs	r7, #1
 800a274:	fbb7 f9f3 	udiv	r9, r7, r3
 800a278:	4628      	mov	r0, r5
 800a27a:	fb03 7a19 	mls	sl, r3, r9, r7
 800a27e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a282:	2e09      	cmp	r6, #9
 800a284:	d818      	bhi.n	800a2b8 <_strtol_l.isra.0+0xac>
 800a286:	4634      	mov	r4, r6
 800a288:	42a3      	cmp	r3, r4
 800a28a:	dd24      	ble.n	800a2d6 <_strtol_l.isra.0+0xca>
 800a28c:	2d00      	cmp	r5, #0
 800a28e:	db1f      	blt.n	800a2d0 <_strtol_l.isra.0+0xc4>
 800a290:	4581      	cmp	r9, r0
 800a292:	d31d      	bcc.n	800a2d0 <_strtol_l.isra.0+0xc4>
 800a294:	d101      	bne.n	800a29a <_strtol_l.isra.0+0x8e>
 800a296:	45a2      	cmp	sl, r4
 800a298:	db1a      	blt.n	800a2d0 <_strtol_l.isra.0+0xc4>
 800a29a:	2501      	movs	r5, #1
 800a29c:	fb00 4003 	mla	r0, r0, r3, r4
 800a2a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a2a4:	e7eb      	b.n	800a27e <_strtol_l.isra.0+0x72>
 800a2a6:	2c2b      	cmp	r4, #43	; 0x2b
 800a2a8:	bf08      	it	eq
 800a2aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a2ae:	46a8      	mov	r8, r5
 800a2b0:	bf08      	it	eq
 800a2b2:	f100 0c02 	addeq.w	ip, r0, #2
 800a2b6:	e7c8      	b.n	800a24a <_strtol_l.isra.0+0x3e>
 800a2b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a2bc:	2e19      	cmp	r6, #25
 800a2be:	d801      	bhi.n	800a2c4 <_strtol_l.isra.0+0xb8>
 800a2c0:	3c37      	subs	r4, #55	; 0x37
 800a2c2:	e7e1      	b.n	800a288 <_strtol_l.isra.0+0x7c>
 800a2c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a2c8:	2e19      	cmp	r6, #25
 800a2ca:	d804      	bhi.n	800a2d6 <_strtol_l.isra.0+0xca>
 800a2cc:	3c57      	subs	r4, #87	; 0x57
 800a2ce:	e7db      	b.n	800a288 <_strtol_l.isra.0+0x7c>
 800a2d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a2d4:	e7e4      	b.n	800a2a0 <_strtol_l.isra.0+0x94>
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	da08      	bge.n	800a2ec <_strtol_l.isra.0+0xe0>
 800a2da:	2322      	movs	r3, #34	; 0x22
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f8ce 3000 	str.w	r3, [lr]
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d09e      	beq.n	800a224 <_strtol_l.isra.0+0x18>
 800a2e6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a2ea:	e007      	b.n	800a2fc <_strtol_l.isra.0+0xf0>
 800a2ec:	f1b8 0f00 	cmp.w	r8, #0
 800a2f0:	d000      	beq.n	800a2f4 <_strtol_l.isra.0+0xe8>
 800a2f2:	4240      	negs	r0, r0
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	d095      	beq.n	800a224 <_strtol_l.isra.0+0x18>
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	d1f4      	bne.n	800a2e6 <_strtol_l.isra.0+0xda>
 800a2fc:	6011      	str	r1, [r2, #0]
 800a2fe:	e791      	b.n	800a224 <_strtol_l.isra.0+0x18>
 800a300:	2430      	movs	r4, #48	; 0x30
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1b2      	bne.n	800a26c <_strtol_l.isra.0+0x60>
 800a306:	2308      	movs	r3, #8
 800a308:	e7b0      	b.n	800a26c <_strtol_l.isra.0+0x60>
 800a30a:	2c30      	cmp	r4, #48	; 0x30
 800a30c:	d0a3      	beq.n	800a256 <_strtol_l.isra.0+0x4a>
 800a30e:	230a      	movs	r3, #10
 800a310:	e7ac      	b.n	800a26c <_strtol_l.isra.0+0x60>
 800a312:	bf00      	nop
 800a314:	0800d549 	.word	0x0800d549

0800a318 <_strtol_r>:
 800a318:	f7ff bf78 	b.w	800a20c <_strtol_l.isra.0>

0800a31c <quorem>:
 800a31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	6903      	ldr	r3, [r0, #16]
 800a322:	690c      	ldr	r4, [r1, #16]
 800a324:	4607      	mov	r7, r0
 800a326:	42a3      	cmp	r3, r4
 800a328:	f2c0 8083 	blt.w	800a432 <quorem+0x116>
 800a32c:	3c01      	subs	r4, #1
 800a32e:	f100 0514 	add.w	r5, r0, #20
 800a332:	f101 0814 	add.w	r8, r1, #20
 800a336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a344:	3301      	adds	r3, #1
 800a346:	429a      	cmp	r2, r3
 800a348:	fbb2 f6f3 	udiv	r6, r2, r3
 800a34c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a354:	d332      	bcc.n	800a3bc <quorem+0xa0>
 800a356:	f04f 0e00 	mov.w	lr, #0
 800a35a:	4640      	mov	r0, r8
 800a35c:	46ac      	mov	ip, r5
 800a35e:	46f2      	mov	sl, lr
 800a360:	f850 2b04 	ldr.w	r2, [r0], #4
 800a364:	b293      	uxth	r3, r2
 800a366:	fb06 e303 	mla	r3, r6, r3, lr
 800a36a:	0c12      	lsrs	r2, r2, #16
 800a36c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a370:	fb06 e202 	mla	r2, r6, r2, lr
 800a374:	b29b      	uxth	r3, r3
 800a376:	ebaa 0303 	sub.w	r3, sl, r3
 800a37a:	f8dc a000 	ldr.w	sl, [ip]
 800a37e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a382:	fa1f fa8a 	uxth.w	sl, sl
 800a386:	4453      	add	r3, sl
 800a388:	fa1f fa82 	uxth.w	sl, r2
 800a38c:	f8dc 2000 	ldr.w	r2, [ip]
 800a390:	4581      	cmp	r9, r0
 800a392:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a396:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3a4:	f84c 3b04 	str.w	r3, [ip], #4
 800a3a8:	d2da      	bcs.n	800a360 <quorem+0x44>
 800a3aa:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3ae:	b92b      	cbnz	r3, 800a3bc <quorem+0xa0>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	3b04      	subs	r3, #4
 800a3b4:	429d      	cmp	r5, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	d32f      	bcc.n	800a41a <quorem+0xfe>
 800a3ba:	613c      	str	r4, [r7, #16]
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f001 fc8d 	bl	800bcdc <__mcmp>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	db25      	blt.n	800a412 <quorem+0xf6>
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f04f 0c00 	mov.w	ip, #0
 800a3cc:	3601      	adds	r6, #1
 800a3ce:	f858 1b04 	ldr.w	r1, [r8], #4
 800a3d2:	f8d0 e000 	ldr.w	lr, [r0]
 800a3d6:	b28b      	uxth	r3, r1
 800a3d8:	ebac 0303 	sub.w	r3, ip, r3
 800a3dc:	fa1f f28e 	uxth.w	r2, lr
 800a3e0:	4413      	add	r3, r2
 800a3e2:	0c0a      	lsrs	r2, r1, #16
 800a3e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3f2:	45c1      	cmp	r9, r8
 800a3f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3f8:	f840 3b04 	str.w	r3, [r0], #4
 800a3fc:	d2e7      	bcs.n	800a3ce <quorem+0xb2>
 800a3fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a406:	b922      	cbnz	r2, 800a412 <quorem+0xf6>
 800a408:	3b04      	subs	r3, #4
 800a40a:	429d      	cmp	r5, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	d30a      	bcc.n	800a426 <quorem+0x10a>
 800a410:	613c      	str	r4, [r7, #16]
 800a412:	4630      	mov	r0, r6
 800a414:	b003      	add	sp, #12
 800a416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	3b04      	subs	r3, #4
 800a41e:	2a00      	cmp	r2, #0
 800a420:	d1cb      	bne.n	800a3ba <quorem+0x9e>
 800a422:	3c01      	subs	r4, #1
 800a424:	e7c6      	b.n	800a3b4 <quorem+0x98>
 800a426:	6812      	ldr	r2, [r2, #0]
 800a428:	3b04      	subs	r3, #4
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	d1f0      	bne.n	800a410 <quorem+0xf4>
 800a42e:	3c01      	subs	r4, #1
 800a430:	e7eb      	b.n	800a40a <quorem+0xee>
 800a432:	2000      	movs	r0, #0
 800a434:	e7ee      	b.n	800a414 <quorem+0xf8>
	...

0800a438 <_dtoa_r>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	4616      	mov	r6, r2
 800a43e:	461f      	mov	r7, r3
 800a440:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a442:	b099      	sub	sp, #100	; 0x64
 800a444:	4605      	mov	r5, r0
 800a446:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a44a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a44e:	b974      	cbnz	r4, 800a46e <_dtoa_r+0x36>
 800a450:	2010      	movs	r0, #16
 800a452:	f001 f949 	bl	800b6e8 <malloc>
 800a456:	4602      	mov	r2, r0
 800a458:	6268      	str	r0, [r5, #36]	; 0x24
 800a45a:	b920      	cbnz	r0, 800a466 <_dtoa_r+0x2e>
 800a45c:	21ea      	movs	r1, #234	; 0xea
 800a45e:	4bae      	ldr	r3, [pc, #696]	; (800a718 <_dtoa_r+0x2e0>)
 800a460:	48ae      	ldr	r0, [pc, #696]	; (800a71c <_dtoa_r+0x2e4>)
 800a462:	f002 f875 	bl	800c550 <__assert_func>
 800a466:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a46a:	6004      	str	r4, [r0, #0]
 800a46c:	60c4      	str	r4, [r0, #12]
 800a46e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	b151      	cbz	r1, 800a48a <_dtoa_r+0x52>
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	2301      	movs	r3, #1
 800a478:	4093      	lsls	r3, r2
 800a47a:	604a      	str	r2, [r1, #4]
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	4628      	mov	r0, r5
 800a480:	f001 f9a8 	bl	800b7d4 <_Bfree>
 800a484:	2200      	movs	r2, #0
 800a486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	1e3b      	subs	r3, r7, #0
 800a48c:	bfaf      	iteee	ge
 800a48e:	2300      	movge	r3, #0
 800a490:	2201      	movlt	r2, #1
 800a492:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a496:	9305      	strlt	r3, [sp, #20]
 800a498:	bfa8      	it	ge
 800a49a:	f8c8 3000 	strge.w	r3, [r8]
 800a49e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a4a2:	4b9f      	ldr	r3, [pc, #636]	; (800a720 <_dtoa_r+0x2e8>)
 800a4a4:	bfb8      	it	lt
 800a4a6:	f8c8 2000 	strlt.w	r2, [r8]
 800a4aa:	ea33 0309 	bics.w	r3, r3, r9
 800a4ae:	d119      	bne.n	800a4e4 <_dtoa_r+0xac>
 800a4b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4bc:	4333      	orrs	r3, r6
 800a4be:	f000 8580 	beq.w	800afc2 <_dtoa_r+0xb8a>
 800a4c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4c4:	b953      	cbnz	r3, 800a4dc <_dtoa_r+0xa4>
 800a4c6:	4b97      	ldr	r3, [pc, #604]	; (800a724 <_dtoa_r+0x2ec>)
 800a4c8:	e022      	b.n	800a510 <_dtoa_r+0xd8>
 800a4ca:	4b97      	ldr	r3, [pc, #604]	; (800a728 <_dtoa_r+0x2f0>)
 800a4cc:	9308      	str	r3, [sp, #32]
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	9808      	ldr	r0, [sp, #32]
 800a4d6:	b019      	add	sp, #100	; 0x64
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	4b91      	ldr	r3, [pc, #580]	; (800a724 <_dtoa_r+0x2ec>)
 800a4de:	9308      	str	r3, [sp, #32]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	e7f5      	b.n	800a4d0 <_dtoa_r+0x98>
 800a4e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a4e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a4ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f7f6 fa70 	bl	80009d8 <__aeabi_dcmpeq>
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	b158      	cbz	r0, 800a514 <_dtoa_r+0xdc>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 8559 	beq.w	800afbc <_dtoa_r+0xb84>
 800a50a:	4888      	ldr	r0, [pc, #544]	; (800a72c <_dtoa_r+0x2f4>)
 800a50c:	6018      	str	r0, [r3, #0]
 800a50e:	1e43      	subs	r3, r0, #1
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	e7df      	b.n	800a4d4 <_dtoa_r+0x9c>
 800a514:	ab16      	add	r3, sp, #88	; 0x58
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	ab17      	add	r3, sp, #92	; 0x5c
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	4628      	mov	r0, r5
 800a51e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a522:	f001 fd01 	bl	800bf28 <__d2b>
 800a526:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a52a:	4682      	mov	sl, r0
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	d07e      	beq.n	800a62e <_dtoa_r+0x1f6>
 800a530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a536:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a53a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a53e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a542:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a546:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a54a:	2200      	movs	r2, #0
 800a54c:	4b78      	ldr	r3, [pc, #480]	; (800a730 <_dtoa_r+0x2f8>)
 800a54e:	f7f5 fe23 	bl	8000198 <__aeabi_dsub>
 800a552:	a36b      	add	r3, pc, #428	; (adr r3, 800a700 <_dtoa_r+0x2c8>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f7f5 ffd6 	bl	8000508 <__aeabi_dmul>
 800a55c:	a36a      	add	r3, pc, #424	; (adr r3, 800a708 <_dtoa_r+0x2d0>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fe1b 	bl	800019c <__adddf3>
 800a566:	4606      	mov	r6, r0
 800a568:	4620      	mov	r0, r4
 800a56a:	460f      	mov	r7, r1
 800a56c:	f7f5 ff62 	bl	8000434 <__aeabi_i2d>
 800a570:	a367      	add	r3, pc, #412	; (adr r3, 800a710 <_dtoa_r+0x2d8>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f5 ffc7 	bl	8000508 <__aeabi_dmul>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4630      	mov	r0, r6
 800a580:	4639      	mov	r1, r7
 800a582:	f7f5 fe0b 	bl	800019c <__adddf3>
 800a586:	4606      	mov	r6, r0
 800a588:	460f      	mov	r7, r1
 800a58a:	f7f6 fa6d 	bl	8000a68 <__aeabi_d2iz>
 800a58e:	2200      	movs	r2, #0
 800a590:	4681      	mov	r9, r0
 800a592:	2300      	movs	r3, #0
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f7f6 fa28 	bl	80009ec <__aeabi_dcmplt>
 800a59c:	b148      	cbz	r0, 800a5b2 <_dtoa_r+0x17a>
 800a59e:	4648      	mov	r0, r9
 800a5a0:	f7f5 ff48 	bl	8000434 <__aeabi_i2d>
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	f7f6 fa16 	bl	80009d8 <__aeabi_dcmpeq>
 800a5ac:	b908      	cbnz	r0, 800a5b2 <_dtoa_r+0x17a>
 800a5ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5b2:	f1b9 0f16 	cmp.w	r9, #22
 800a5b6:	d857      	bhi.n	800a668 <_dtoa_r+0x230>
 800a5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5bc:	4b5d      	ldr	r3, [pc, #372]	; (800a734 <_dtoa_r+0x2fc>)
 800a5be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f7f6 fa11 	bl	80009ec <__aeabi_dcmplt>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d04e      	beq.n	800a66c <_dtoa_r+0x234>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5d8:	1b1c      	subs	r4, r3, r4
 800a5da:	1e63      	subs	r3, r4, #1
 800a5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5de:	bf49      	itett	mi
 800a5e0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a5e4:	2300      	movpl	r3, #0
 800a5e6:	9306      	strmi	r3, [sp, #24]
 800a5e8:	2300      	movmi	r3, #0
 800a5ea:	bf54      	ite	pl
 800a5ec:	9306      	strpl	r3, [sp, #24]
 800a5ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	db3c      	blt.n	800a670 <_dtoa_r+0x238>
 800a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a5fc:	444b      	add	r3, r9
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	2300      	movs	r3, #0
 800a602:	930a      	str	r3, [sp, #40]	; 0x28
 800a604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a606:	2b09      	cmp	r3, #9
 800a608:	d86c      	bhi.n	800a6e4 <_dtoa_r+0x2ac>
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	bfc4      	itt	gt
 800a60e:	3b04      	subgt	r3, #4
 800a610:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a614:	bfc8      	it	gt
 800a616:	2400      	movgt	r4, #0
 800a618:	f1a3 0302 	sub.w	r3, r3, #2
 800a61c:	bfd8      	it	le
 800a61e:	2401      	movle	r4, #1
 800a620:	2b03      	cmp	r3, #3
 800a622:	f200 808b 	bhi.w	800a73c <_dtoa_r+0x304>
 800a626:	e8df f003 	tbb	[pc, r3]
 800a62a:	4f2d      	.short	0x4f2d
 800a62c:	5b4d      	.short	0x5b4d
 800a62e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a632:	441c      	add	r4, r3
 800a634:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a638:	2b20      	cmp	r3, #32
 800a63a:	bfc3      	ittte	gt
 800a63c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a640:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a644:	fa09 f303 	lslgt.w	r3, r9, r3
 800a648:	f1c3 0320 	rsble	r3, r3, #32
 800a64c:	bfc6      	itte	gt
 800a64e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a652:	4318      	orrgt	r0, r3
 800a654:	fa06 f003 	lslle.w	r0, r6, r3
 800a658:	f7f5 fedc 	bl	8000414 <__aeabi_ui2d>
 800a65c:	2301      	movs	r3, #1
 800a65e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a662:	3c01      	subs	r4, #1
 800a664:	9313      	str	r3, [sp, #76]	; 0x4c
 800a666:	e770      	b.n	800a54a <_dtoa_r+0x112>
 800a668:	2301      	movs	r3, #1
 800a66a:	e7b3      	b.n	800a5d4 <_dtoa_r+0x19c>
 800a66c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a66e:	e7b2      	b.n	800a5d6 <_dtoa_r+0x19e>
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	eba3 0309 	sub.w	r3, r3, r9
 800a676:	9306      	str	r3, [sp, #24]
 800a678:	f1c9 0300 	rsb	r3, r9, #0
 800a67c:	930a      	str	r3, [sp, #40]	; 0x28
 800a67e:	2300      	movs	r3, #0
 800a680:	930e      	str	r3, [sp, #56]	; 0x38
 800a682:	e7bf      	b.n	800a604 <_dtoa_r+0x1cc>
 800a684:	2300      	movs	r3, #0
 800a686:	930b      	str	r3, [sp, #44]	; 0x2c
 800a688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dc59      	bgt.n	800a742 <_dtoa_r+0x30a>
 800a68e:	f04f 0b01 	mov.w	fp, #1
 800a692:	465b      	mov	r3, fp
 800a694:	f8cd b008 	str.w	fp, [sp, #8]
 800a698:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a69c:	2200      	movs	r2, #0
 800a69e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a6a0:	6042      	str	r2, [r0, #4]
 800a6a2:	2204      	movs	r2, #4
 800a6a4:	f102 0614 	add.w	r6, r2, #20
 800a6a8:	429e      	cmp	r6, r3
 800a6aa:	6841      	ldr	r1, [r0, #4]
 800a6ac:	d94f      	bls.n	800a74e <_dtoa_r+0x316>
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f001 f850 	bl	800b754 <_Balloc>
 800a6b4:	9008      	str	r0, [sp, #32]
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d14d      	bne.n	800a756 <_dtoa_r+0x31e>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6c0:	4b1d      	ldr	r3, [pc, #116]	; (800a738 <_dtoa_r+0x300>)
 800a6c2:	e6cd      	b.n	800a460 <_dtoa_r+0x28>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e7de      	b.n	800a686 <_dtoa_r+0x24e>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6ce:	eb09 0b03 	add.w	fp, r9, r3
 800a6d2:	f10b 0301 	add.w	r3, fp, #1
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	9302      	str	r3, [sp, #8]
 800a6da:	bfb8      	it	lt
 800a6dc:	2301      	movlt	r3, #1
 800a6de:	e7dd      	b.n	800a69c <_dtoa_r+0x264>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e7f2      	b.n	800a6ca <_dtoa_r+0x292>
 800a6e4:	2401      	movs	r4, #1
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6ea:	9322      	str	r3, [sp, #136]	; 0x88
 800a6ec:	f04f 3bff 	mov.w	fp, #4294967295
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2312      	movs	r3, #18
 800a6f4:	f8cd b008 	str.w	fp, [sp, #8]
 800a6f8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6fa:	e7cf      	b.n	800a69c <_dtoa_r+0x264>
 800a6fc:	f3af 8000 	nop.w
 800a700:	636f4361 	.word	0x636f4361
 800a704:	3fd287a7 	.word	0x3fd287a7
 800a708:	8b60c8b3 	.word	0x8b60c8b3
 800a70c:	3fc68a28 	.word	0x3fc68a28
 800a710:	509f79fb 	.word	0x509f79fb
 800a714:	3fd34413 	.word	0x3fd34413
 800a718:	0800d656 	.word	0x0800d656
 800a71c:	0800d66d 	.word	0x0800d66d
 800a720:	7ff00000 	.word	0x7ff00000
 800a724:	0800d652 	.word	0x0800d652
 800a728:	0800d649 	.word	0x0800d649
 800a72c:	0800d4cd 	.word	0x0800d4cd
 800a730:	3ff80000 	.word	0x3ff80000
 800a734:	0800d7e8 	.word	0x0800d7e8
 800a738:	0800d6cc 	.word	0x0800d6cc
 800a73c:	2301      	movs	r3, #1
 800a73e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a740:	e7d4      	b.n	800a6ec <_dtoa_r+0x2b4>
 800a742:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a746:	465b      	mov	r3, fp
 800a748:	f8cd b008 	str.w	fp, [sp, #8]
 800a74c:	e7a6      	b.n	800a69c <_dtoa_r+0x264>
 800a74e:	3101      	adds	r1, #1
 800a750:	6041      	str	r1, [r0, #4]
 800a752:	0052      	lsls	r2, r2, #1
 800a754:	e7a6      	b.n	800a6a4 <_dtoa_r+0x26c>
 800a756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a758:	9a08      	ldr	r2, [sp, #32]
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	9b02      	ldr	r3, [sp, #8]
 800a75e:	2b0e      	cmp	r3, #14
 800a760:	f200 80a8 	bhi.w	800a8b4 <_dtoa_r+0x47c>
 800a764:	2c00      	cmp	r4, #0
 800a766:	f000 80a5 	beq.w	800a8b4 <_dtoa_r+0x47c>
 800a76a:	f1b9 0f00 	cmp.w	r9, #0
 800a76e:	dd34      	ble.n	800a7da <_dtoa_r+0x3a2>
 800a770:	4a9a      	ldr	r2, [pc, #616]	; (800a9dc <_dtoa_r+0x5a4>)
 800a772:	f009 030f 	and.w	r3, r9, #15
 800a776:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a77a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a77e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a782:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a786:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a78a:	d016      	beq.n	800a7ba <_dtoa_r+0x382>
 800a78c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a790:	4b93      	ldr	r3, [pc, #588]	; (800a9e0 <_dtoa_r+0x5a8>)
 800a792:	2703      	movs	r7, #3
 800a794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a798:	f7f5 ffe0 	bl	800075c <__aeabi_ddiv>
 800a79c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7a0:	f004 040f 	and.w	r4, r4, #15
 800a7a4:	4e8e      	ldr	r6, [pc, #568]	; (800a9e0 <_dtoa_r+0x5a8>)
 800a7a6:	b954      	cbnz	r4, 800a7be <_dtoa_r+0x386>
 800a7a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7b0:	f7f5 ffd4 	bl	800075c <__aeabi_ddiv>
 800a7b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7b8:	e029      	b.n	800a80e <_dtoa_r+0x3d6>
 800a7ba:	2702      	movs	r7, #2
 800a7bc:	e7f2      	b.n	800a7a4 <_dtoa_r+0x36c>
 800a7be:	07e1      	lsls	r1, r4, #31
 800a7c0:	d508      	bpl.n	800a7d4 <_dtoa_r+0x39c>
 800a7c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7ca:	f7f5 fe9d 	bl	8000508 <__aeabi_dmul>
 800a7ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7d2:	3701      	adds	r7, #1
 800a7d4:	1064      	asrs	r4, r4, #1
 800a7d6:	3608      	adds	r6, #8
 800a7d8:	e7e5      	b.n	800a7a6 <_dtoa_r+0x36e>
 800a7da:	f000 80a5 	beq.w	800a928 <_dtoa_r+0x4f0>
 800a7de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7e2:	f1c9 0400 	rsb	r4, r9, #0
 800a7e6:	4b7d      	ldr	r3, [pc, #500]	; (800a9dc <_dtoa_r+0x5a4>)
 800a7e8:	f004 020f 	and.w	r2, r4, #15
 800a7ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f5 fe88 	bl	8000508 <__aeabi_dmul>
 800a7f8:	2702      	movs	r7, #2
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a800:	4e77      	ldr	r6, [pc, #476]	; (800a9e0 <_dtoa_r+0x5a8>)
 800a802:	1124      	asrs	r4, r4, #4
 800a804:	2c00      	cmp	r4, #0
 800a806:	f040 8084 	bne.w	800a912 <_dtoa_r+0x4da>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1d2      	bne.n	800a7b4 <_dtoa_r+0x37c>
 800a80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 808b 	beq.w	800a92c <_dtoa_r+0x4f4>
 800a816:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a81a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a81e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a822:	2200      	movs	r2, #0
 800a824:	4b6f      	ldr	r3, [pc, #444]	; (800a9e4 <_dtoa_r+0x5ac>)
 800a826:	f7f6 f8e1 	bl	80009ec <__aeabi_dcmplt>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d07e      	beq.n	800a92c <_dtoa_r+0x4f4>
 800a82e:	9b02      	ldr	r3, [sp, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d07b      	beq.n	800a92c <_dtoa_r+0x4f4>
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	dd38      	ble.n	800a8ac <_dtoa_r+0x474>
 800a83a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a83e:	2200      	movs	r2, #0
 800a840:	4b69      	ldr	r3, [pc, #420]	; (800a9e8 <_dtoa_r+0x5b0>)
 800a842:	f7f5 fe61 	bl	8000508 <__aeabi_dmul>
 800a846:	465c      	mov	r4, fp
 800a848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a84c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a850:	3701      	adds	r7, #1
 800a852:	4638      	mov	r0, r7
 800a854:	f7f5 fdee 	bl	8000434 <__aeabi_i2d>
 800a858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a85c:	f7f5 fe54 	bl	8000508 <__aeabi_dmul>
 800a860:	2200      	movs	r2, #0
 800a862:	4b62      	ldr	r3, [pc, #392]	; (800a9ec <_dtoa_r+0x5b4>)
 800a864:	f7f5 fc9a 	bl	800019c <__adddf3>
 800a868:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a86c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a870:	9611      	str	r6, [sp, #68]	; 0x44
 800a872:	2c00      	cmp	r4, #0
 800a874:	d15d      	bne.n	800a932 <_dtoa_r+0x4fa>
 800a876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a87a:	2200      	movs	r2, #0
 800a87c:	4b5c      	ldr	r3, [pc, #368]	; (800a9f0 <_dtoa_r+0x5b8>)
 800a87e:	f7f5 fc8b 	bl	8000198 <__aeabi_dsub>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a88a:	4633      	mov	r3, r6
 800a88c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a88e:	f7f6 f8cb 	bl	8000a28 <__aeabi_dcmpgt>
 800a892:	2800      	cmp	r0, #0
 800a894:	f040 829e 	bne.w	800add4 <_dtoa_r+0x99c>
 800a898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a89c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a89e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a8a2:	f7f6 f8a3 	bl	80009ec <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f040 8292 	bne.w	800add0 <_dtoa_r+0x998>
 800a8ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a8b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a8b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f2c0 8153 	blt.w	800ab62 <_dtoa_r+0x72a>
 800a8bc:	f1b9 0f0e 	cmp.w	r9, #14
 800a8c0:	f300 814f 	bgt.w	800ab62 <_dtoa_r+0x72a>
 800a8c4:	4b45      	ldr	r3, [pc, #276]	; (800a9dc <_dtoa_r+0x5a4>)
 800a8c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a8ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a8d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f280 80db 	bge.w	800aa90 <_dtoa_r+0x658>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f300 80d7 	bgt.w	800aa90 <_dtoa_r+0x658>
 800a8e2:	f040 8274 	bne.w	800adce <_dtoa_r+0x996>
 800a8e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	4b40      	ldr	r3, [pc, #256]	; (800a9f0 <_dtoa_r+0x5b8>)
 800a8ee:	f7f5 fe0b 	bl	8000508 <__aeabi_dmul>
 800a8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f6:	f7f6 f88d 	bl	8000a14 <__aeabi_dcmpge>
 800a8fa:	9c02      	ldr	r4, [sp, #8]
 800a8fc:	4626      	mov	r6, r4
 800a8fe:	2800      	cmp	r0, #0
 800a900:	f040 824a 	bne.w	800ad98 <_dtoa_r+0x960>
 800a904:	2331      	movs	r3, #49	; 0x31
 800a906:	9f08      	ldr	r7, [sp, #32]
 800a908:	f109 0901 	add.w	r9, r9, #1
 800a90c:	f807 3b01 	strb.w	r3, [r7], #1
 800a910:	e246      	b.n	800ada0 <_dtoa_r+0x968>
 800a912:	07e2      	lsls	r2, r4, #31
 800a914:	d505      	bpl.n	800a922 <_dtoa_r+0x4ea>
 800a916:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a91a:	f7f5 fdf5 	bl	8000508 <__aeabi_dmul>
 800a91e:	2301      	movs	r3, #1
 800a920:	3701      	adds	r7, #1
 800a922:	1064      	asrs	r4, r4, #1
 800a924:	3608      	adds	r6, #8
 800a926:	e76d      	b.n	800a804 <_dtoa_r+0x3cc>
 800a928:	2702      	movs	r7, #2
 800a92a:	e770      	b.n	800a80e <_dtoa_r+0x3d6>
 800a92c:	46c8      	mov	r8, r9
 800a92e:	9c02      	ldr	r4, [sp, #8]
 800a930:	e78f      	b.n	800a852 <_dtoa_r+0x41a>
 800a932:	9908      	ldr	r1, [sp, #32]
 800a934:	4b29      	ldr	r3, [pc, #164]	; (800a9dc <_dtoa_r+0x5a4>)
 800a936:	4421      	add	r1, r4
 800a938:	9112      	str	r1, [sp, #72]	; 0x48
 800a93a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a93c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a940:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a944:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a948:	2900      	cmp	r1, #0
 800a94a:	d055      	beq.n	800a9f8 <_dtoa_r+0x5c0>
 800a94c:	2000      	movs	r0, #0
 800a94e:	4929      	ldr	r1, [pc, #164]	; (800a9f4 <_dtoa_r+0x5bc>)
 800a950:	f7f5 ff04 	bl	800075c <__aeabi_ddiv>
 800a954:	463b      	mov	r3, r7
 800a956:	4632      	mov	r2, r6
 800a958:	f7f5 fc1e 	bl	8000198 <__aeabi_dsub>
 800a95c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a960:	9f08      	ldr	r7, [sp, #32]
 800a962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a966:	f7f6 f87f 	bl	8000a68 <__aeabi_d2iz>
 800a96a:	4604      	mov	r4, r0
 800a96c:	f7f5 fd62 	bl	8000434 <__aeabi_i2d>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a978:	f7f5 fc0e 	bl	8000198 <__aeabi_dsub>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	3430      	adds	r4, #48	; 0x30
 800a982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a98a:	f807 4b01 	strb.w	r4, [r7], #1
 800a98e:	f7f6 f82d 	bl	80009ec <__aeabi_dcmplt>
 800a992:	2800      	cmp	r0, #0
 800a994:	d174      	bne.n	800aa80 <_dtoa_r+0x648>
 800a996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a99a:	2000      	movs	r0, #0
 800a99c:	4911      	ldr	r1, [pc, #68]	; (800a9e4 <_dtoa_r+0x5ac>)
 800a99e:	f7f5 fbfb 	bl	8000198 <__aeabi_dsub>
 800a9a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9a6:	f7f6 f821 	bl	80009ec <__aeabi_dcmplt>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f040 80b6 	bne.w	800ab1c <_dtoa_r+0x6e4>
 800a9b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9b2:	429f      	cmp	r7, r3
 800a9b4:	f43f af7a 	beq.w	800a8ac <_dtoa_r+0x474>
 800a9b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <_dtoa_r+0x5b0>)
 800a9c0:	f7f5 fda2 	bl	8000508 <__aeabi_dmul>
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ce:	4b06      	ldr	r3, [pc, #24]	; (800a9e8 <_dtoa_r+0x5b0>)
 800a9d0:	f7f5 fd9a 	bl	8000508 <__aeabi_dmul>
 800a9d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9d8:	e7c3      	b.n	800a962 <_dtoa_r+0x52a>
 800a9da:	bf00      	nop
 800a9dc:	0800d7e8 	.word	0x0800d7e8
 800a9e0:	0800d7c0 	.word	0x0800d7c0
 800a9e4:	3ff00000 	.word	0x3ff00000
 800a9e8:	40240000 	.word	0x40240000
 800a9ec:	401c0000 	.word	0x401c0000
 800a9f0:	40140000 	.word	0x40140000
 800a9f4:	3fe00000 	.word	0x3fe00000
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f5 fd84 	bl	8000508 <__aeabi_dmul>
 800aa00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa06:	9c08      	ldr	r4, [sp, #32]
 800aa08:	9314      	str	r3, [sp, #80]	; 0x50
 800aa0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa0e:	f7f6 f82b 	bl	8000a68 <__aeabi_d2iz>
 800aa12:	9015      	str	r0, [sp, #84]	; 0x54
 800aa14:	f7f5 fd0e 	bl	8000434 <__aeabi_i2d>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa20:	f7f5 fbba 	bl	8000198 <__aeabi_dsub>
 800aa24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa26:	4606      	mov	r6, r0
 800aa28:	3330      	adds	r3, #48	; 0x30
 800aa2a:	f804 3b01 	strb.w	r3, [r4], #1
 800aa2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa30:	460f      	mov	r7, r1
 800aa32:	429c      	cmp	r4, r3
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	d124      	bne.n	800aa84 <_dtoa_r+0x64c>
 800aa3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa3e:	4bb3      	ldr	r3, [pc, #716]	; (800ad0c <_dtoa_r+0x8d4>)
 800aa40:	f7f5 fbac 	bl	800019c <__adddf3>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 ffec 	bl	8000a28 <__aeabi_dcmpgt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d162      	bne.n	800ab1a <_dtoa_r+0x6e2>
 800aa54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa58:	2000      	movs	r0, #0
 800aa5a:	49ac      	ldr	r1, [pc, #688]	; (800ad0c <_dtoa_r+0x8d4>)
 800aa5c:	f7f5 fb9c 	bl	8000198 <__aeabi_dsub>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4630      	mov	r0, r6
 800aa66:	4639      	mov	r1, r7
 800aa68:	f7f5 ffc0 	bl	80009ec <__aeabi_dcmplt>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	f43f af1d 	beq.w	800a8ac <_dtoa_r+0x474>
 800aa72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa74:	1e7b      	subs	r3, r7, #1
 800aa76:	9314      	str	r3, [sp, #80]	; 0x50
 800aa78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa7c:	2b30      	cmp	r3, #48	; 0x30
 800aa7e:	d0f8      	beq.n	800aa72 <_dtoa_r+0x63a>
 800aa80:	46c1      	mov	r9, r8
 800aa82:	e03a      	b.n	800aafa <_dtoa_r+0x6c2>
 800aa84:	4ba2      	ldr	r3, [pc, #648]	; (800ad10 <_dtoa_r+0x8d8>)
 800aa86:	f7f5 fd3f 	bl	8000508 <__aeabi_dmul>
 800aa8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa8e:	e7bc      	b.n	800aa0a <_dtoa_r+0x5d2>
 800aa90:	9f08      	ldr	r7, [sp, #32]
 800aa92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa9a:	f7f5 fe5f 	bl	800075c <__aeabi_ddiv>
 800aa9e:	f7f5 ffe3 	bl	8000a68 <__aeabi_d2iz>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	f7f5 fcc6 	bl	8000434 <__aeabi_i2d>
 800aaa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaac:	f7f5 fd2c 	bl	8000508 <__aeabi_dmul>
 800aab0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aab4:	460b      	mov	r3, r1
 800aab6:	4602      	mov	r2, r0
 800aab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aabc:	f7f5 fb6c 	bl	8000198 <__aeabi_dsub>
 800aac0:	f807 6b01 	strb.w	r6, [r7], #1
 800aac4:	9e08      	ldr	r6, [sp, #32]
 800aac6:	9b02      	ldr	r3, [sp, #8]
 800aac8:	1bbe      	subs	r6, r7, r6
 800aaca:	42b3      	cmp	r3, r6
 800aacc:	d13a      	bne.n	800ab44 <_dtoa_r+0x70c>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	f7f5 fb63 	bl	800019c <__adddf3>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aae2:	f7f5 ffa1 	bl	8000a28 <__aeabi_dcmpgt>
 800aae6:	bb58      	cbnz	r0, 800ab40 <_dtoa_r+0x708>
 800aae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf0:	f7f5 ff72 	bl	80009d8 <__aeabi_dcmpeq>
 800aaf4:	b108      	cbz	r0, 800aafa <_dtoa_r+0x6c2>
 800aaf6:	07e1      	lsls	r1, r4, #31
 800aaf8:	d422      	bmi.n	800ab40 <_dtoa_r+0x708>
 800aafa:	4628      	mov	r0, r5
 800aafc:	4651      	mov	r1, sl
 800aafe:	f000 fe69 	bl	800b7d4 <_Bfree>
 800ab02:	2300      	movs	r3, #0
 800ab04:	703b      	strb	r3, [r7, #0]
 800ab06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab08:	f109 0001 	add.w	r0, r9, #1
 800ab0c:	6018      	str	r0, [r3, #0]
 800ab0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f43f acdf 	beq.w	800a4d4 <_dtoa_r+0x9c>
 800ab16:	601f      	str	r7, [r3, #0]
 800ab18:	e4dc      	b.n	800a4d4 <_dtoa_r+0x9c>
 800ab1a:	4627      	mov	r7, r4
 800ab1c:	463b      	mov	r3, r7
 800ab1e:	461f      	mov	r7, r3
 800ab20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab24:	2a39      	cmp	r2, #57	; 0x39
 800ab26:	d107      	bne.n	800ab38 <_dtoa_r+0x700>
 800ab28:	9a08      	ldr	r2, [sp, #32]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d1f7      	bne.n	800ab1e <_dtoa_r+0x6e6>
 800ab2e:	2230      	movs	r2, #48	; 0x30
 800ab30:	9908      	ldr	r1, [sp, #32]
 800ab32:	f108 0801 	add.w	r8, r8, #1
 800ab36:	700a      	strb	r2, [r1, #0]
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	e79f      	b.n	800aa80 <_dtoa_r+0x648>
 800ab40:	46c8      	mov	r8, r9
 800ab42:	e7eb      	b.n	800ab1c <_dtoa_r+0x6e4>
 800ab44:	2200      	movs	r2, #0
 800ab46:	4b72      	ldr	r3, [pc, #456]	; (800ad10 <_dtoa_r+0x8d8>)
 800ab48:	f7f5 fcde 	bl	8000508 <__aeabi_dmul>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab54:	2200      	movs	r2, #0
 800ab56:	2300      	movs	r3, #0
 800ab58:	f7f5 ff3e 	bl	80009d8 <__aeabi_dcmpeq>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d098      	beq.n	800aa92 <_dtoa_r+0x65a>
 800ab60:	e7cb      	b.n	800aafa <_dtoa_r+0x6c2>
 800ab62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	f000 80cd 	beq.w	800ad04 <_dtoa_r+0x8cc>
 800ab6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab6c:	2a01      	cmp	r2, #1
 800ab6e:	f300 80af 	bgt.w	800acd0 <_dtoa_r+0x898>
 800ab72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	f000 80a7 	beq.w	800acc8 <_dtoa_r+0x890>
 800ab7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab80:	9f06      	ldr	r7, [sp, #24]
 800ab82:	9a06      	ldr	r2, [sp, #24]
 800ab84:	2101      	movs	r1, #1
 800ab86:	441a      	add	r2, r3
 800ab88:	9206      	str	r2, [sp, #24]
 800ab8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	441a      	add	r2, r3
 800ab90:	9209      	str	r2, [sp, #36]	; 0x24
 800ab92:	f000 ff23 	bl	800b9dc <__i2b>
 800ab96:	4606      	mov	r6, r0
 800ab98:	2f00      	cmp	r7, #0
 800ab9a:	dd0c      	ble.n	800abb6 <_dtoa_r+0x77e>
 800ab9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd09      	ble.n	800abb6 <_dtoa_r+0x77e>
 800aba2:	42bb      	cmp	r3, r7
 800aba4:	bfa8      	it	ge
 800aba6:	463b      	movge	r3, r7
 800aba8:	9a06      	ldr	r2, [sp, #24]
 800abaa:	1aff      	subs	r7, r7, r3
 800abac:	1ad2      	subs	r2, r2, r3
 800abae:	9206      	str	r2, [sp, #24]
 800abb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	9309      	str	r3, [sp, #36]	; 0x24
 800abb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb8:	b1f3      	cbz	r3, 800abf8 <_dtoa_r+0x7c0>
 800abba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 80a9 	beq.w	800ad14 <_dtoa_r+0x8dc>
 800abc2:	2c00      	cmp	r4, #0
 800abc4:	dd10      	ble.n	800abe8 <_dtoa_r+0x7b0>
 800abc6:	4631      	mov	r1, r6
 800abc8:	4622      	mov	r2, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 ffc0 	bl	800bb50 <__pow5mult>
 800abd0:	4652      	mov	r2, sl
 800abd2:	4601      	mov	r1, r0
 800abd4:	4606      	mov	r6, r0
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 ff16 	bl	800ba08 <__multiply>
 800abdc:	4680      	mov	r8, r0
 800abde:	4651      	mov	r1, sl
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 fdf7 	bl	800b7d4 <_Bfree>
 800abe6:	46c2      	mov	sl, r8
 800abe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abea:	1b1a      	subs	r2, r3, r4
 800abec:	d004      	beq.n	800abf8 <_dtoa_r+0x7c0>
 800abee:	4651      	mov	r1, sl
 800abf0:	4628      	mov	r0, r5
 800abf2:	f000 ffad 	bl	800bb50 <__pow5mult>
 800abf6:	4682      	mov	sl, r0
 800abf8:	2101      	movs	r1, #1
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 feee 	bl	800b9dc <__i2b>
 800ac00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac02:	4604      	mov	r4, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f340 8087 	ble.w	800ad18 <_dtoa_r+0x8e0>
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 ff9e 	bl	800bb50 <__pow5mult>
 800ac14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac16:	4604      	mov	r4, r0
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	f340 8080 	ble.w	800ad1e <_dtoa_r+0x8e6>
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac28:	6918      	ldr	r0, [r3, #16]
 800ac2a:	f000 fe89 	bl	800b940 <__hi0bits>
 800ac2e:	f1c0 0020 	rsb	r0, r0, #32
 800ac32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac34:	4418      	add	r0, r3
 800ac36:	f010 001f 	ands.w	r0, r0, #31
 800ac3a:	f000 8092 	beq.w	800ad62 <_dtoa_r+0x92a>
 800ac3e:	f1c0 0320 	rsb	r3, r0, #32
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	f340 808a 	ble.w	800ad5c <_dtoa_r+0x924>
 800ac48:	f1c0 001c 	rsb	r0, r0, #28
 800ac4c:	9b06      	ldr	r3, [sp, #24]
 800ac4e:	4407      	add	r7, r0
 800ac50:	4403      	add	r3, r0
 800ac52:	9306      	str	r3, [sp, #24]
 800ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac56:	4403      	add	r3, r0
 800ac58:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5a:	9b06      	ldr	r3, [sp, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dd05      	ble.n	800ac6c <_dtoa_r+0x834>
 800ac60:	4651      	mov	r1, sl
 800ac62:	461a      	mov	r2, r3
 800ac64:	4628      	mov	r0, r5
 800ac66:	f000 ffcd 	bl	800bc04 <__lshift>
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dd05      	ble.n	800ac7e <_dtoa_r+0x846>
 800ac72:	4621      	mov	r1, r4
 800ac74:	461a      	mov	r2, r3
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 ffc4 	bl	800bc04 <__lshift>
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d070      	beq.n	800ad66 <_dtoa_r+0x92e>
 800ac84:	4621      	mov	r1, r4
 800ac86:	4650      	mov	r0, sl
 800ac88:	f001 f828 	bl	800bcdc <__mcmp>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	da6a      	bge.n	800ad66 <_dtoa_r+0x92e>
 800ac90:	2300      	movs	r3, #0
 800ac92:	4651      	mov	r1, sl
 800ac94:	220a      	movs	r2, #10
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 fdbe 	bl	800b818 <__multadd>
 800ac9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac9e:	4682      	mov	sl, r0
 800aca0:	f109 39ff 	add.w	r9, r9, #4294967295
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 8193 	beq.w	800afd0 <_dtoa_r+0xb98>
 800acaa:	4631      	mov	r1, r6
 800acac:	2300      	movs	r3, #0
 800acae:	220a      	movs	r2, #10
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 fdb1 	bl	800b818 <__multadd>
 800acb6:	f1bb 0f00 	cmp.w	fp, #0
 800acba:	4606      	mov	r6, r0
 800acbc:	f300 8093 	bgt.w	800ade6 <_dtoa_r+0x9ae>
 800acc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	dc57      	bgt.n	800ad76 <_dtoa_r+0x93e>
 800acc6:	e08e      	b.n	800ade6 <_dtoa_r+0x9ae>
 800acc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acce:	e756      	b.n	800ab7e <_dtoa_r+0x746>
 800acd0:	9b02      	ldr	r3, [sp, #8]
 800acd2:	1e5c      	subs	r4, r3, #1
 800acd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	bfb7      	itett	lt
 800acda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acdc:	1b1c      	subge	r4, r3, r4
 800acde:	1ae2      	sublt	r2, r4, r3
 800ace0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ace2:	bfbe      	ittt	lt
 800ace4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ace6:	189b      	addlt	r3, r3, r2
 800ace8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	bfb8      	it	lt
 800acee:	2400      	movlt	r4, #0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	bfbb      	ittet	lt
 800acf4:	9b06      	ldrlt	r3, [sp, #24]
 800acf6:	9a02      	ldrlt	r2, [sp, #8]
 800acf8:	9f06      	ldrge	r7, [sp, #24]
 800acfa:	1a9f      	sublt	r7, r3, r2
 800acfc:	bfac      	ite	ge
 800acfe:	9b02      	ldrge	r3, [sp, #8]
 800ad00:	2300      	movlt	r3, #0
 800ad02:	e73e      	b.n	800ab82 <_dtoa_r+0x74a>
 800ad04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad06:	9f06      	ldr	r7, [sp, #24]
 800ad08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ad0a:	e745      	b.n	800ab98 <_dtoa_r+0x760>
 800ad0c:	3fe00000 	.word	0x3fe00000
 800ad10:	40240000 	.word	0x40240000
 800ad14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad16:	e76a      	b.n	800abee <_dtoa_r+0x7b6>
 800ad18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	dc19      	bgt.n	800ad52 <_dtoa_r+0x91a>
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	b9bb      	cbnz	r3, 800ad52 <_dtoa_r+0x91a>
 800ad22:	9b05      	ldr	r3, [sp, #20]
 800ad24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad28:	b99b      	cbnz	r3, 800ad52 <_dtoa_r+0x91a>
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad30:	0d1b      	lsrs	r3, r3, #20
 800ad32:	051b      	lsls	r3, r3, #20
 800ad34:	b183      	cbz	r3, 800ad58 <_dtoa_r+0x920>
 800ad36:	f04f 0801 	mov.w	r8, #1
 800ad3a:	9b06      	ldr	r3, [sp, #24]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	9306      	str	r3, [sp, #24]
 800ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad42:	3301      	adds	r3, #1
 800ad44:	9309      	str	r3, [sp, #36]	; 0x24
 800ad46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f47f af6a 	bne.w	800ac22 <_dtoa_r+0x7ea>
 800ad4e:	2001      	movs	r0, #1
 800ad50:	e76f      	b.n	800ac32 <_dtoa_r+0x7fa>
 800ad52:	f04f 0800 	mov.w	r8, #0
 800ad56:	e7f6      	b.n	800ad46 <_dtoa_r+0x90e>
 800ad58:	4698      	mov	r8, r3
 800ad5a:	e7f4      	b.n	800ad46 <_dtoa_r+0x90e>
 800ad5c:	f43f af7d 	beq.w	800ac5a <_dtoa_r+0x822>
 800ad60:	4618      	mov	r0, r3
 800ad62:	301c      	adds	r0, #28
 800ad64:	e772      	b.n	800ac4c <_dtoa_r+0x814>
 800ad66:	9b02      	ldr	r3, [sp, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc36      	bgt.n	800adda <_dtoa_r+0x9a2>
 800ad6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	dd33      	ble.n	800adda <_dtoa_r+0x9a2>
 800ad72:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ad76:	f1bb 0f00 	cmp.w	fp, #0
 800ad7a:	d10d      	bne.n	800ad98 <_dtoa_r+0x960>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	465b      	mov	r3, fp
 800ad80:	2205      	movs	r2, #5
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 fd48 	bl	800b818 <__multadd>
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	f000 ffa5 	bl	800bcdc <__mcmp>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f73f adb6 	bgt.w	800a904 <_dtoa_r+0x4cc>
 800ad98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad9a:	9f08      	ldr	r7, [sp, #32]
 800ad9c:	ea6f 0903 	mvn.w	r9, r3
 800ada0:	f04f 0800 	mov.w	r8, #0
 800ada4:	4621      	mov	r1, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 fd14 	bl	800b7d4 <_Bfree>
 800adac:	2e00      	cmp	r6, #0
 800adae:	f43f aea4 	beq.w	800aafa <_dtoa_r+0x6c2>
 800adb2:	f1b8 0f00 	cmp.w	r8, #0
 800adb6:	d005      	beq.n	800adc4 <_dtoa_r+0x98c>
 800adb8:	45b0      	cmp	r8, r6
 800adba:	d003      	beq.n	800adc4 <_dtoa_r+0x98c>
 800adbc:	4641      	mov	r1, r8
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 fd08 	bl	800b7d4 <_Bfree>
 800adc4:	4631      	mov	r1, r6
 800adc6:	4628      	mov	r0, r5
 800adc8:	f000 fd04 	bl	800b7d4 <_Bfree>
 800adcc:	e695      	b.n	800aafa <_dtoa_r+0x6c2>
 800adce:	2400      	movs	r4, #0
 800add0:	4626      	mov	r6, r4
 800add2:	e7e1      	b.n	800ad98 <_dtoa_r+0x960>
 800add4:	46c1      	mov	r9, r8
 800add6:	4626      	mov	r6, r4
 800add8:	e594      	b.n	800a904 <_dtoa_r+0x4cc>
 800adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800addc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80fc 	beq.w	800afde <_dtoa_r+0xba6>
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	dd05      	ble.n	800adf6 <_dtoa_r+0x9be>
 800adea:	4631      	mov	r1, r6
 800adec:	463a      	mov	r2, r7
 800adee:	4628      	mov	r0, r5
 800adf0:	f000 ff08 	bl	800bc04 <__lshift>
 800adf4:	4606      	mov	r6, r0
 800adf6:	f1b8 0f00 	cmp.w	r8, #0
 800adfa:	d05c      	beq.n	800aeb6 <_dtoa_r+0xa7e>
 800adfc:	4628      	mov	r0, r5
 800adfe:	6871      	ldr	r1, [r6, #4]
 800ae00:	f000 fca8 	bl	800b754 <_Balloc>
 800ae04:	4607      	mov	r7, r0
 800ae06:	b928      	cbnz	r0, 800ae14 <_dtoa_r+0x9dc>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ae0e:	4b7e      	ldr	r3, [pc, #504]	; (800b008 <_dtoa_r+0xbd0>)
 800ae10:	f7ff bb26 	b.w	800a460 <_dtoa_r+0x28>
 800ae14:	6932      	ldr	r2, [r6, #16]
 800ae16:	f106 010c 	add.w	r1, r6, #12
 800ae1a:	3202      	adds	r2, #2
 800ae1c:	0092      	lsls	r2, r2, #2
 800ae1e:	300c      	adds	r0, #12
 800ae20:	f000 fc8a 	bl	800b738 <memcpy>
 800ae24:	2201      	movs	r2, #1
 800ae26:	4639      	mov	r1, r7
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f000 feeb 	bl	800bc04 <__lshift>
 800ae2e:	46b0      	mov	r8, r6
 800ae30:	4606      	mov	r6, r0
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	3301      	adds	r3, #1
 800ae36:	9302      	str	r3, [sp, #8]
 800ae38:	9b08      	ldr	r3, [sp, #32]
 800ae3a:	445b      	add	r3, fp
 800ae3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	9309      	str	r3, [sp, #36]	; 0x24
 800ae46:	9b02      	ldr	r3, [sp, #8]
 800ae48:	4621      	mov	r1, r4
 800ae4a:	4650      	mov	r0, sl
 800ae4c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae50:	f7ff fa64 	bl	800a31c <quorem>
 800ae54:	4603      	mov	r3, r0
 800ae56:	4641      	mov	r1, r8
 800ae58:	3330      	adds	r3, #48	; 0x30
 800ae5a:	9004      	str	r0, [sp, #16]
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae60:	f000 ff3c 	bl	800bcdc <__mcmp>
 800ae64:	4632      	mov	r2, r6
 800ae66:	9006      	str	r0, [sp, #24]
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f000 ff52 	bl	800bd14 <__mdiff>
 800ae70:	68c2      	ldr	r2, [r0, #12]
 800ae72:	4607      	mov	r7, r0
 800ae74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae76:	bb02      	cbnz	r2, 800aeba <_dtoa_r+0xa82>
 800ae78:	4601      	mov	r1, r0
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	f000 ff2e 	bl	800bcdc <__mcmp>
 800ae80:	4602      	mov	r2, r0
 800ae82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae84:	4639      	mov	r1, r7
 800ae86:	4628      	mov	r0, r5
 800ae88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ae8c:	f000 fca2 	bl	800b7d4 <_Bfree>
 800ae90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae94:	9f02      	ldr	r7, [sp, #8]
 800ae96:	ea43 0102 	orr.w	r1, r3, r2
 800ae9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9c:	430b      	orrs	r3, r1
 800ae9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea0:	d10d      	bne.n	800aebe <_dtoa_r+0xa86>
 800aea2:	2b39      	cmp	r3, #57	; 0x39
 800aea4:	d027      	beq.n	800aef6 <_dtoa_r+0xabe>
 800aea6:	9a06      	ldr	r2, [sp, #24]
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	dd01      	ble.n	800aeb0 <_dtoa_r+0xa78>
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	3331      	adds	r3, #49	; 0x31
 800aeb0:	f88b 3000 	strb.w	r3, [fp]
 800aeb4:	e776      	b.n	800ada4 <_dtoa_r+0x96c>
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	e7b9      	b.n	800ae2e <_dtoa_r+0x9f6>
 800aeba:	2201      	movs	r2, #1
 800aebc:	e7e2      	b.n	800ae84 <_dtoa_r+0xa4c>
 800aebe:	9906      	ldr	r1, [sp, #24]
 800aec0:	2900      	cmp	r1, #0
 800aec2:	db04      	blt.n	800aece <_dtoa_r+0xa96>
 800aec4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800aec6:	4301      	orrs	r1, r0
 800aec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeca:	4301      	orrs	r1, r0
 800aecc:	d120      	bne.n	800af10 <_dtoa_r+0xad8>
 800aece:	2a00      	cmp	r2, #0
 800aed0:	ddee      	ble.n	800aeb0 <_dtoa_r+0xa78>
 800aed2:	4651      	mov	r1, sl
 800aed4:	2201      	movs	r2, #1
 800aed6:	4628      	mov	r0, r5
 800aed8:	9302      	str	r3, [sp, #8]
 800aeda:	f000 fe93 	bl	800bc04 <__lshift>
 800aede:	4621      	mov	r1, r4
 800aee0:	4682      	mov	sl, r0
 800aee2:	f000 fefb 	bl	800bcdc <__mcmp>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	9b02      	ldr	r3, [sp, #8]
 800aeea:	dc02      	bgt.n	800aef2 <_dtoa_r+0xaba>
 800aeec:	d1e0      	bne.n	800aeb0 <_dtoa_r+0xa78>
 800aeee:	07da      	lsls	r2, r3, #31
 800aef0:	d5de      	bpl.n	800aeb0 <_dtoa_r+0xa78>
 800aef2:	2b39      	cmp	r3, #57	; 0x39
 800aef4:	d1da      	bne.n	800aeac <_dtoa_r+0xa74>
 800aef6:	2339      	movs	r3, #57	; 0x39
 800aef8:	f88b 3000 	strb.w	r3, [fp]
 800aefc:	463b      	mov	r3, r7
 800aefe:	461f      	mov	r7, r3
 800af00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800af04:	3b01      	subs	r3, #1
 800af06:	2a39      	cmp	r2, #57	; 0x39
 800af08:	d050      	beq.n	800afac <_dtoa_r+0xb74>
 800af0a:	3201      	adds	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	e749      	b.n	800ada4 <_dtoa_r+0x96c>
 800af10:	2a00      	cmp	r2, #0
 800af12:	dd03      	ble.n	800af1c <_dtoa_r+0xae4>
 800af14:	2b39      	cmp	r3, #57	; 0x39
 800af16:	d0ee      	beq.n	800aef6 <_dtoa_r+0xabe>
 800af18:	3301      	adds	r3, #1
 800af1a:	e7c9      	b.n	800aeb0 <_dtoa_r+0xa78>
 800af1c:	9a02      	ldr	r2, [sp, #8]
 800af1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af20:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af24:	428a      	cmp	r2, r1
 800af26:	d02a      	beq.n	800af7e <_dtoa_r+0xb46>
 800af28:	4651      	mov	r1, sl
 800af2a:	2300      	movs	r3, #0
 800af2c:	220a      	movs	r2, #10
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 fc72 	bl	800b818 <__multadd>
 800af34:	45b0      	cmp	r8, r6
 800af36:	4682      	mov	sl, r0
 800af38:	f04f 0300 	mov.w	r3, #0
 800af3c:	f04f 020a 	mov.w	r2, #10
 800af40:	4641      	mov	r1, r8
 800af42:	4628      	mov	r0, r5
 800af44:	d107      	bne.n	800af56 <_dtoa_r+0xb1e>
 800af46:	f000 fc67 	bl	800b818 <__multadd>
 800af4a:	4680      	mov	r8, r0
 800af4c:	4606      	mov	r6, r0
 800af4e:	9b02      	ldr	r3, [sp, #8]
 800af50:	3301      	adds	r3, #1
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	e777      	b.n	800ae46 <_dtoa_r+0xa0e>
 800af56:	f000 fc5f 	bl	800b818 <__multadd>
 800af5a:	4631      	mov	r1, r6
 800af5c:	4680      	mov	r8, r0
 800af5e:	2300      	movs	r3, #0
 800af60:	220a      	movs	r2, #10
 800af62:	4628      	mov	r0, r5
 800af64:	f000 fc58 	bl	800b818 <__multadd>
 800af68:	4606      	mov	r6, r0
 800af6a:	e7f0      	b.n	800af4e <_dtoa_r+0xb16>
 800af6c:	f1bb 0f00 	cmp.w	fp, #0
 800af70:	bfcc      	ite	gt
 800af72:	465f      	movgt	r7, fp
 800af74:	2701      	movle	r7, #1
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	9a08      	ldr	r2, [sp, #32]
 800af7c:	4417      	add	r7, r2
 800af7e:	4651      	mov	r1, sl
 800af80:	2201      	movs	r2, #1
 800af82:	4628      	mov	r0, r5
 800af84:	9302      	str	r3, [sp, #8]
 800af86:	f000 fe3d 	bl	800bc04 <__lshift>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4682      	mov	sl, r0
 800af8e:	f000 fea5 	bl	800bcdc <__mcmp>
 800af92:	2800      	cmp	r0, #0
 800af94:	dcb2      	bgt.n	800aefc <_dtoa_r+0xac4>
 800af96:	d102      	bne.n	800af9e <_dtoa_r+0xb66>
 800af98:	9b02      	ldr	r3, [sp, #8]
 800af9a:	07db      	lsls	r3, r3, #31
 800af9c:	d4ae      	bmi.n	800aefc <_dtoa_r+0xac4>
 800af9e:	463b      	mov	r3, r7
 800afa0:	461f      	mov	r7, r3
 800afa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afa6:	2a30      	cmp	r2, #48	; 0x30
 800afa8:	d0fa      	beq.n	800afa0 <_dtoa_r+0xb68>
 800afaa:	e6fb      	b.n	800ada4 <_dtoa_r+0x96c>
 800afac:	9a08      	ldr	r2, [sp, #32]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d1a5      	bne.n	800aefe <_dtoa_r+0xac6>
 800afb2:	2331      	movs	r3, #49	; 0x31
 800afb4:	f109 0901 	add.w	r9, r9, #1
 800afb8:	7013      	strb	r3, [r2, #0]
 800afba:	e6f3      	b.n	800ada4 <_dtoa_r+0x96c>
 800afbc:	4b13      	ldr	r3, [pc, #76]	; (800b00c <_dtoa_r+0xbd4>)
 800afbe:	f7ff baa7 	b.w	800a510 <_dtoa_r+0xd8>
 800afc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f47f aa80 	bne.w	800a4ca <_dtoa_r+0x92>
 800afca:	4b11      	ldr	r3, [pc, #68]	; (800b010 <_dtoa_r+0xbd8>)
 800afcc:	f7ff baa0 	b.w	800a510 <_dtoa_r+0xd8>
 800afd0:	f1bb 0f00 	cmp.w	fp, #0
 800afd4:	dc03      	bgt.n	800afde <_dtoa_r+0xba6>
 800afd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afd8:	2b02      	cmp	r3, #2
 800afda:	f73f aecc 	bgt.w	800ad76 <_dtoa_r+0x93e>
 800afde:	9f08      	ldr	r7, [sp, #32]
 800afe0:	4621      	mov	r1, r4
 800afe2:	4650      	mov	r0, sl
 800afe4:	f7ff f99a 	bl	800a31c <quorem>
 800afe8:	9a08      	ldr	r2, [sp, #32]
 800afea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afee:	f807 3b01 	strb.w	r3, [r7], #1
 800aff2:	1aba      	subs	r2, r7, r2
 800aff4:	4593      	cmp	fp, r2
 800aff6:	ddb9      	ble.n	800af6c <_dtoa_r+0xb34>
 800aff8:	4651      	mov	r1, sl
 800affa:	2300      	movs	r3, #0
 800affc:	220a      	movs	r2, #10
 800affe:	4628      	mov	r0, r5
 800b000:	f000 fc0a 	bl	800b818 <__multadd>
 800b004:	4682      	mov	sl, r0
 800b006:	e7eb      	b.n	800afe0 <_dtoa_r+0xba8>
 800b008:	0800d6cc 	.word	0x0800d6cc
 800b00c:	0800d4cc 	.word	0x0800d4cc
 800b010:	0800d649 	.word	0x0800d649

0800b014 <rshift>:
 800b014:	6903      	ldr	r3, [r0, #16]
 800b016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b01a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b01e:	f100 0414 	add.w	r4, r0, #20
 800b022:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b026:	dd46      	ble.n	800b0b6 <rshift+0xa2>
 800b028:	f011 011f 	ands.w	r1, r1, #31
 800b02c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b030:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b034:	d10c      	bne.n	800b050 <rshift+0x3c>
 800b036:	4629      	mov	r1, r5
 800b038:	f100 0710 	add.w	r7, r0, #16
 800b03c:	42b1      	cmp	r1, r6
 800b03e:	d335      	bcc.n	800b0ac <rshift+0x98>
 800b040:	1a9b      	subs	r3, r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	1eea      	subs	r2, r5, #3
 800b046:	4296      	cmp	r6, r2
 800b048:	bf38      	it	cc
 800b04a:	2300      	movcc	r3, #0
 800b04c:	4423      	add	r3, r4
 800b04e:	e015      	b.n	800b07c <rshift+0x68>
 800b050:	46a1      	mov	r9, r4
 800b052:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b056:	f1c1 0820 	rsb	r8, r1, #32
 800b05a:	40cf      	lsrs	r7, r1
 800b05c:	f105 0e04 	add.w	lr, r5, #4
 800b060:	4576      	cmp	r6, lr
 800b062:	46f4      	mov	ip, lr
 800b064:	d816      	bhi.n	800b094 <rshift+0x80>
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	009a      	lsls	r2, r3, #2
 800b06a:	3a04      	subs	r2, #4
 800b06c:	3501      	adds	r5, #1
 800b06e:	42ae      	cmp	r6, r5
 800b070:	bf38      	it	cc
 800b072:	2200      	movcc	r2, #0
 800b074:	18a3      	adds	r3, r4, r2
 800b076:	50a7      	str	r7, [r4, r2]
 800b078:	b107      	cbz	r7, 800b07c <rshift+0x68>
 800b07a:	3304      	adds	r3, #4
 800b07c:	42a3      	cmp	r3, r4
 800b07e:	eba3 0204 	sub.w	r2, r3, r4
 800b082:	bf08      	it	eq
 800b084:	2300      	moveq	r3, #0
 800b086:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b08a:	6102      	str	r2, [r0, #16]
 800b08c:	bf08      	it	eq
 800b08e:	6143      	streq	r3, [r0, #20]
 800b090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b094:	f8dc c000 	ldr.w	ip, [ip]
 800b098:	fa0c fc08 	lsl.w	ip, ip, r8
 800b09c:	ea4c 0707 	orr.w	r7, ip, r7
 800b0a0:	f849 7b04 	str.w	r7, [r9], #4
 800b0a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0a8:	40cf      	lsrs	r7, r1
 800b0aa:	e7d9      	b.n	800b060 <rshift+0x4c>
 800b0ac:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0b0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0b4:	e7c2      	b.n	800b03c <rshift+0x28>
 800b0b6:	4623      	mov	r3, r4
 800b0b8:	e7e0      	b.n	800b07c <rshift+0x68>

0800b0ba <__hexdig_fun>:
 800b0ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0be:	2b09      	cmp	r3, #9
 800b0c0:	d802      	bhi.n	800b0c8 <__hexdig_fun+0xe>
 800b0c2:	3820      	subs	r0, #32
 800b0c4:	b2c0      	uxtb	r0, r0
 800b0c6:	4770      	bx	lr
 800b0c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0cc:	2b05      	cmp	r3, #5
 800b0ce:	d801      	bhi.n	800b0d4 <__hexdig_fun+0x1a>
 800b0d0:	3847      	subs	r0, #71	; 0x47
 800b0d2:	e7f7      	b.n	800b0c4 <__hexdig_fun+0xa>
 800b0d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0d8:	2b05      	cmp	r3, #5
 800b0da:	d801      	bhi.n	800b0e0 <__hexdig_fun+0x26>
 800b0dc:	3827      	subs	r0, #39	; 0x27
 800b0de:	e7f1      	b.n	800b0c4 <__hexdig_fun+0xa>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	4770      	bx	lr

0800b0e4 <__gethex>:
 800b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	b08b      	sub	sp, #44	; 0x2c
 800b0ea:	9306      	str	r3, [sp, #24]
 800b0ec:	4bb9      	ldr	r3, [pc, #740]	; (800b3d4 <__gethex+0x2f0>)
 800b0ee:	9002      	str	r0, [sp, #8]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	468b      	mov	fp, r1
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	4690      	mov	r8, r2
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	f7f5 f841 	bl	8000180 <strlen>
 800b0fe:	4682      	mov	sl, r0
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	f8db 2000 	ldr.w	r2, [fp]
 800b106:	4403      	add	r3, r0
 800b108:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b10c:	9307      	str	r3, [sp, #28]
 800b10e:	1c93      	adds	r3, r2, #2
 800b110:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b114:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b118:	32fe      	adds	r2, #254	; 0xfe
 800b11a:	18d1      	adds	r1, r2, r3
 800b11c:	461f      	mov	r7, r3
 800b11e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b122:	9101      	str	r1, [sp, #4]
 800b124:	2830      	cmp	r0, #48	; 0x30
 800b126:	d0f8      	beq.n	800b11a <__gethex+0x36>
 800b128:	f7ff ffc7 	bl	800b0ba <__hexdig_fun>
 800b12c:	4604      	mov	r4, r0
 800b12e:	2800      	cmp	r0, #0
 800b130:	d13a      	bne.n	800b1a8 <__gethex+0xc4>
 800b132:	4652      	mov	r2, sl
 800b134:	4638      	mov	r0, r7
 800b136:	9903      	ldr	r1, [sp, #12]
 800b138:	f001 f9ea 	bl	800c510 <strncmp>
 800b13c:	4605      	mov	r5, r0
 800b13e:	2800      	cmp	r0, #0
 800b140:	d166      	bne.n	800b210 <__gethex+0x12c>
 800b142:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b146:	eb07 060a 	add.w	r6, r7, sl
 800b14a:	f7ff ffb6 	bl	800b0ba <__hexdig_fun>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d060      	beq.n	800b214 <__gethex+0x130>
 800b152:	4633      	mov	r3, r6
 800b154:	7818      	ldrb	r0, [r3, #0]
 800b156:	461f      	mov	r7, r3
 800b158:	2830      	cmp	r0, #48	; 0x30
 800b15a:	f103 0301 	add.w	r3, r3, #1
 800b15e:	d0f9      	beq.n	800b154 <__gethex+0x70>
 800b160:	f7ff ffab 	bl	800b0ba <__hexdig_fun>
 800b164:	2301      	movs	r3, #1
 800b166:	fab0 f480 	clz	r4, r0
 800b16a:	4635      	mov	r5, r6
 800b16c:	0964      	lsrs	r4, r4, #5
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	463a      	mov	r2, r7
 800b172:	4616      	mov	r6, r2
 800b174:	7830      	ldrb	r0, [r6, #0]
 800b176:	3201      	adds	r2, #1
 800b178:	f7ff ff9f 	bl	800b0ba <__hexdig_fun>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d1f8      	bne.n	800b172 <__gethex+0x8e>
 800b180:	4652      	mov	r2, sl
 800b182:	4630      	mov	r0, r6
 800b184:	9903      	ldr	r1, [sp, #12]
 800b186:	f001 f9c3 	bl	800c510 <strncmp>
 800b18a:	b980      	cbnz	r0, 800b1ae <__gethex+0xca>
 800b18c:	b94d      	cbnz	r5, 800b1a2 <__gethex+0xbe>
 800b18e:	eb06 050a 	add.w	r5, r6, sl
 800b192:	462a      	mov	r2, r5
 800b194:	4616      	mov	r6, r2
 800b196:	7830      	ldrb	r0, [r6, #0]
 800b198:	3201      	adds	r2, #1
 800b19a:	f7ff ff8e 	bl	800b0ba <__hexdig_fun>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d1f8      	bne.n	800b194 <__gethex+0xb0>
 800b1a2:	1bad      	subs	r5, r5, r6
 800b1a4:	00ad      	lsls	r5, r5, #2
 800b1a6:	e004      	b.n	800b1b2 <__gethex+0xce>
 800b1a8:	2400      	movs	r4, #0
 800b1aa:	4625      	mov	r5, r4
 800b1ac:	e7e0      	b.n	800b170 <__gethex+0x8c>
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	d1f7      	bne.n	800b1a2 <__gethex+0xbe>
 800b1b2:	7833      	ldrb	r3, [r6, #0]
 800b1b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1b8:	2b50      	cmp	r3, #80	; 0x50
 800b1ba:	d139      	bne.n	800b230 <__gethex+0x14c>
 800b1bc:	7873      	ldrb	r3, [r6, #1]
 800b1be:	2b2b      	cmp	r3, #43	; 0x2b
 800b1c0:	d02a      	beq.n	800b218 <__gethex+0x134>
 800b1c2:	2b2d      	cmp	r3, #45	; 0x2d
 800b1c4:	d02c      	beq.n	800b220 <__gethex+0x13c>
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	1c71      	adds	r1, r6, #1
 800b1cc:	7808      	ldrb	r0, [r1, #0]
 800b1ce:	f7ff ff74 	bl	800b0ba <__hexdig_fun>
 800b1d2:	1e43      	subs	r3, r0, #1
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b18      	cmp	r3, #24
 800b1d8:	d82a      	bhi.n	800b230 <__gethex+0x14c>
 800b1da:	f1a0 0210 	sub.w	r2, r0, #16
 800b1de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1e2:	f7ff ff6a 	bl	800b0ba <__hexdig_fun>
 800b1e6:	1e43      	subs	r3, r0, #1
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b18      	cmp	r3, #24
 800b1ec:	d91b      	bls.n	800b226 <__gethex+0x142>
 800b1ee:	f1b9 0f00 	cmp.w	r9, #0
 800b1f2:	d000      	beq.n	800b1f6 <__gethex+0x112>
 800b1f4:	4252      	negs	r2, r2
 800b1f6:	4415      	add	r5, r2
 800b1f8:	f8cb 1000 	str.w	r1, [fp]
 800b1fc:	b1d4      	cbz	r4, 800b234 <__gethex+0x150>
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	bf14      	ite	ne
 800b204:	2700      	movne	r7, #0
 800b206:	2706      	moveq	r7, #6
 800b208:	4638      	mov	r0, r7
 800b20a:	b00b      	add	sp, #44	; 0x2c
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	463e      	mov	r6, r7
 800b212:	4625      	mov	r5, r4
 800b214:	2401      	movs	r4, #1
 800b216:	e7cc      	b.n	800b1b2 <__gethex+0xce>
 800b218:	f04f 0900 	mov.w	r9, #0
 800b21c:	1cb1      	adds	r1, r6, #2
 800b21e:	e7d5      	b.n	800b1cc <__gethex+0xe8>
 800b220:	f04f 0901 	mov.w	r9, #1
 800b224:	e7fa      	b.n	800b21c <__gethex+0x138>
 800b226:	230a      	movs	r3, #10
 800b228:	fb03 0202 	mla	r2, r3, r2, r0
 800b22c:	3a10      	subs	r2, #16
 800b22e:	e7d6      	b.n	800b1de <__gethex+0xfa>
 800b230:	4631      	mov	r1, r6
 800b232:	e7e1      	b.n	800b1f8 <__gethex+0x114>
 800b234:	4621      	mov	r1, r4
 800b236:	1bf3      	subs	r3, r6, r7
 800b238:	3b01      	subs	r3, #1
 800b23a:	2b07      	cmp	r3, #7
 800b23c:	dc0a      	bgt.n	800b254 <__gethex+0x170>
 800b23e:	9802      	ldr	r0, [sp, #8]
 800b240:	f000 fa88 	bl	800b754 <_Balloc>
 800b244:	4604      	mov	r4, r0
 800b246:	b940      	cbnz	r0, 800b25a <__gethex+0x176>
 800b248:	4602      	mov	r2, r0
 800b24a:	21de      	movs	r1, #222	; 0xde
 800b24c:	4b62      	ldr	r3, [pc, #392]	; (800b3d8 <__gethex+0x2f4>)
 800b24e:	4863      	ldr	r0, [pc, #396]	; (800b3dc <__gethex+0x2f8>)
 800b250:	f001 f97e 	bl	800c550 <__assert_func>
 800b254:	3101      	adds	r1, #1
 800b256:	105b      	asrs	r3, r3, #1
 800b258:	e7ef      	b.n	800b23a <__gethex+0x156>
 800b25a:	f04f 0b00 	mov.w	fp, #0
 800b25e:	f100 0914 	add.w	r9, r0, #20
 800b262:	f1ca 0301 	rsb	r3, sl, #1
 800b266:	f8cd 9010 	str.w	r9, [sp, #16]
 800b26a:	f8cd b004 	str.w	fp, [sp, #4]
 800b26e:	9308      	str	r3, [sp, #32]
 800b270:	42b7      	cmp	r7, r6
 800b272:	d33f      	bcc.n	800b2f4 <__gethex+0x210>
 800b274:	9f04      	ldr	r7, [sp, #16]
 800b276:	9b01      	ldr	r3, [sp, #4]
 800b278:	f847 3b04 	str.w	r3, [r7], #4
 800b27c:	eba7 0709 	sub.w	r7, r7, r9
 800b280:	10bf      	asrs	r7, r7, #2
 800b282:	6127      	str	r7, [r4, #16]
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fb5b 	bl	800b940 <__hi0bits>
 800b28a:	017f      	lsls	r7, r7, #5
 800b28c:	f8d8 6000 	ldr.w	r6, [r8]
 800b290:	1a3f      	subs	r7, r7, r0
 800b292:	42b7      	cmp	r7, r6
 800b294:	dd62      	ble.n	800b35c <__gethex+0x278>
 800b296:	1bbf      	subs	r7, r7, r6
 800b298:	4639      	mov	r1, r7
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 fef1 	bl	800c082 <__any_on>
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	b1a8      	cbz	r0, 800b2d0 <__gethex+0x1ec>
 800b2a4:	f04f 0a01 	mov.w	sl, #1
 800b2a8:	1e7b      	subs	r3, r7, #1
 800b2aa:	1159      	asrs	r1, r3, #5
 800b2ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2b0:	f003 021f 	and.w	r2, r3, #31
 800b2b4:	fa0a f202 	lsl.w	r2, sl, r2
 800b2b8:	420a      	tst	r2, r1
 800b2ba:	d009      	beq.n	800b2d0 <__gethex+0x1ec>
 800b2bc:	4553      	cmp	r3, sl
 800b2be:	dd05      	ble.n	800b2cc <__gethex+0x1e8>
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	1eb9      	subs	r1, r7, #2
 800b2c4:	f000 fedd 	bl	800c082 <__any_on>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d144      	bne.n	800b356 <__gethex+0x272>
 800b2cc:	f04f 0a02 	mov.w	sl, #2
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7ff fe9e 	bl	800b014 <rshift>
 800b2d8:	443d      	add	r5, r7
 800b2da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2de:	42ab      	cmp	r3, r5
 800b2e0:	da4a      	bge.n	800b378 <__gethex+0x294>
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	9802      	ldr	r0, [sp, #8]
 800b2e6:	f000 fa75 	bl	800b7d4 <_Bfree>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2ee:	27a3      	movs	r7, #163	; 0xa3
 800b2f0:	6013      	str	r3, [r2, #0]
 800b2f2:	e789      	b.n	800b208 <__gethex+0x124>
 800b2f4:	1e73      	subs	r3, r6, #1
 800b2f6:	9a07      	ldr	r2, [sp, #28]
 800b2f8:	9305      	str	r3, [sp, #20]
 800b2fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d019      	beq.n	800b336 <__gethex+0x252>
 800b302:	f1bb 0f20 	cmp.w	fp, #32
 800b306:	d107      	bne.n	800b318 <__gethex+0x234>
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	9a01      	ldr	r2, [sp, #4]
 800b30c:	f843 2b04 	str.w	r2, [r3], #4
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	2300      	movs	r3, #0
 800b314:	469b      	mov	fp, r3
 800b316:	9301      	str	r3, [sp, #4]
 800b318:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b31c:	f7ff fecd 	bl	800b0ba <__hexdig_fun>
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	f000 000f 	and.w	r0, r0, #15
 800b326:	fa00 f00b 	lsl.w	r0, r0, fp
 800b32a:	4303      	orrs	r3, r0
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	f10b 0b04 	add.w	fp, fp, #4
 800b332:	9b05      	ldr	r3, [sp, #20]
 800b334:	e00d      	b.n	800b352 <__gethex+0x26e>
 800b336:	9b05      	ldr	r3, [sp, #20]
 800b338:	9a08      	ldr	r2, [sp, #32]
 800b33a:	4413      	add	r3, r2
 800b33c:	42bb      	cmp	r3, r7
 800b33e:	d3e0      	bcc.n	800b302 <__gethex+0x21e>
 800b340:	4618      	mov	r0, r3
 800b342:	4652      	mov	r2, sl
 800b344:	9903      	ldr	r1, [sp, #12]
 800b346:	9309      	str	r3, [sp, #36]	; 0x24
 800b348:	f001 f8e2 	bl	800c510 <strncmp>
 800b34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34e:	2800      	cmp	r0, #0
 800b350:	d1d7      	bne.n	800b302 <__gethex+0x21e>
 800b352:	461e      	mov	r6, r3
 800b354:	e78c      	b.n	800b270 <__gethex+0x18c>
 800b356:	f04f 0a03 	mov.w	sl, #3
 800b35a:	e7b9      	b.n	800b2d0 <__gethex+0x1ec>
 800b35c:	da09      	bge.n	800b372 <__gethex+0x28e>
 800b35e:	1bf7      	subs	r7, r6, r7
 800b360:	4621      	mov	r1, r4
 800b362:	463a      	mov	r2, r7
 800b364:	9802      	ldr	r0, [sp, #8]
 800b366:	f000 fc4d 	bl	800bc04 <__lshift>
 800b36a:	4604      	mov	r4, r0
 800b36c:	1bed      	subs	r5, r5, r7
 800b36e:	f100 0914 	add.w	r9, r0, #20
 800b372:	f04f 0a00 	mov.w	sl, #0
 800b376:	e7b0      	b.n	800b2da <__gethex+0x1f6>
 800b378:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b37c:	42a8      	cmp	r0, r5
 800b37e:	dd71      	ble.n	800b464 <__gethex+0x380>
 800b380:	1b45      	subs	r5, r0, r5
 800b382:	42ae      	cmp	r6, r5
 800b384:	dc34      	bgt.n	800b3f0 <__gethex+0x30c>
 800b386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d028      	beq.n	800b3e0 <__gethex+0x2fc>
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d02a      	beq.n	800b3e8 <__gethex+0x304>
 800b392:	2b01      	cmp	r3, #1
 800b394:	d115      	bne.n	800b3c2 <__gethex+0x2de>
 800b396:	42ae      	cmp	r6, r5
 800b398:	d113      	bne.n	800b3c2 <__gethex+0x2de>
 800b39a:	2e01      	cmp	r6, #1
 800b39c:	d10b      	bne.n	800b3b6 <__gethex+0x2d2>
 800b39e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3a2:	9a06      	ldr	r2, [sp, #24]
 800b3a4:	2762      	movs	r7, #98	; 0x62
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	6123      	str	r3, [r4, #16]
 800b3ac:	f8c9 3000 	str.w	r3, [r9]
 800b3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3b2:	601c      	str	r4, [r3, #0]
 800b3b4:	e728      	b.n	800b208 <__gethex+0x124>
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	1e71      	subs	r1, r6, #1
 800b3ba:	f000 fe62 	bl	800c082 <__any_on>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d1ed      	bne.n	800b39e <__gethex+0x2ba>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	9802      	ldr	r0, [sp, #8]
 800b3c6:	f000 fa05 	bl	800b7d4 <_Bfree>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3ce:	2750      	movs	r7, #80	; 0x50
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	e719      	b.n	800b208 <__gethex+0x124>
 800b3d4:	0800d748 	.word	0x0800d748
 800b3d8:	0800d6cc 	.word	0x0800d6cc
 800b3dc:	0800d6dd 	.word	0x0800d6dd
 800b3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1ed      	bne.n	800b3c2 <__gethex+0x2de>
 800b3e6:	e7da      	b.n	800b39e <__gethex+0x2ba>
 800b3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1d7      	bne.n	800b39e <__gethex+0x2ba>
 800b3ee:	e7e8      	b.n	800b3c2 <__gethex+0x2de>
 800b3f0:	1e6f      	subs	r7, r5, #1
 800b3f2:	f1ba 0f00 	cmp.w	sl, #0
 800b3f6:	d132      	bne.n	800b45e <__gethex+0x37a>
 800b3f8:	b127      	cbz	r7, 800b404 <__gethex+0x320>
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f000 fe40 	bl	800c082 <__any_on>
 800b402:	4682      	mov	sl, r0
 800b404:	2101      	movs	r1, #1
 800b406:	117b      	asrs	r3, r7, #5
 800b408:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b40c:	f007 071f 	and.w	r7, r7, #31
 800b410:	fa01 f707 	lsl.w	r7, r1, r7
 800b414:	421f      	tst	r7, r3
 800b416:	f04f 0702 	mov.w	r7, #2
 800b41a:	4629      	mov	r1, r5
 800b41c:	4620      	mov	r0, r4
 800b41e:	bf18      	it	ne
 800b420:	f04a 0a02 	orrne.w	sl, sl, #2
 800b424:	1b76      	subs	r6, r6, r5
 800b426:	f7ff fdf5 	bl	800b014 <rshift>
 800b42a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b42e:	f1ba 0f00 	cmp.w	sl, #0
 800b432:	d048      	beq.n	800b4c6 <__gethex+0x3e2>
 800b434:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d015      	beq.n	800b468 <__gethex+0x384>
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d017      	beq.n	800b470 <__gethex+0x38c>
 800b440:	2b01      	cmp	r3, #1
 800b442:	d109      	bne.n	800b458 <__gethex+0x374>
 800b444:	f01a 0f02 	tst.w	sl, #2
 800b448:	d006      	beq.n	800b458 <__gethex+0x374>
 800b44a:	f8d9 0000 	ldr.w	r0, [r9]
 800b44e:	ea4a 0a00 	orr.w	sl, sl, r0
 800b452:	f01a 0f01 	tst.w	sl, #1
 800b456:	d10e      	bne.n	800b476 <__gethex+0x392>
 800b458:	f047 0710 	orr.w	r7, r7, #16
 800b45c:	e033      	b.n	800b4c6 <__gethex+0x3e2>
 800b45e:	f04f 0a01 	mov.w	sl, #1
 800b462:	e7cf      	b.n	800b404 <__gethex+0x320>
 800b464:	2701      	movs	r7, #1
 800b466:	e7e2      	b.n	800b42e <__gethex+0x34a>
 800b468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b46a:	f1c3 0301 	rsb	r3, r3, #1
 800b46e:	9315      	str	r3, [sp, #84]	; 0x54
 800b470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f0      	beq.n	800b458 <__gethex+0x374>
 800b476:	f04f 0c00 	mov.w	ip, #0
 800b47a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b47e:	f104 0314 	add.w	r3, r4, #20
 800b482:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b486:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b490:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b494:	d01c      	beq.n	800b4d0 <__gethex+0x3ec>
 800b496:	3201      	adds	r2, #1
 800b498:	6002      	str	r2, [r0, #0]
 800b49a:	2f02      	cmp	r7, #2
 800b49c:	f104 0314 	add.w	r3, r4, #20
 800b4a0:	d13d      	bne.n	800b51e <__gethex+0x43a>
 800b4a2:	f8d8 2000 	ldr.w	r2, [r8]
 800b4a6:	3a01      	subs	r2, #1
 800b4a8:	42b2      	cmp	r2, r6
 800b4aa:	d10a      	bne.n	800b4c2 <__gethex+0x3de>
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	1171      	asrs	r1, r6, #5
 800b4b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4b4:	f006 061f 	and.w	r6, r6, #31
 800b4b8:	fa02 f606 	lsl.w	r6, r2, r6
 800b4bc:	421e      	tst	r6, r3
 800b4be:	bf18      	it	ne
 800b4c0:	4617      	movne	r7, r2
 800b4c2:	f047 0720 	orr.w	r7, r7, #32
 800b4c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4c8:	601c      	str	r4, [r3, #0]
 800b4ca:	9b06      	ldr	r3, [sp, #24]
 800b4cc:	601d      	str	r5, [r3, #0]
 800b4ce:	e69b      	b.n	800b208 <__gethex+0x124>
 800b4d0:	4299      	cmp	r1, r3
 800b4d2:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4d6:	d8d8      	bhi.n	800b48a <__gethex+0x3a6>
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	459b      	cmp	fp, r3
 800b4dc:	db17      	blt.n	800b50e <__gethex+0x42a>
 800b4de:	6861      	ldr	r1, [r4, #4]
 800b4e0:	9802      	ldr	r0, [sp, #8]
 800b4e2:	3101      	adds	r1, #1
 800b4e4:	f000 f936 	bl	800b754 <_Balloc>
 800b4e8:	4681      	mov	r9, r0
 800b4ea:	b918      	cbnz	r0, 800b4f4 <__gethex+0x410>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	2184      	movs	r1, #132	; 0x84
 800b4f0:	4b19      	ldr	r3, [pc, #100]	; (800b558 <__gethex+0x474>)
 800b4f2:	e6ac      	b.n	800b24e <__gethex+0x16a>
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	f104 010c 	add.w	r1, r4, #12
 800b4fa:	3202      	adds	r2, #2
 800b4fc:	0092      	lsls	r2, r2, #2
 800b4fe:	300c      	adds	r0, #12
 800b500:	f000 f91a 	bl	800b738 <memcpy>
 800b504:	4621      	mov	r1, r4
 800b506:	9802      	ldr	r0, [sp, #8]
 800b508:	f000 f964 	bl	800b7d4 <_Bfree>
 800b50c:	464c      	mov	r4, r9
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	6122      	str	r2, [r4, #16]
 800b514:	2201      	movs	r2, #1
 800b516:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b51a:	615a      	str	r2, [r3, #20]
 800b51c:	e7bd      	b.n	800b49a <__gethex+0x3b6>
 800b51e:	6922      	ldr	r2, [r4, #16]
 800b520:	455a      	cmp	r2, fp
 800b522:	dd0b      	ble.n	800b53c <__gethex+0x458>
 800b524:	2101      	movs	r1, #1
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff fd74 	bl	800b014 <rshift>
 800b52c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b530:	3501      	adds	r5, #1
 800b532:	42ab      	cmp	r3, r5
 800b534:	f6ff aed5 	blt.w	800b2e2 <__gethex+0x1fe>
 800b538:	2701      	movs	r7, #1
 800b53a:	e7c2      	b.n	800b4c2 <__gethex+0x3de>
 800b53c:	f016 061f 	ands.w	r6, r6, #31
 800b540:	d0fa      	beq.n	800b538 <__gethex+0x454>
 800b542:	449a      	add	sl, r3
 800b544:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b548:	f000 f9fa 	bl	800b940 <__hi0bits>
 800b54c:	f1c6 0620 	rsb	r6, r6, #32
 800b550:	42b0      	cmp	r0, r6
 800b552:	dbe7      	blt.n	800b524 <__gethex+0x440>
 800b554:	e7f0      	b.n	800b538 <__gethex+0x454>
 800b556:	bf00      	nop
 800b558:	0800d6cc 	.word	0x0800d6cc

0800b55c <L_shift>:
 800b55c:	f1c2 0208 	rsb	r2, r2, #8
 800b560:	0092      	lsls	r2, r2, #2
 800b562:	b570      	push	{r4, r5, r6, lr}
 800b564:	f1c2 0620 	rsb	r6, r2, #32
 800b568:	6843      	ldr	r3, [r0, #4]
 800b56a:	6804      	ldr	r4, [r0, #0]
 800b56c:	fa03 f506 	lsl.w	r5, r3, r6
 800b570:	432c      	orrs	r4, r5
 800b572:	40d3      	lsrs	r3, r2
 800b574:	6004      	str	r4, [r0, #0]
 800b576:	f840 3f04 	str.w	r3, [r0, #4]!
 800b57a:	4288      	cmp	r0, r1
 800b57c:	d3f4      	bcc.n	800b568 <L_shift+0xc>
 800b57e:	bd70      	pop	{r4, r5, r6, pc}

0800b580 <__match>:
 800b580:	b530      	push	{r4, r5, lr}
 800b582:	6803      	ldr	r3, [r0, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b58a:	b914      	cbnz	r4, 800b592 <__match+0x12>
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	2001      	movs	r0, #1
 800b590:	bd30      	pop	{r4, r5, pc}
 800b592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b596:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b59a:	2d19      	cmp	r5, #25
 800b59c:	bf98      	it	ls
 800b59e:	3220      	addls	r2, #32
 800b5a0:	42a2      	cmp	r2, r4
 800b5a2:	d0f0      	beq.n	800b586 <__match+0x6>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e7f3      	b.n	800b590 <__match+0x10>

0800b5a8 <__hexnan>:
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	680b      	ldr	r3, [r1, #0]
 800b5b0:	4682      	mov	sl, r0
 800b5b2:	115e      	asrs	r6, r3, #5
 800b5b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5b8:	f013 031f 	ands.w	r3, r3, #31
 800b5bc:	bf18      	it	ne
 800b5be:	3604      	addne	r6, #4
 800b5c0:	1f37      	subs	r7, r6, #4
 800b5c2:	4690      	mov	r8, r2
 800b5c4:	46b9      	mov	r9, r7
 800b5c6:	463c      	mov	r4, r7
 800b5c8:	46ab      	mov	fp, r5
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	6801      	ldr	r1, [r0, #0]
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5d4:	9502      	str	r5, [sp, #8]
 800b5d6:	784a      	ldrb	r2, [r1, #1]
 800b5d8:	1c4b      	adds	r3, r1, #1
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	b342      	cbz	r2, 800b630 <__hexnan+0x88>
 800b5de:	4610      	mov	r0, r2
 800b5e0:	9105      	str	r1, [sp, #20]
 800b5e2:	9204      	str	r2, [sp, #16]
 800b5e4:	f7ff fd69 	bl	800b0ba <__hexdig_fun>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d14f      	bne.n	800b68c <__hexnan+0xe4>
 800b5ec:	9a04      	ldr	r2, [sp, #16]
 800b5ee:	9905      	ldr	r1, [sp, #20]
 800b5f0:	2a20      	cmp	r2, #32
 800b5f2:	d818      	bhi.n	800b626 <__hexnan+0x7e>
 800b5f4:	9b02      	ldr	r3, [sp, #8]
 800b5f6:	459b      	cmp	fp, r3
 800b5f8:	dd13      	ble.n	800b622 <__hexnan+0x7a>
 800b5fa:	454c      	cmp	r4, r9
 800b5fc:	d206      	bcs.n	800b60c <__hexnan+0x64>
 800b5fe:	2d07      	cmp	r5, #7
 800b600:	dc04      	bgt.n	800b60c <__hexnan+0x64>
 800b602:	462a      	mov	r2, r5
 800b604:	4649      	mov	r1, r9
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff ffa8 	bl	800b55c <L_shift>
 800b60c:	4544      	cmp	r4, r8
 800b60e:	d950      	bls.n	800b6b2 <__hexnan+0x10a>
 800b610:	2300      	movs	r3, #0
 800b612:	f1a4 0904 	sub.w	r9, r4, #4
 800b616:	f844 3c04 	str.w	r3, [r4, #-4]
 800b61a:	461d      	mov	r5, r3
 800b61c:	464c      	mov	r4, r9
 800b61e:	f8cd b008 	str.w	fp, [sp, #8]
 800b622:	9903      	ldr	r1, [sp, #12]
 800b624:	e7d7      	b.n	800b5d6 <__hexnan+0x2e>
 800b626:	2a29      	cmp	r2, #41	; 0x29
 800b628:	d156      	bne.n	800b6d8 <__hexnan+0x130>
 800b62a:	3102      	adds	r1, #2
 800b62c:	f8ca 1000 	str.w	r1, [sl]
 800b630:	f1bb 0f00 	cmp.w	fp, #0
 800b634:	d050      	beq.n	800b6d8 <__hexnan+0x130>
 800b636:	454c      	cmp	r4, r9
 800b638:	d206      	bcs.n	800b648 <__hexnan+0xa0>
 800b63a:	2d07      	cmp	r5, #7
 800b63c:	dc04      	bgt.n	800b648 <__hexnan+0xa0>
 800b63e:	462a      	mov	r2, r5
 800b640:	4649      	mov	r1, r9
 800b642:	4620      	mov	r0, r4
 800b644:	f7ff ff8a 	bl	800b55c <L_shift>
 800b648:	4544      	cmp	r4, r8
 800b64a:	d934      	bls.n	800b6b6 <__hexnan+0x10e>
 800b64c:	4623      	mov	r3, r4
 800b64e:	f1a8 0204 	sub.w	r2, r8, #4
 800b652:	f853 1b04 	ldr.w	r1, [r3], #4
 800b656:	429f      	cmp	r7, r3
 800b658:	f842 1f04 	str.w	r1, [r2, #4]!
 800b65c:	d2f9      	bcs.n	800b652 <__hexnan+0xaa>
 800b65e:	1b3b      	subs	r3, r7, r4
 800b660:	f023 0303 	bic.w	r3, r3, #3
 800b664:	3304      	adds	r3, #4
 800b666:	3401      	adds	r4, #1
 800b668:	3e03      	subs	r6, #3
 800b66a:	42b4      	cmp	r4, r6
 800b66c:	bf88      	it	hi
 800b66e:	2304      	movhi	r3, #4
 800b670:	2200      	movs	r2, #0
 800b672:	4443      	add	r3, r8
 800b674:	f843 2b04 	str.w	r2, [r3], #4
 800b678:	429f      	cmp	r7, r3
 800b67a:	d2fb      	bcs.n	800b674 <__hexnan+0xcc>
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	b91b      	cbnz	r3, 800b688 <__hexnan+0xe0>
 800b680:	4547      	cmp	r7, r8
 800b682:	d127      	bne.n	800b6d4 <__hexnan+0x12c>
 800b684:	2301      	movs	r3, #1
 800b686:	603b      	str	r3, [r7, #0]
 800b688:	2005      	movs	r0, #5
 800b68a:	e026      	b.n	800b6da <__hexnan+0x132>
 800b68c:	3501      	adds	r5, #1
 800b68e:	2d08      	cmp	r5, #8
 800b690:	f10b 0b01 	add.w	fp, fp, #1
 800b694:	dd06      	ble.n	800b6a4 <__hexnan+0xfc>
 800b696:	4544      	cmp	r4, r8
 800b698:	d9c3      	bls.n	800b622 <__hexnan+0x7a>
 800b69a:	2300      	movs	r3, #0
 800b69c:	2501      	movs	r5, #1
 800b69e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6a2:	3c04      	subs	r4, #4
 800b6a4:	6822      	ldr	r2, [r4, #0]
 800b6a6:	f000 000f 	and.w	r0, r0, #15
 800b6aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6ae:	6022      	str	r2, [r4, #0]
 800b6b0:	e7b7      	b.n	800b622 <__hexnan+0x7a>
 800b6b2:	2508      	movs	r5, #8
 800b6b4:	e7b5      	b.n	800b622 <__hexnan+0x7a>
 800b6b6:	9b01      	ldr	r3, [sp, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0df      	beq.n	800b67c <__hexnan+0xd4>
 800b6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c0:	f1c3 0320 	rsb	r3, r3, #32
 800b6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6cc:	401a      	ands	r2, r3
 800b6ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6d2:	e7d3      	b.n	800b67c <__hexnan+0xd4>
 800b6d4:	3f04      	subs	r7, #4
 800b6d6:	e7d1      	b.n	800b67c <__hexnan+0xd4>
 800b6d8:	2004      	movs	r0, #4
 800b6da:	b007      	add	sp, #28
 800b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6e0 <_localeconv_r>:
 800b6e0:	4800      	ldr	r0, [pc, #0]	; (800b6e4 <_localeconv_r+0x4>)
 800b6e2:	4770      	bx	lr
 800b6e4:	20000164 	.word	0x20000164

0800b6e8 <malloc>:
 800b6e8:	4b02      	ldr	r3, [pc, #8]	; (800b6f4 <malloc+0xc>)
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	f000 bd43 	b.w	800c178 <_malloc_r>
 800b6f2:	bf00      	nop
 800b6f4:	2000000c 	.word	0x2000000c

0800b6f8 <__ascii_mbtowc>:
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	b901      	cbnz	r1, 800b6fe <__ascii_mbtowc+0x6>
 800b6fc:	a901      	add	r1, sp, #4
 800b6fe:	b142      	cbz	r2, 800b712 <__ascii_mbtowc+0x1a>
 800b700:	b14b      	cbz	r3, 800b716 <__ascii_mbtowc+0x1e>
 800b702:	7813      	ldrb	r3, [r2, #0]
 800b704:	600b      	str	r3, [r1, #0]
 800b706:	7812      	ldrb	r2, [r2, #0]
 800b708:	1e10      	subs	r0, r2, #0
 800b70a:	bf18      	it	ne
 800b70c:	2001      	movne	r0, #1
 800b70e:	b002      	add	sp, #8
 800b710:	4770      	bx	lr
 800b712:	4610      	mov	r0, r2
 800b714:	e7fb      	b.n	800b70e <__ascii_mbtowc+0x16>
 800b716:	f06f 0001 	mvn.w	r0, #1
 800b71a:	e7f8      	b.n	800b70e <__ascii_mbtowc+0x16>

0800b71c <memchr>:
 800b71c:	4603      	mov	r3, r0
 800b71e:	b510      	push	{r4, lr}
 800b720:	b2c9      	uxtb	r1, r1
 800b722:	4402      	add	r2, r0
 800b724:	4293      	cmp	r3, r2
 800b726:	4618      	mov	r0, r3
 800b728:	d101      	bne.n	800b72e <memchr+0x12>
 800b72a:	2000      	movs	r0, #0
 800b72c:	e003      	b.n	800b736 <memchr+0x1a>
 800b72e:	7804      	ldrb	r4, [r0, #0]
 800b730:	3301      	adds	r3, #1
 800b732:	428c      	cmp	r4, r1
 800b734:	d1f6      	bne.n	800b724 <memchr+0x8>
 800b736:	bd10      	pop	{r4, pc}

0800b738 <memcpy>:
 800b738:	440a      	add	r2, r1
 800b73a:	4291      	cmp	r1, r2
 800b73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b740:	d100      	bne.n	800b744 <memcpy+0xc>
 800b742:	4770      	bx	lr
 800b744:	b510      	push	{r4, lr}
 800b746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b74a:	4291      	cmp	r1, r2
 800b74c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b750:	d1f9      	bne.n	800b746 <memcpy+0xe>
 800b752:	bd10      	pop	{r4, pc}

0800b754 <_Balloc>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	b976      	cbnz	r6, 800b77c <_Balloc+0x28>
 800b75e:	2010      	movs	r0, #16
 800b760:	f7ff ffc2 	bl	800b6e8 <malloc>
 800b764:	4602      	mov	r2, r0
 800b766:	6260      	str	r0, [r4, #36]	; 0x24
 800b768:	b920      	cbnz	r0, 800b774 <_Balloc+0x20>
 800b76a:	2166      	movs	r1, #102	; 0x66
 800b76c:	4b17      	ldr	r3, [pc, #92]	; (800b7cc <_Balloc+0x78>)
 800b76e:	4818      	ldr	r0, [pc, #96]	; (800b7d0 <_Balloc+0x7c>)
 800b770:	f000 feee 	bl	800c550 <__assert_func>
 800b774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b778:	6006      	str	r6, [r0, #0]
 800b77a:	60c6      	str	r6, [r0, #12]
 800b77c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b77e:	68f3      	ldr	r3, [r6, #12]
 800b780:	b183      	cbz	r3, 800b7a4 <_Balloc+0x50>
 800b782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b78a:	b9b8      	cbnz	r0, 800b7bc <_Balloc+0x68>
 800b78c:	2101      	movs	r1, #1
 800b78e:	fa01 f605 	lsl.w	r6, r1, r5
 800b792:	1d72      	adds	r2, r6, #5
 800b794:	4620      	mov	r0, r4
 800b796:	0092      	lsls	r2, r2, #2
 800b798:	f000 fc94 	bl	800c0c4 <_calloc_r>
 800b79c:	b160      	cbz	r0, 800b7b8 <_Balloc+0x64>
 800b79e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7a2:	e00e      	b.n	800b7c2 <_Balloc+0x6e>
 800b7a4:	2221      	movs	r2, #33	; 0x21
 800b7a6:	2104      	movs	r1, #4
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 fc8b 	bl	800c0c4 <_calloc_r>
 800b7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b0:	60f0      	str	r0, [r6, #12]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e4      	bne.n	800b782 <_Balloc+0x2e>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	6802      	ldr	r2, [r0, #0]
 800b7be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7c8:	e7f7      	b.n	800b7ba <_Balloc+0x66>
 800b7ca:	bf00      	nop
 800b7cc:	0800d656 	.word	0x0800d656
 800b7d0:	0800d75c 	.word	0x0800d75c

0800b7d4 <_Bfree>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7d8:	4605      	mov	r5, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	b976      	cbnz	r6, 800b7fc <_Bfree+0x28>
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f7ff ff82 	bl	800b6e8 <malloc>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	6268      	str	r0, [r5, #36]	; 0x24
 800b7e8:	b920      	cbnz	r0, 800b7f4 <_Bfree+0x20>
 800b7ea:	218a      	movs	r1, #138	; 0x8a
 800b7ec:	4b08      	ldr	r3, [pc, #32]	; (800b810 <_Bfree+0x3c>)
 800b7ee:	4809      	ldr	r0, [pc, #36]	; (800b814 <_Bfree+0x40>)
 800b7f0:	f000 feae 	bl	800c550 <__assert_func>
 800b7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f8:	6006      	str	r6, [r0, #0]
 800b7fa:	60c6      	str	r6, [r0, #12]
 800b7fc:	b13c      	cbz	r4, 800b80e <_Bfree+0x3a>
 800b7fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b800:	6862      	ldr	r2, [r4, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b808:	6021      	str	r1, [r4, #0]
 800b80a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	0800d656 	.word	0x0800d656
 800b814:	0800d75c 	.word	0x0800d75c

0800b818 <__multadd>:
 800b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	4698      	mov	r8, r3
 800b81e:	460c      	mov	r4, r1
 800b820:	2300      	movs	r3, #0
 800b822:	690e      	ldr	r6, [r1, #16]
 800b824:	4607      	mov	r7, r0
 800b826:	f101 0014 	add.w	r0, r1, #20
 800b82a:	6805      	ldr	r5, [r0, #0]
 800b82c:	3301      	adds	r3, #1
 800b82e:	b2a9      	uxth	r1, r5
 800b830:	fb02 8101 	mla	r1, r2, r1, r8
 800b834:	0c2d      	lsrs	r5, r5, #16
 800b836:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b83a:	fb02 c505 	mla	r5, r2, r5, ip
 800b83e:	b289      	uxth	r1, r1
 800b840:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b844:	429e      	cmp	r6, r3
 800b846:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b84a:	f840 1b04 	str.w	r1, [r0], #4
 800b84e:	dcec      	bgt.n	800b82a <__multadd+0x12>
 800b850:	f1b8 0f00 	cmp.w	r8, #0
 800b854:	d022      	beq.n	800b89c <__multadd+0x84>
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	42b3      	cmp	r3, r6
 800b85a:	dc19      	bgt.n	800b890 <__multadd+0x78>
 800b85c:	6861      	ldr	r1, [r4, #4]
 800b85e:	4638      	mov	r0, r7
 800b860:	3101      	adds	r1, #1
 800b862:	f7ff ff77 	bl	800b754 <_Balloc>
 800b866:	4605      	mov	r5, r0
 800b868:	b928      	cbnz	r0, 800b876 <__multadd+0x5e>
 800b86a:	4602      	mov	r2, r0
 800b86c:	21b5      	movs	r1, #181	; 0xb5
 800b86e:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <__multadd+0x8c>)
 800b870:	480d      	ldr	r0, [pc, #52]	; (800b8a8 <__multadd+0x90>)
 800b872:	f000 fe6d 	bl	800c550 <__assert_func>
 800b876:	6922      	ldr	r2, [r4, #16]
 800b878:	f104 010c 	add.w	r1, r4, #12
 800b87c:	3202      	adds	r2, #2
 800b87e:	0092      	lsls	r2, r2, #2
 800b880:	300c      	adds	r0, #12
 800b882:	f7ff ff59 	bl	800b738 <memcpy>
 800b886:	4621      	mov	r1, r4
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff ffa3 	bl	800b7d4 <_Bfree>
 800b88e:	462c      	mov	r4, r5
 800b890:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b894:	3601      	adds	r6, #1
 800b896:	f8c3 8014 	str.w	r8, [r3, #20]
 800b89a:	6126      	str	r6, [r4, #16]
 800b89c:	4620      	mov	r0, r4
 800b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a2:	bf00      	nop
 800b8a4:	0800d6cc 	.word	0x0800d6cc
 800b8a8:	0800d75c 	.word	0x0800d75c

0800b8ac <__s2b>:
 800b8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	4615      	mov	r5, r2
 800b8b2:	2209      	movs	r2, #9
 800b8b4:	461f      	mov	r7, r3
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8be:	4606      	mov	r6, r0
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	db09      	blt.n	800b8dc <__s2b+0x30>
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7ff ff43 	bl	800b754 <_Balloc>
 800b8ce:	b940      	cbnz	r0, 800b8e2 <__s2b+0x36>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	21ce      	movs	r1, #206	; 0xce
 800b8d4:	4b18      	ldr	r3, [pc, #96]	; (800b938 <__s2b+0x8c>)
 800b8d6:	4819      	ldr	r0, [pc, #100]	; (800b93c <__s2b+0x90>)
 800b8d8:	f000 fe3a 	bl	800c550 <__assert_func>
 800b8dc:	0052      	lsls	r2, r2, #1
 800b8de:	3101      	adds	r1, #1
 800b8e0:	e7f0      	b.n	800b8c4 <__s2b+0x18>
 800b8e2:	9b08      	ldr	r3, [sp, #32]
 800b8e4:	2d09      	cmp	r5, #9
 800b8e6:	6143      	str	r3, [r0, #20]
 800b8e8:	f04f 0301 	mov.w	r3, #1
 800b8ec:	6103      	str	r3, [r0, #16]
 800b8ee:	dd16      	ble.n	800b91e <__s2b+0x72>
 800b8f0:	f104 0909 	add.w	r9, r4, #9
 800b8f4:	46c8      	mov	r8, r9
 800b8f6:	442c      	add	r4, r5
 800b8f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8fc:	4601      	mov	r1, r0
 800b8fe:	220a      	movs	r2, #10
 800b900:	4630      	mov	r0, r6
 800b902:	3b30      	subs	r3, #48	; 0x30
 800b904:	f7ff ff88 	bl	800b818 <__multadd>
 800b908:	45a0      	cmp	r8, r4
 800b90a:	d1f5      	bne.n	800b8f8 <__s2b+0x4c>
 800b90c:	f1a5 0408 	sub.w	r4, r5, #8
 800b910:	444c      	add	r4, r9
 800b912:	1b2d      	subs	r5, r5, r4
 800b914:	1963      	adds	r3, r4, r5
 800b916:	42bb      	cmp	r3, r7
 800b918:	db04      	blt.n	800b924 <__s2b+0x78>
 800b91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91e:	2509      	movs	r5, #9
 800b920:	340a      	adds	r4, #10
 800b922:	e7f6      	b.n	800b912 <__s2b+0x66>
 800b924:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b928:	4601      	mov	r1, r0
 800b92a:	220a      	movs	r2, #10
 800b92c:	4630      	mov	r0, r6
 800b92e:	3b30      	subs	r3, #48	; 0x30
 800b930:	f7ff ff72 	bl	800b818 <__multadd>
 800b934:	e7ee      	b.n	800b914 <__s2b+0x68>
 800b936:	bf00      	nop
 800b938:	0800d6cc 	.word	0x0800d6cc
 800b93c:	0800d75c 	.word	0x0800d75c

0800b940 <__hi0bits>:
 800b940:	0c02      	lsrs	r2, r0, #16
 800b942:	0412      	lsls	r2, r2, #16
 800b944:	4603      	mov	r3, r0
 800b946:	b9ca      	cbnz	r2, 800b97c <__hi0bits+0x3c>
 800b948:	0403      	lsls	r3, r0, #16
 800b94a:	2010      	movs	r0, #16
 800b94c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b950:	bf04      	itt	eq
 800b952:	021b      	lsleq	r3, r3, #8
 800b954:	3008      	addeq	r0, #8
 800b956:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b95a:	bf04      	itt	eq
 800b95c:	011b      	lsleq	r3, r3, #4
 800b95e:	3004      	addeq	r0, #4
 800b960:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b964:	bf04      	itt	eq
 800b966:	009b      	lsleq	r3, r3, #2
 800b968:	3002      	addeq	r0, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	db05      	blt.n	800b97a <__hi0bits+0x3a>
 800b96e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b972:	f100 0001 	add.w	r0, r0, #1
 800b976:	bf08      	it	eq
 800b978:	2020      	moveq	r0, #32
 800b97a:	4770      	bx	lr
 800b97c:	2000      	movs	r0, #0
 800b97e:	e7e5      	b.n	800b94c <__hi0bits+0xc>

0800b980 <__lo0bits>:
 800b980:	6803      	ldr	r3, [r0, #0]
 800b982:	4602      	mov	r2, r0
 800b984:	f013 0007 	ands.w	r0, r3, #7
 800b988:	d00b      	beq.n	800b9a2 <__lo0bits+0x22>
 800b98a:	07d9      	lsls	r1, r3, #31
 800b98c:	d422      	bmi.n	800b9d4 <__lo0bits+0x54>
 800b98e:	0798      	lsls	r0, r3, #30
 800b990:	bf49      	itett	mi
 800b992:	085b      	lsrmi	r3, r3, #1
 800b994:	089b      	lsrpl	r3, r3, #2
 800b996:	2001      	movmi	r0, #1
 800b998:	6013      	strmi	r3, [r2, #0]
 800b99a:	bf5c      	itt	pl
 800b99c:	2002      	movpl	r0, #2
 800b99e:	6013      	strpl	r3, [r2, #0]
 800b9a0:	4770      	bx	lr
 800b9a2:	b299      	uxth	r1, r3
 800b9a4:	b909      	cbnz	r1, 800b9aa <__lo0bits+0x2a>
 800b9a6:	2010      	movs	r0, #16
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b9ae:	bf04      	itt	eq
 800b9b0:	0a1b      	lsreq	r3, r3, #8
 800b9b2:	3008      	addeq	r0, #8
 800b9b4:	0719      	lsls	r1, r3, #28
 800b9b6:	bf04      	itt	eq
 800b9b8:	091b      	lsreq	r3, r3, #4
 800b9ba:	3004      	addeq	r0, #4
 800b9bc:	0799      	lsls	r1, r3, #30
 800b9be:	bf04      	itt	eq
 800b9c0:	089b      	lsreq	r3, r3, #2
 800b9c2:	3002      	addeq	r0, #2
 800b9c4:	07d9      	lsls	r1, r3, #31
 800b9c6:	d403      	bmi.n	800b9d0 <__lo0bits+0x50>
 800b9c8:	085b      	lsrs	r3, r3, #1
 800b9ca:	f100 0001 	add.w	r0, r0, #1
 800b9ce:	d003      	beq.n	800b9d8 <__lo0bits+0x58>
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	4770      	bx	lr
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	4770      	bx	lr
 800b9d8:	2020      	movs	r0, #32
 800b9da:	4770      	bx	lr

0800b9dc <__i2b>:
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	460c      	mov	r4, r1
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	f7ff feb7 	bl	800b754 <_Balloc>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	b928      	cbnz	r0, 800b9f6 <__i2b+0x1a>
 800b9ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9ee:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <__i2b+0x24>)
 800b9f0:	4804      	ldr	r0, [pc, #16]	; (800ba04 <__i2b+0x28>)
 800b9f2:	f000 fdad 	bl	800c550 <__assert_func>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	6144      	str	r4, [r0, #20]
 800b9fa:	6103      	str	r3, [r0, #16]
 800b9fc:	bd10      	pop	{r4, pc}
 800b9fe:	bf00      	nop
 800ba00:	0800d6cc 	.word	0x0800d6cc
 800ba04:	0800d75c 	.word	0x0800d75c

0800ba08 <__multiply>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	690a      	ldr	r2, [r1, #16]
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	460d      	mov	r5, r1
 800ba14:	429a      	cmp	r2, r3
 800ba16:	bfbe      	ittt	lt
 800ba18:	460b      	movlt	r3, r1
 800ba1a:	4625      	movlt	r5, r4
 800ba1c:	461c      	movlt	r4, r3
 800ba1e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ba22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ba26:	68ab      	ldr	r3, [r5, #8]
 800ba28:	6869      	ldr	r1, [r5, #4]
 800ba2a:	eb0a 0709 	add.w	r7, sl, r9
 800ba2e:	42bb      	cmp	r3, r7
 800ba30:	b085      	sub	sp, #20
 800ba32:	bfb8      	it	lt
 800ba34:	3101      	addlt	r1, #1
 800ba36:	f7ff fe8d 	bl	800b754 <_Balloc>
 800ba3a:	b930      	cbnz	r0, 800ba4a <__multiply+0x42>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	f240 115d 	movw	r1, #349	; 0x15d
 800ba42:	4b41      	ldr	r3, [pc, #260]	; (800bb48 <__multiply+0x140>)
 800ba44:	4841      	ldr	r0, [pc, #260]	; (800bb4c <__multiply+0x144>)
 800ba46:	f000 fd83 	bl	800c550 <__assert_func>
 800ba4a:	f100 0614 	add.w	r6, r0, #20
 800ba4e:	4633      	mov	r3, r6
 800ba50:	2200      	movs	r2, #0
 800ba52:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ba56:	4543      	cmp	r3, r8
 800ba58:	d31e      	bcc.n	800ba98 <__multiply+0x90>
 800ba5a:	f105 0c14 	add.w	ip, r5, #20
 800ba5e:	f104 0314 	add.w	r3, r4, #20
 800ba62:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba66:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ba6a:	9202      	str	r2, [sp, #8]
 800ba6c:	ebac 0205 	sub.w	r2, ip, r5
 800ba70:	3a15      	subs	r2, #21
 800ba72:	f022 0203 	bic.w	r2, r2, #3
 800ba76:	3204      	adds	r2, #4
 800ba78:	f105 0115 	add.w	r1, r5, #21
 800ba7c:	458c      	cmp	ip, r1
 800ba7e:	bf38      	it	cc
 800ba80:	2204      	movcc	r2, #4
 800ba82:	9201      	str	r2, [sp, #4]
 800ba84:	9a02      	ldr	r2, [sp, #8]
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d808      	bhi.n	800ba9e <__multiply+0x96>
 800ba8c:	2f00      	cmp	r7, #0
 800ba8e:	dc55      	bgt.n	800bb3c <__multiply+0x134>
 800ba90:	6107      	str	r7, [r0, #16]
 800ba92:	b005      	add	sp, #20
 800ba94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba98:	f843 2b04 	str.w	r2, [r3], #4
 800ba9c:	e7db      	b.n	800ba56 <__multiply+0x4e>
 800ba9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	d020      	beq.n	800baea <__multiply+0xe2>
 800baa8:	46b1      	mov	r9, r6
 800baaa:	2200      	movs	r2, #0
 800baac:	f105 0e14 	add.w	lr, r5, #20
 800bab0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bab4:	f8d9 b000 	ldr.w	fp, [r9]
 800bab8:	b2a1      	uxth	r1, r4
 800baba:	fa1f fb8b 	uxth.w	fp, fp
 800babe:	fb0a b101 	mla	r1, sl, r1, fp
 800bac2:	4411      	add	r1, r2
 800bac4:	f8d9 2000 	ldr.w	r2, [r9]
 800bac8:	0c24      	lsrs	r4, r4, #16
 800baca:	0c12      	lsrs	r2, r2, #16
 800bacc:	fb0a 2404 	mla	r4, sl, r4, r2
 800bad0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bad4:	b289      	uxth	r1, r1
 800bad6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bada:	45f4      	cmp	ip, lr
 800badc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bae0:	f849 1b04 	str.w	r1, [r9], #4
 800bae4:	d8e4      	bhi.n	800bab0 <__multiply+0xa8>
 800bae6:	9901      	ldr	r1, [sp, #4]
 800bae8:	5072      	str	r2, [r6, r1]
 800baea:	9a03      	ldr	r2, [sp, #12]
 800baec:	3304      	adds	r3, #4
 800baee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	d01f      	beq.n	800bb38 <__multiply+0x130>
 800baf8:	46b6      	mov	lr, r6
 800bafa:	f04f 0a00 	mov.w	sl, #0
 800bafe:	6834      	ldr	r4, [r6, #0]
 800bb00:	f105 0114 	add.w	r1, r5, #20
 800bb04:	880a      	ldrh	r2, [r1, #0]
 800bb06:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bb0a:	b2a4      	uxth	r4, r4
 800bb0c:	fb09 b202 	mla	r2, r9, r2, fp
 800bb10:	4492      	add	sl, r2
 800bb12:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bb16:	f84e 4b04 	str.w	r4, [lr], #4
 800bb1a:	f851 4b04 	ldr.w	r4, [r1], #4
 800bb1e:	f8be 2000 	ldrh.w	r2, [lr]
 800bb22:	0c24      	lsrs	r4, r4, #16
 800bb24:	fb09 2404 	mla	r4, r9, r4, r2
 800bb28:	458c      	cmp	ip, r1
 800bb2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bb2e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb32:	d8e7      	bhi.n	800bb04 <__multiply+0xfc>
 800bb34:	9a01      	ldr	r2, [sp, #4]
 800bb36:	50b4      	str	r4, [r6, r2]
 800bb38:	3604      	adds	r6, #4
 800bb3a:	e7a3      	b.n	800ba84 <__multiply+0x7c>
 800bb3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1a5      	bne.n	800ba90 <__multiply+0x88>
 800bb44:	3f01      	subs	r7, #1
 800bb46:	e7a1      	b.n	800ba8c <__multiply+0x84>
 800bb48:	0800d6cc 	.word	0x0800d6cc
 800bb4c:	0800d75c 	.word	0x0800d75c

0800bb50 <__pow5mult>:
 800bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb54:	4615      	mov	r5, r2
 800bb56:	f012 0203 	ands.w	r2, r2, #3
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	d007      	beq.n	800bb70 <__pow5mult+0x20>
 800bb60:	4c25      	ldr	r4, [pc, #148]	; (800bbf8 <__pow5mult+0xa8>)
 800bb62:	3a01      	subs	r2, #1
 800bb64:	2300      	movs	r3, #0
 800bb66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb6a:	f7ff fe55 	bl	800b818 <__multadd>
 800bb6e:	4607      	mov	r7, r0
 800bb70:	10ad      	asrs	r5, r5, #2
 800bb72:	d03d      	beq.n	800bbf0 <__pow5mult+0xa0>
 800bb74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb76:	b97c      	cbnz	r4, 800bb98 <__pow5mult+0x48>
 800bb78:	2010      	movs	r0, #16
 800bb7a:	f7ff fdb5 	bl	800b6e8 <malloc>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	6270      	str	r0, [r6, #36]	; 0x24
 800bb82:	b928      	cbnz	r0, 800bb90 <__pow5mult+0x40>
 800bb84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb88:	4b1c      	ldr	r3, [pc, #112]	; (800bbfc <__pow5mult+0xac>)
 800bb8a:	481d      	ldr	r0, [pc, #116]	; (800bc00 <__pow5mult+0xb0>)
 800bb8c:	f000 fce0 	bl	800c550 <__assert_func>
 800bb90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb94:	6004      	str	r4, [r0, #0]
 800bb96:	60c4      	str	r4, [r0, #12]
 800bb98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bba0:	b94c      	cbnz	r4, 800bbb6 <__pow5mult+0x66>
 800bba2:	f240 2171 	movw	r1, #625	; 0x271
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7ff ff18 	bl	800b9dc <__i2b>
 800bbac:	2300      	movs	r3, #0
 800bbae:	4604      	mov	r4, r0
 800bbb0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbb4:	6003      	str	r3, [r0, #0]
 800bbb6:	f04f 0900 	mov.w	r9, #0
 800bbba:	07eb      	lsls	r3, r5, #31
 800bbbc:	d50a      	bpl.n	800bbd4 <__pow5mult+0x84>
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7ff ff20 	bl	800ba08 <__multiply>
 800bbc8:	4680      	mov	r8, r0
 800bbca:	4639      	mov	r1, r7
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7ff fe01 	bl	800b7d4 <_Bfree>
 800bbd2:	4647      	mov	r7, r8
 800bbd4:	106d      	asrs	r5, r5, #1
 800bbd6:	d00b      	beq.n	800bbf0 <__pow5mult+0xa0>
 800bbd8:	6820      	ldr	r0, [r4, #0]
 800bbda:	b938      	cbnz	r0, 800bbec <__pow5mult+0x9c>
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7ff ff11 	bl	800ba08 <__multiply>
 800bbe6:	6020      	str	r0, [r4, #0]
 800bbe8:	f8c0 9000 	str.w	r9, [r0]
 800bbec:	4604      	mov	r4, r0
 800bbee:	e7e4      	b.n	800bbba <__pow5mult+0x6a>
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0800d8b0 	.word	0x0800d8b0
 800bbfc:	0800d656 	.word	0x0800d656
 800bc00:	0800d75c 	.word	0x0800d75c

0800bc04 <__lshift>:
 800bc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	4691      	mov	r9, r2
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	6849      	ldr	r1, [r1, #4]
 800bc12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc16:	68a3      	ldr	r3, [r4, #8]
 800bc18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc1c:	f108 0601 	add.w	r6, r8, #1
 800bc20:	42b3      	cmp	r3, r6
 800bc22:	db0b      	blt.n	800bc3c <__lshift+0x38>
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff fd95 	bl	800b754 <_Balloc>
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b948      	cbnz	r0, 800bc42 <__lshift+0x3e>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc34:	4b27      	ldr	r3, [pc, #156]	; (800bcd4 <__lshift+0xd0>)
 800bc36:	4828      	ldr	r0, [pc, #160]	; (800bcd8 <__lshift+0xd4>)
 800bc38:	f000 fc8a 	bl	800c550 <__assert_func>
 800bc3c:	3101      	adds	r1, #1
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	e7ee      	b.n	800bc20 <__lshift+0x1c>
 800bc42:	2300      	movs	r3, #0
 800bc44:	f100 0114 	add.w	r1, r0, #20
 800bc48:	f100 0210 	add.w	r2, r0, #16
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	4553      	cmp	r3, sl
 800bc50:	db33      	blt.n	800bcba <__lshift+0xb6>
 800bc52:	6920      	ldr	r0, [r4, #16]
 800bc54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc58:	f104 0314 	add.w	r3, r4, #20
 800bc5c:	f019 091f 	ands.w	r9, r9, #31
 800bc60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc68:	d02b      	beq.n	800bcc2 <__lshift+0xbe>
 800bc6a:	468a      	mov	sl, r1
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f1c9 0e20 	rsb	lr, r9, #32
 800bc72:	6818      	ldr	r0, [r3, #0]
 800bc74:	fa00 f009 	lsl.w	r0, r0, r9
 800bc78:	4302      	orrs	r2, r0
 800bc7a:	f84a 2b04 	str.w	r2, [sl], #4
 800bc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc82:	459c      	cmp	ip, r3
 800bc84:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc88:	d8f3      	bhi.n	800bc72 <__lshift+0x6e>
 800bc8a:	ebac 0304 	sub.w	r3, ip, r4
 800bc8e:	3b15      	subs	r3, #21
 800bc90:	f023 0303 	bic.w	r3, r3, #3
 800bc94:	3304      	adds	r3, #4
 800bc96:	f104 0015 	add.w	r0, r4, #21
 800bc9a:	4584      	cmp	ip, r0
 800bc9c:	bf38      	it	cc
 800bc9e:	2304      	movcc	r3, #4
 800bca0:	50ca      	str	r2, [r1, r3]
 800bca2:	b10a      	cbz	r2, 800bca8 <__lshift+0xa4>
 800bca4:	f108 0602 	add.w	r6, r8, #2
 800bca8:	3e01      	subs	r6, #1
 800bcaa:	4638      	mov	r0, r7
 800bcac:	4621      	mov	r1, r4
 800bcae:	612e      	str	r6, [r5, #16]
 800bcb0:	f7ff fd90 	bl	800b7d4 <_Bfree>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	e7c5      	b.n	800bc4e <__lshift+0x4a>
 800bcc2:	3904      	subs	r1, #4
 800bcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc8:	459c      	cmp	ip, r3
 800bcca:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcce:	d8f9      	bhi.n	800bcc4 <__lshift+0xc0>
 800bcd0:	e7ea      	b.n	800bca8 <__lshift+0xa4>
 800bcd2:	bf00      	nop
 800bcd4:	0800d6cc 	.word	0x0800d6cc
 800bcd8:	0800d75c 	.word	0x0800d75c

0800bcdc <__mcmp>:
 800bcdc:	4603      	mov	r3, r0
 800bcde:	690a      	ldr	r2, [r1, #16]
 800bce0:	6900      	ldr	r0, [r0, #16]
 800bce2:	b530      	push	{r4, r5, lr}
 800bce4:	1a80      	subs	r0, r0, r2
 800bce6:	d10d      	bne.n	800bd04 <__mcmp+0x28>
 800bce8:	3314      	adds	r3, #20
 800bcea:	3114      	adds	r1, #20
 800bcec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcfc:	4295      	cmp	r5, r2
 800bcfe:	d002      	beq.n	800bd06 <__mcmp+0x2a>
 800bd00:	d304      	bcc.n	800bd0c <__mcmp+0x30>
 800bd02:	2001      	movs	r0, #1
 800bd04:	bd30      	pop	{r4, r5, pc}
 800bd06:	42a3      	cmp	r3, r4
 800bd08:	d3f4      	bcc.n	800bcf4 <__mcmp+0x18>
 800bd0a:	e7fb      	b.n	800bd04 <__mcmp+0x28>
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	e7f8      	b.n	800bd04 <__mcmp+0x28>
	...

0800bd14 <__mdiff>:
 800bd14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	460c      	mov	r4, r1
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4692      	mov	sl, r2
 800bd22:	f7ff ffdb 	bl	800bcdc <__mcmp>
 800bd26:	1e05      	subs	r5, r0, #0
 800bd28:	d111      	bne.n	800bd4e <__mdiff+0x3a>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff fd11 	bl	800b754 <_Balloc>
 800bd32:	4602      	mov	r2, r0
 800bd34:	b928      	cbnz	r0, 800bd42 <__mdiff+0x2e>
 800bd36:	f240 2132 	movw	r1, #562	; 0x232
 800bd3a:	4b3c      	ldr	r3, [pc, #240]	; (800be2c <__mdiff+0x118>)
 800bd3c:	483c      	ldr	r0, [pc, #240]	; (800be30 <__mdiff+0x11c>)
 800bd3e:	f000 fc07 	bl	800c550 <__assert_func>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd48:	4610      	mov	r0, r2
 800bd4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4e:	bfa4      	itt	ge
 800bd50:	4653      	movge	r3, sl
 800bd52:	46a2      	movge	sl, r4
 800bd54:	4630      	mov	r0, r6
 800bd56:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bd5a:	bfa6      	itte	ge
 800bd5c:	461c      	movge	r4, r3
 800bd5e:	2500      	movge	r5, #0
 800bd60:	2501      	movlt	r5, #1
 800bd62:	f7ff fcf7 	bl	800b754 <_Balloc>
 800bd66:	4602      	mov	r2, r0
 800bd68:	b918      	cbnz	r0, 800bd72 <__mdiff+0x5e>
 800bd6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd6e:	4b2f      	ldr	r3, [pc, #188]	; (800be2c <__mdiff+0x118>)
 800bd70:	e7e4      	b.n	800bd3c <__mdiff+0x28>
 800bd72:	f100 0814 	add.w	r8, r0, #20
 800bd76:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bd7a:	60c5      	str	r5, [r0, #12]
 800bd7c:	f04f 0c00 	mov.w	ip, #0
 800bd80:	f10a 0514 	add.w	r5, sl, #20
 800bd84:	f10a 0010 	add.w	r0, sl, #16
 800bd88:	46c2      	mov	sl, r8
 800bd8a:	6926      	ldr	r6, [r4, #16]
 800bd8c:	f104 0914 	add.w	r9, r4, #20
 800bd90:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bd94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd98:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bd9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bda0:	fa1f f18b 	uxth.w	r1, fp
 800bda4:	4461      	add	r1, ip
 800bda6:	fa1f fc83 	uxth.w	ip, r3
 800bdaa:	0c1b      	lsrs	r3, r3, #16
 800bdac:	eba1 010c 	sub.w	r1, r1, ip
 800bdb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdb4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bdb8:	b289      	uxth	r1, r1
 800bdba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bdbe:	454e      	cmp	r6, r9
 800bdc0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bdc4:	f84a 3b04 	str.w	r3, [sl], #4
 800bdc8:	d8e6      	bhi.n	800bd98 <__mdiff+0x84>
 800bdca:	1b33      	subs	r3, r6, r4
 800bdcc:	3b15      	subs	r3, #21
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	3415      	adds	r4, #21
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	42a6      	cmp	r6, r4
 800bdd8:	bf38      	it	cc
 800bdda:	2304      	movcc	r3, #4
 800bddc:	441d      	add	r5, r3
 800bdde:	4443      	add	r3, r8
 800bde0:	461e      	mov	r6, r3
 800bde2:	462c      	mov	r4, r5
 800bde4:	4574      	cmp	r4, lr
 800bde6:	d30e      	bcc.n	800be06 <__mdiff+0xf2>
 800bde8:	f10e 0103 	add.w	r1, lr, #3
 800bdec:	1b49      	subs	r1, r1, r5
 800bdee:	f021 0103 	bic.w	r1, r1, #3
 800bdf2:	3d03      	subs	r5, #3
 800bdf4:	45ae      	cmp	lr, r5
 800bdf6:	bf38      	it	cc
 800bdf8:	2100      	movcc	r1, #0
 800bdfa:	4419      	add	r1, r3
 800bdfc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800be00:	b18b      	cbz	r3, 800be26 <__mdiff+0x112>
 800be02:	6117      	str	r7, [r2, #16]
 800be04:	e7a0      	b.n	800bd48 <__mdiff+0x34>
 800be06:	f854 8b04 	ldr.w	r8, [r4], #4
 800be0a:	fa1f f188 	uxth.w	r1, r8
 800be0e:	4461      	add	r1, ip
 800be10:	1408      	asrs	r0, r1, #16
 800be12:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800be16:	b289      	uxth	r1, r1
 800be18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be20:	f846 1b04 	str.w	r1, [r6], #4
 800be24:	e7de      	b.n	800bde4 <__mdiff+0xd0>
 800be26:	3f01      	subs	r7, #1
 800be28:	e7e8      	b.n	800bdfc <__mdiff+0xe8>
 800be2a:	bf00      	nop
 800be2c:	0800d6cc 	.word	0x0800d6cc
 800be30:	0800d75c 	.word	0x0800d75c

0800be34 <__ulp>:
 800be34:	4b11      	ldr	r3, [pc, #68]	; (800be7c <__ulp+0x48>)
 800be36:	400b      	ands	r3, r1
 800be38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd02      	ble.n	800be46 <__ulp+0x12>
 800be40:	2000      	movs	r0, #0
 800be42:	4619      	mov	r1, r3
 800be44:	4770      	bx	lr
 800be46:	425b      	negs	r3, r3
 800be48:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800be4c:	f04f 0000 	mov.w	r0, #0
 800be50:	f04f 0100 	mov.w	r1, #0
 800be54:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be58:	da04      	bge.n	800be64 <__ulp+0x30>
 800be5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be5e:	fa43 f102 	asr.w	r1, r3, r2
 800be62:	4770      	bx	lr
 800be64:	f1a2 0314 	sub.w	r3, r2, #20
 800be68:	2b1e      	cmp	r3, #30
 800be6a:	bfd6      	itet	le
 800be6c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800be70:	2301      	movgt	r3, #1
 800be72:	fa22 f303 	lsrle.w	r3, r2, r3
 800be76:	4618      	mov	r0, r3
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	7ff00000 	.word	0x7ff00000

0800be80 <__b2d>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	6907      	ldr	r7, [r0, #16]
 800be86:	f100 0914 	add.w	r9, r0, #20
 800be8a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800be8e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800be92:	f1a7 0804 	sub.w	r8, r7, #4
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff fd52 	bl	800b940 <__hi0bits>
 800be9c:	f1c0 0320 	rsb	r3, r0, #32
 800bea0:	280a      	cmp	r0, #10
 800bea2:	600b      	str	r3, [r1, #0]
 800bea4:	491f      	ldr	r1, [pc, #124]	; (800bf24 <__b2d+0xa4>)
 800bea6:	dc17      	bgt.n	800bed8 <__b2d+0x58>
 800bea8:	45c1      	cmp	r9, r8
 800beaa:	bf28      	it	cs
 800beac:	2200      	movcs	r2, #0
 800beae:	f1c0 0c0b 	rsb	ip, r0, #11
 800beb2:	fa26 f30c 	lsr.w	r3, r6, ip
 800beb6:	bf38      	it	cc
 800beb8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bebc:	ea43 0501 	orr.w	r5, r3, r1
 800bec0:	f100 0315 	add.w	r3, r0, #21
 800bec4:	fa06 f303 	lsl.w	r3, r6, r3
 800bec8:	fa22 f20c 	lsr.w	r2, r2, ip
 800becc:	ea43 0402 	orr.w	r4, r3, r2
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed8:	45c1      	cmp	r9, r8
 800beda:	bf2e      	itee	cs
 800bedc:	2200      	movcs	r2, #0
 800bede:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bee2:	f1a7 0808 	subcc.w	r8, r7, #8
 800bee6:	f1b0 030b 	subs.w	r3, r0, #11
 800beea:	d016      	beq.n	800bf1a <__b2d+0x9a>
 800beec:	f1c3 0720 	rsb	r7, r3, #32
 800bef0:	fa22 f107 	lsr.w	r1, r2, r7
 800bef4:	45c8      	cmp	r8, r9
 800bef6:	fa06 f603 	lsl.w	r6, r6, r3
 800befa:	ea46 0601 	orr.w	r6, r6, r1
 800befe:	bf94      	ite	ls
 800bf00:	2100      	movls	r1, #0
 800bf02:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bf06:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bf0a:	fa02 f003 	lsl.w	r0, r2, r3
 800bf0e:	40f9      	lsrs	r1, r7
 800bf10:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bf14:	ea40 0401 	orr.w	r4, r0, r1
 800bf18:	e7da      	b.n	800bed0 <__b2d+0x50>
 800bf1a:	4614      	mov	r4, r2
 800bf1c:	ea46 0501 	orr.w	r5, r6, r1
 800bf20:	e7d6      	b.n	800bed0 <__b2d+0x50>
 800bf22:	bf00      	nop
 800bf24:	3ff00000 	.word	0x3ff00000

0800bf28 <__d2b>:
 800bf28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bf32:	4690      	mov	r8, r2
 800bf34:	461d      	mov	r5, r3
 800bf36:	f7ff fc0d 	bl	800b754 <_Balloc>
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	b930      	cbnz	r0, 800bf4c <__d2b+0x24>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	f240 310a 	movw	r1, #778	; 0x30a
 800bf44:	4b24      	ldr	r3, [pc, #144]	; (800bfd8 <__d2b+0xb0>)
 800bf46:	4825      	ldr	r0, [pc, #148]	; (800bfdc <__d2b+0xb4>)
 800bf48:	f000 fb02 	bl	800c550 <__assert_func>
 800bf4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bf50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bf54:	bb2d      	cbnz	r5, 800bfa2 <__d2b+0x7a>
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	f1b8 0300 	subs.w	r3, r8, #0
 800bf5c:	d026      	beq.n	800bfac <__d2b+0x84>
 800bf5e:	4668      	mov	r0, sp
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	f7ff fd0d 	bl	800b980 <__lo0bits>
 800bf66:	9900      	ldr	r1, [sp, #0]
 800bf68:	b1f0      	cbz	r0, 800bfa8 <__d2b+0x80>
 800bf6a:	9a01      	ldr	r2, [sp, #4]
 800bf6c:	f1c0 0320 	rsb	r3, r0, #32
 800bf70:	fa02 f303 	lsl.w	r3, r2, r3
 800bf74:	430b      	orrs	r3, r1
 800bf76:	40c2      	lsrs	r2, r0
 800bf78:	6163      	str	r3, [r4, #20]
 800bf7a:	9201      	str	r2, [sp, #4]
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bf14      	ite	ne
 800bf82:	2102      	movne	r1, #2
 800bf84:	2101      	moveq	r1, #1
 800bf86:	61a3      	str	r3, [r4, #24]
 800bf88:	6121      	str	r1, [r4, #16]
 800bf8a:	b1c5      	cbz	r5, 800bfbe <__d2b+0x96>
 800bf8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf90:	4405      	add	r5, r0
 800bf92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf96:	603d      	str	r5, [r7, #0]
 800bf98:	6030      	str	r0, [r6, #0]
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	b002      	add	sp, #8
 800bf9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfa6:	e7d6      	b.n	800bf56 <__d2b+0x2e>
 800bfa8:	6161      	str	r1, [r4, #20]
 800bfaa:	e7e7      	b.n	800bf7c <__d2b+0x54>
 800bfac:	a801      	add	r0, sp, #4
 800bfae:	f7ff fce7 	bl	800b980 <__lo0bits>
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	9b01      	ldr	r3, [sp, #4]
 800bfb6:	6121      	str	r1, [r4, #16]
 800bfb8:	6163      	str	r3, [r4, #20]
 800bfba:	3020      	adds	r0, #32
 800bfbc:	e7e5      	b.n	800bf8a <__d2b+0x62>
 800bfbe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bfc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfc6:	6038      	str	r0, [r7, #0]
 800bfc8:	6918      	ldr	r0, [r3, #16]
 800bfca:	f7ff fcb9 	bl	800b940 <__hi0bits>
 800bfce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bfd2:	6031      	str	r1, [r6, #0]
 800bfd4:	e7e1      	b.n	800bf9a <__d2b+0x72>
 800bfd6:	bf00      	nop
 800bfd8:	0800d6cc 	.word	0x0800d6cc
 800bfdc:	0800d75c 	.word	0x0800d75c

0800bfe0 <__ratio>:
 800bfe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	4688      	mov	r8, r1
 800bfe6:	4669      	mov	r1, sp
 800bfe8:	4681      	mov	r9, r0
 800bfea:	f7ff ff49 	bl	800be80 <__b2d>
 800bfee:	460f      	mov	r7, r1
 800bff0:	4604      	mov	r4, r0
 800bff2:	460d      	mov	r5, r1
 800bff4:	4640      	mov	r0, r8
 800bff6:	a901      	add	r1, sp, #4
 800bff8:	f7ff ff42 	bl	800be80 <__b2d>
 800bffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c000:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c004:	468b      	mov	fp, r1
 800c006:	eba3 0c02 	sub.w	ip, r3, r2
 800c00a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c00e:	1a9b      	subs	r3, r3, r2
 800c010:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c014:	2b00      	cmp	r3, #0
 800c016:	bfd5      	itete	le
 800c018:	460a      	movle	r2, r1
 800c01a:	462a      	movgt	r2, r5
 800c01c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c020:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c024:	bfd8      	it	le
 800c026:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c02a:	465b      	mov	r3, fp
 800c02c:	4602      	mov	r2, r0
 800c02e:	4639      	mov	r1, r7
 800c030:	4620      	mov	r0, r4
 800c032:	f7f4 fb93 	bl	800075c <__aeabi_ddiv>
 800c036:	b003      	add	sp, #12
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c03c <__copybits>:
 800c03c:	3901      	subs	r1, #1
 800c03e:	b570      	push	{r4, r5, r6, lr}
 800c040:	1149      	asrs	r1, r1, #5
 800c042:	6914      	ldr	r4, [r2, #16]
 800c044:	3101      	adds	r1, #1
 800c046:	f102 0314 	add.w	r3, r2, #20
 800c04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c04e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c052:	1f05      	subs	r5, r0, #4
 800c054:	42a3      	cmp	r3, r4
 800c056:	d30c      	bcc.n	800c072 <__copybits+0x36>
 800c058:	1aa3      	subs	r3, r4, r2
 800c05a:	3b11      	subs	r3, #17
 800c05c:	f023 0303 	bic.w	r3, r3, #3
 800c060:	3211      	adds	r2, #17
 800c062:	42a2      	cmp	r2, r4
 800c064:	bf88      	it	hi
 800c066:	2300      	movhi	r3, #0
 800c068:	4418      	add	r0, r3
 800c06a:	2300      	movs	r3, #0
 800c06c:	4288      	cmp	r0, r1
 800c06e:	d305      	bcc.n	800c07c <__copybits+0x40>
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	f853 6b04 	ldr.w	r6, [r3], #4
 800c076:	f845 6f04 	str.w	r6, [r5, #4]!
 800c07a:	e7eb      	b.n	800c054 <__copybits+0x18>
 800c07c:	f840 3b04 	str.w	r3, [r0], #4
 800c080:	e7f4      	b.n	800c06c <__copybits+0x30>

0800c082 <__any_on>:
 800c082:	f100 0214 	add.w	r2, r0, #20
 800c086:	6900      	ldr	r0, [r0, #16]
 800c088:	114b      	asrs	r3, r1, #5
 800c08a:	4298      	cmp	r0, r3
 800c08c:	b510      	push	{r4, lr}
 800c08e:	db11      	blt.n	800c0b4 <__any_on+0x32>
 800c090:	dd0a      	ble.n	800c0a8 <__any_on+0x26>
 800c092:	f011 011f 	ands.w	r1, r1, #31
 800c096:	d007      	beq.n	800c0a8 <__any_on+0x26>
 800c098:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c09c:	fa24 f001 	lsr.w	r0, r4, r1
 800c0a0:	fa00 f101 	lsl.w	r1, r0, r1
 800c0a4:	428c      	cmp	r4, r1
 800c0a6:	d10b      	bne.n	800c0c0 <__any_on+0x3e>
 800c0a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d803      	bhi.n	800c0b8 <__any_on+0x36>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	bd10      	pop	{r4, pc}
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	e7f7      	b.n	800c0a8 <__any_on+0x26>
 800c0b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d0f5      	beq.n	800c0ac <__any_on+0x2a>
 800c0c0:	2001      	movs	r0, #1
 800c0c2:	e7f6      	b.n	800c0b2 <__any_on+0x30>

0800c0c4 <_calloc_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	fb02 f501 	mul.w	r5, r2, r1
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f000 f854 	bl	800c178 <_malloc_r>
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	b118      	cbz	r0, 800c0dc <_calloc_r+0x18>
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	f7fc fb94 	bl	8008804 <memset>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	bd38      	pop	{r3, r4, r5, pc}

0800c0e0 <_free_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	d043      	beq.n	800c170 <_free_r+0x90>
 800c0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ec:	1f0c      	subs	r4, r1, #4
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	bfb8      	it	lt
 800c0f2:	18e4      	addlt	r4, r4, r3
 800c0f4:	f000 fa76 	bl	800c5e4 <__malloc_lock>
 800c0f8:	4a1e      	ldr	r2, [pc, #120]	; (800c174 <_free_r+0x94>)
 800c0fa:	6813      	ldr	r3, [r2, #0]
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	b933      	cbnz	r3, 800c10e <_free_r+0x2e>
 800c100:	6063      	str	r3, [r4, #4]
 800c102:	6014      	str	r4, [r2, #0]
 800c104:	4628      	mov	r0, r5
 800c106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c10a:	f000 ba71 	b.w	800c5f0 <__malloc_unlock>
 800c10e:	42a3      	cmp	r3, r4
 800c110:	d90a      	bls.n	800c128 <_free_r+0x48>
 800c112:	6821      	ldr	r1, [r4, #0]
 800c114:	1862      	adds	r2, r4, r1
 800c116:	4293      	cmp	r3, r2
 800c118:	bf01      	itttt	eq
 800c11a:	681a      	ldreq	r2, [r3, #0]
 800c11c:	685b      	ldreq	r3, [r3, #4]
 800c11e:	1852      	addeq	r2, r2, r1
 800c120:	6022      	streq	r2, [r4, #0]
 800c122:	6063      	str	r3, [r4, #4]
 800c124:	6004      	str	r4, [r0, #0]
 800c126:	e7ed      	b.n	800c104 <_free_r+0x24>
 800c128:	461a      	mov	r2, r3
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	b10b      	cbz	r3, 800c132 <_free_r+0x52>
 800c12e:	42a3      	cmp	r3, r4
 800c130:	d9fa      	bls.n	800c128 <_free_r+0x48>
 800c132:	6811      	ldr	r1, [r2, #0]
 800c134:	1850      	adds	r0, r2, r1
 800c136:	42a0      	cmp	r0, r4
 800c138:	d10b      	bne.n	800c152 <_free_r+0x72>
 800c13a:	6820      	ldr	r0, [r4, #0]
 800c13c:	4401      	add	r1, r0
 800c13e:	1850      	adds	r0, r2, r1
 800c140:	4283      	cmp	r3, r0
 800c142:	6011      	str	r1, [r2, #0]
 800c144:	d1de      	bne.n	800c104 <_free_r+0x24>
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	4401      	add	r1, r0
 800c14c:	6011      	str	r1, [r2, #0]
 800c14e:	6053      	str	r3, [r2, #4]
 800c150:	e7d8      	b.n	800c104 <_free_r+0x24>
 800c152:	d902      	bls.n	800c15a <_free_r+0x7a>
 800c154:	230c      	movs	r3, #12
 800c156:	602b      	str	r3, [r5, #0]
 800c158:	e7d4      	b.n	800c104 <_free_r+0x24>
 800c15a:	6820      	ldr	r0, [r4, #0]
 800c15c:	1821      	adds	r1, r4, r0
 800c15e:	428b      	cmp	r3, r1
 800c160:	bf01      	itttt	eq
 800c162:	6819      	ldreq	r1, [r3, #0]
 800c164:	685b      	ldreq	r3, [r3, #4]
 800c166:	1809      	addeq	r1, r1, r0
 800c168:	6021      	streq	r1, [r4, #0]
 800c16a:	6063      	str	r3, [r4, #4]
 800c16c:	6054      	str	r4, [r2, #4]
 800c16e:	e7c9      	b.n	800c104 <_free_r+0x24>
 800c170:	bd38      	pop	{r3, r4, r5, pc}
 800c172:	bf00      	nop
 800c174:	20000218 	.word	0x20000218

0800c178 <_malloc_r>:
 800c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17a:	1ccd      	adds	r5, r1, #3
 800c17c:	f025 0503 	bic.w	r5, r5, #3
 800c180:	3508      	adds	r5, #8
 800c182:	2d0c      	cmp	r5, #12
 800c184:	bf38      	it	cc
 800c186:	250c      	movcc	r5, #12
 800c188:	2d00      	cmp	r5, #0
 800c18a:	4606      	mov	r6, r0
 800c18c:	db01      	blt.n	800c192 <_malloc_r+0x1a>
 800c18e:	42a9      	cmp	r1, r5
 800c190:	d903      	bls.n	800c19a <_malloc_r+0x22>
 800c192:	230c      	movs	r3, #12
 800c194:	6033      	str	r3, [r6, #0]
 800c196:	2000      	movs	r0, #0
 800c198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c19a:	f000 fa23 	bl	800c5e4 <__malloc_lock>
 800c19e:	4921      	ldr	r1, [pc, #132]	; (800c224 <_malloc_r+0xac>)
 800c1a0:	680a      	ldr	r2, [r1, #0]
 800c1a2:	4614      	mov	r4, r2
 800c1a4:	b99c      	cbnz	r4, 800c1ce <_malloc_r+0x56>
 800c1a6:	4f20      	ldr	r7, [pc, #128]	; (800c228 <_malloc_r+0xb0>)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	b923      	cbnz	r3, 800c1b6 <_malloc_r+0x3e>
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f000 f99e 	bl	800c4f0 <_sbrk_r>
 800c1b4:	6038      	str	r0, [r7, #0]
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f000 f999 	bl	800c4f0 <_sbrk_r>
 800c1be:	1c43      	adds	r3, r0, #1
 800c1c0:	d123      	bne.n	800c20a <_malloc_r+0x92>
 800c1c2:	230c      	movs	r3, #12
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	6033      	str	r3, [r6, #0]
 800c1c8:	f000 fa12 	bl	800c5f0 <__malloc_unlock>
 800c1cc:	e7e3      	b.n	800c196 <_malloc_r+0x1e>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	1b5b      	subs	r3, r3, r5
 800c1d2:	d417      	bmi.n	800c204 <_malloc_r+0x8c>
 800c1d4:	2b0b      	cmp	r3, #11
 800c1d6:	d903      	bls.n	800c1e0 <_malloc_r+0x68>
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	441c      	add	r4, r3
 800c1dc:	6025      	str	r5, [r4, #0]
 800c1de:	e004      	b.n	800c1ea <_malloc_r+0x72>
 800c1e0:	6863      	ldr	r3, [r4, #4]
 800c1e2:	42a2      	cmp	r2, r4
 800c1e4:	bf0c      	ite	eq
 800c1e6:	600b      	streq	r3, [r1, #0]
 800c1e8:	6053      	strne	r3, [r2, #4]
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f000 fa00 	bl	800c5f0 <__malloc_unlock>
 800c1f0:	f104 000b 	add.w	r0, r4, #11
 800c1f4:	1d23      	adds	r3, r4, #4
 800c1f6:	f020 0007 	bic.w	r0, r0, #7
 800c1fa:	1ac2      	subs	r2, r0, r3
 800c1fc:	d0cc      	beq.n	800c198 <_malloc_r+0x20>
 800c1fe:	1a1b      	subs	r3, r3, r0
 800c200:	50a3      	str	r3, [r4, r2]
 800c202:	e7c9      	b.n	800c198 <_malloc_r+0x20>
 800c204:	4622      	mov	r2, r4
 800c206:	6864      	ldr	r4, [r4, #4]
 800c208:	e7cc      	b.n	800c1a4 <_malloc_r+0x2c>
 800c20a:	1cc4      	adds	r4, r0, #3
 800c20c:	f024 0403 	bic.w	r4, r4, #3
 800c210:	42a0      	cmp	r0, r4
 800c212:	d0e3      	beq.n	800c1dc <_malloc_r+0x64>
 800c214:	1a21      	subs	r1, r4, r0
 800c216:	4630      	mov	r0, r6
 800c218:	f000 f96a 	bl	800c4f0 <_sbrk_r>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d1dd      	bne.n	800c1dc <_malloc_r+0x64>
 800c220:	e7cf      	b.n	800c1c2 <_malloc_r+0x4a>
 800c222:	bf00      	nop
 800c224:	20000218 	.word	0x20000218
 800c228:	2000021c 	.word	0x2000021c

0800c22c <__ssputs_r>:
 800c22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c230:	688e      	ldr	r6, [r1, #8]
 800c232:	4682      	mov	sl, r0
 800c234:	429e      	cmp	r6, r3
 800c236:	460c      	mov	r4, r1
 800c238:	4690      	mov	r8, r2
 800c23a:	461f      	mov	r7, r3
 800c23c:	d838      	bhi.n	800c2b0 <__ssputs_r+0x84>
 800c23e:	898a      	ldrh	r2, [r1, #12]
 800c240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c244:	d032      	beq.n	800c2ac <__ssputs_r+0x80>
 800c246:	6825      	ldr	r5, [r4, #0]
 800c248:	6909      	ldr	r1, [r1, #16]
 800c24a:	3301      	adds	r3, #1
 800c24c:	eba5 0901 	sub.w	r9, r5, r1
 800c250:	6965      	ldr	r5, [r4, #20]
 800c252:	444b      	add	r3, r9
 800c254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c25c:	106d      	asrs	r5, r5, #1
 800c25e:	429d      	cmp	r5, r3
 800c260:	bf38      	it	cc
 800c262:	461d      	movcc	r5, r3
 800c264:	0553      	lsls	r3, r2, #21
 800c266:	d531      	bpl.n	800c2cc <__ssputs_r+0xa0>
 800c268:	4629      	mov	r1, r5
 800c26a:	f7ff ff85 	bl	800c178 <_malloc_r>
 800c26e:	4606      	mov	r6, r0
 800c270:	b950      	cbnz	r0, 800c288 <__ssputs_r+0x5c>
 800c272:	230c      	movs	r3, #12
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	f8ca 3000 	str.w	r3, [sl]
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c282:	81a3      	strh	r3, [r4, #12]
 800c284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c288:	464a      	mov	r2, r9
 800c28a:	6921      	ldr	r1, [r4, #16]
 800c28c:	f7ff fa54 	bl	800b738 <memcpy>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	6126      	str	r6, [r4, #16]
 800c29e:	444e      	add	r6, r9
 800c2a0:	6026      	str	r6, [r4, #0]
 800c2a2:	463e      	mov	r6, r7
 800c2a4:	6165      	str	r5, [r4, #20]
 800c2a6:	eba5 0509 	sub.w	r5, r5, r9
 800c2aa:	60a5      	str	r5, [r4, #8]
 800c2ac:	42be      	cmp	r6, r7
 800c2ae:	d900      	bls.n	800c2b2 <__ssputs_r+0x86>
 800c2b0:	463e      	mov	r6, r7
 800c2b2:	4632      	mov	r2, r6
 800c2b4:	4641      	mov	r1, r8
 800c2b6:	6820      	ldr	r0, [r4, #0]
 800c2b8:	f000 f97a 	bl	800c5b0 <memmove>
 800c2bc:	68a3      	ldr	r3, [r4, #8]
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	1b9b      	subs	r3, r3, r6
 800c2c2:	4432      	add	r2, r6
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	60a3      	str	r3, [r4, #8]
 800c2c8:	6022      	str	r2, [r4, #0]
 800c2ca:	e7db      	b.n	800c284 <__ssputs_r+0x58>
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	f000 f995 	bl	800c5fc <_realloc_r>
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d1e1      	bne.n	800c29c <__ssputs_r+0x70>
 800c2d8:	4650      	mov	r0, sl
 800c2da:	6921      	ldr	r1, [r4, #16]
 800c2dc:	f7ff ff00 	bl	800c0e0 <_free_r>
 800c2e0:	e7c7      	b.n	800c272 <__ssputs_r+0x46>
	...

0800c2e4 <_svfiprintf_r>:
 800c2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e8:	4698      	mov	r8, r3
 800c2ea:	898b      	ldrh	r3, [r1, #12]
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	061b      	lsls	r3, r3, #24
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	4614      	mov	r4, r2
 800c2f4:	b09d      	sub	sp, #116	; 0x74
 800c2f6:	d50e      	bpl.n	800c316 <_svfiprintf_r+0x32>
 800c2f8:	690b      	ldr	r3, [r1, #16]
 800c2fa:	b963      	cbnz	r3, 800c316 <_svfiprintf_r+0x32>
 800c2fc:	2140      	movs	r1, #64	; 0x40
 800c2fe:	f7ff ff3b 	bl	800c178 <_malloc_r>
 800c302:	6028      	str	r0, [r5, #0]
 800c304:	6128      	str	r0, [r5, #16]
 800c306:	b920      	cbnz	r0, 800c312 <_svfiprintf_r+0x2e>
 800c308:	230c      	movs	r3, #12
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	f04f 30ff 	mov.w	r0, #4294967295
 800c310:	e0d1      	b.n	800c4b6 <_svfiprintf_r+0x1d2>
 800c312:	2340      	movs	r3, #64	; 0x40
 800c314:	616b      	str	r3, [r5, #20]
 800c316:	2300      	movs	r3, #0
 800c318:	9309      	str	r3, [sp, #36]	; 0x24
 800c31a:	2320      	movs	r3, #32
 800c31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c320:	2330      	movs	r3, #48	; 0x30
 800c322:	f04f 0901 	mov.w	r9, #1
 800c326:	f8cd 800c 	str.w	r8, [sp, #12]
 800c32a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c4d0 <_svfiprintf_r+0x1ec>
 800c32e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c332:	4623      	mov	r3, r4
 800c334:	469a      	mov	sl, r3
 800c336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c33a:	b10a      	cbz	r2, 800c340 <_svfiprintf_r+0x5c>
 800c33c:	2a25      	cmp	r2, #37	; 0x25
 800c33e:	d1f9      	bne.n	800c334 <_svfiprintf_r+0x50>
 800c340:	ebba 0b04 	subs.w	fp, sl, r4
 800c344:	d00b      	beq.n	800c35e <_svfiprintf_r+0x7a>
 800c346:	465b      	mov	r3, fp
 800c348:	4622      	mov	r2, r4
 800c34a:	4629      	mov	r1, r5
 800c34c:	4638      	mov	r0, r7
 800c34e:	f7ff ff6d 	bl	800c22c <__ssputs_r>
 800c352:	3001      	adds	r0, #1
 800c354:	f000 80aa 	beq.w	800c4ac <_svfiprintf_r+0x1c8>
 800c358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c35a:	445a      	add	r2, fp
 800c35c:	9209      	str	r2, [sp, #36]	; 0x24
 800c35e:	f89a 3000 	ldrb.w	r3, [sl]
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 80a2 	beq.w	800c4ac <_svfiprintf_r+0x1c8>
 800c368:	2300      	movs	r3, #0
 800c36a:	f04f 32ff 	mov.w	r2, #4294967295
 800c36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c372:	f10a 0a01 	add.w	sl, sl, #1
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	9307      	str	r3, [sp, #28]
 800c37a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c37e:	931a      	str	r3, [sp, #104]	; 0x68
 800c380:	4654      	mov	r4, sl
 800c382:	2205      	movs	r2, #5
 800c384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c388:	4851      	ldr	r0, [pc, #324]	; (800c4d0 <_svfiprintf_r+0x1ec>)
 800c38a:	f7ff f9c7 	bl	800b71c <memchr>
 800c38e:	9a04      	ldr	r2, [sp, #16]
 800c390:	b9d8      	cbnz	r0, 800c3ca <_svfiprintf_r+0xe6>
 800c392:	06d0      	lsls	r0, r2, #27
 800c394:	bf44      	itt	mi
 800c396:	2320      	movmi	r3, #32
 800c398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c39c:	0711      	lsls	r1, r2, #28
 800c39e:	bf44      	itt	mi
 800c3a0:	232b      	movmi	r3, #43	; 0x2b
 800c3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ac:	d015      	beq.n	800c3da <_svfiprintf_r+0xf6>
 800c3ae:	4654      	mov	r4, sl
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	f04f 0c0a 	mov.w	ip, #10
 800c3b6:	9a07      	ldr	r2, [sp, #28]
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3be:	3b30      	subs	r3, #48	; 0x30
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	d94e      	bls.n	800c462 <_svfiprintf_r+0x17e>
 800c3c4:	b1b0      	cbz	r0, 800c3f4 <_svfiprintf_r+0x110>
 800c3c6:	9207      	str	r2, [sp, #28]
 800c3c8:	e014      	b.n	800c3f4 <_svfiprintf_r+0x110>
 800c3ca:	eba0 0308 	sub.w	r3, r0, r8
 800c3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	46a2      	mov	sl, r4
 800c3d6:	9304      	str	r3, [sp, #16]
 800c3d8:	e7d2      	b.n	800c380 <_svfiprintf_r+0x9c>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	1d19      	adds	r1, r3, #4
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	9103      	str	r1, [sp, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bfbb      	ittet	lt
 800c3e6:	425b      	neglt	r3, r3
 800c3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ec:	9307      	strge	r3, [sp, #28]
 800c3ee:	9307      	strlt	r3, [sp, #28]
 800c3f0:	bfb8      	it	lt
 800c3f2:	9204      	strlt	r2, [sp, #16]
 800c3f4:	7823      	ldrb	r3, [r4, #0]
 800c3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c3f8:	d10c      	bne.n	800c414 <_svfiprintf_r+0x130>
 800c3fa:	7863      	ldrb	r3, [r4, #1]
 800c3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c3fe:	d135      	bne.n	800c46c <_svfiprintf_r+0x188>
 800c400:	9b03      	ldr	r3, [sp, #12]
 800c402:	3402      	adds	r4, #2
 800c404:	1d1a      	adds	r2, r3, #4
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	9203      	str	r2, [sp, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bfb8      	it	lt
 800c40e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c412:	9305      	str	r3, [sp, #20]
 800c414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4e0 <_svfiprintf_r+0x1fc>
 800c418:	2203      	movs	r2, #3
 800c41a:	4650      	mov	r0, sl
 800c41c:	7821      	ldrb	r1, [r4, #0]
 800c41e:	f7ff f97d 	bl	800b71c <memchr>
 800c422:	b140      	cbz	r0, 800c436 <_svfiprintf_r+0x152>
 800c424:	2340      	movs	r3, #64	; 0x40
 800c426:	eba0 000a 	sub.w	r0, r0, sl
 800c42a:	fa03 f000 	lsl.w	r0, r3, r0
 800c42e:	9b04      	ldr	r3, [sp, #16]
 800c430:	3401      	adds	r4, #1
 800c432:	4303      	orrs	r3, r0
 800c434:	9304      	str	r3, [sp, #16]
 800c436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43a:	2206      	movs	r2, #6
 800c43c:	4825      	ldr	r0, [pc, #148]	; (800c4d4 <_svfiprintf_r+0x1f0>)
 800c43e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c442:	f7ff f96b 	bl	800b71c <memchr>
 800c446:	2800      	cmp	r0, #0
 800c448:	d038      	beq.n	800c4bc <_svfiprintf_r+0x1d8>
 800c44a:	4b23      	ldr	r3, [pc, #140]	; (800c4d8 <_svfiprintf_r+0x1f4>)
 800c44c:	bb1b      	cbnz	r3, 800c496 <_svfiprintf_r+0x1b2>
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	3307      	adds	r3, #7
 800c452:	f023 0307 	bic.w	r3, r3, #7
 800c456:	3308      	adds	r3, #8
 800c458:	9303      	str	r3, [sp, #12]
 800c45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c45c:	4433      	add	r3, r6
 800c45e:	9309      	str	r3, [sp, #36]	; 0x24
 800c460:	e767      	b.n	800c332 <_svfiprintf_r+0x4e>
 800c462:	460c      	mov	r4, r1
 800c464:	2001      	movs	r0, #1
 800c466:	fb0c 3202 	mla	r2, ip, r2, r3
 800c46a:	e7a5      	b.n	800c3b8 <_svfiprintf_r+0xd4>
 800c46c:	2300      	movs	r3, #0
 800c46e:	f04f 0c0a 	mov.w	ip, #10
 800c472:	4619      	mov	r1, r3
 800c474:	3401      	adds	r4, #1
 800c476:	9305      	str	r3, [sp, #20]
 800c478:	4620      	mov	r0, r4
 800c47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c47e:	3a30      	subs	r2, #48	; 0x30
 800c480:	2a09      	cmp	r2, #9
 800c482:	d903      	bls.n	800c48c <_svfiprintf_r+0x1a8>
 800c484:	2b00      	cmp	r3, #0
 800c486:	d0c5      	beq.n	800c414 <_svfiprintf_r+0x130>
 800c488:	9105      	str	r1, [sp, #20]
 800c48a:	e7c3      	b.n	800c414 <_svfiprintf_r+0x130>
 800c48c:	4604      	mov	r4, r0
 800c48e:	2301      	movs	r3, #1
 800c490:	fb0c 2101 	mla	r1, ip, r1, r2
 800c494:	e7f0      	b.n	800c478 <_svfiprintf_r+0x194>
 800c496:	ab03      	add	r3, sp, #12
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	462a      	mov	r2, r5
 800c49c:	4638      	mov	r0, r7
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <_svfiprintf_r+0x1f8>)
 800c4a0:	a904      	add	r1, sp, #16
 800c4a2:	f7fc fa55 	bl	8008950 <_printf_float>
 800c4a6:	1c42      	adds	r2, r0, #1
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	d1d6      	bne.n	800c45a <_svfiprintf_r+0x176>
 800c4ac:	89ab      	ldrh	r3, [r5, #12]
 800c4ae:	065b      	lsls	r3, r3, #25
 800c4b0:	f53f af2c 	bmi.w	800c30c <_svfiprintf_r+0x28>
 800c4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4b6:	b01d      	add	sp, #116	; 0x74
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	ab03      	add	r3, sp, #12
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	462a      	mov	r2, r5
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <_svfiprintf_r+0x1f8>)
 800c4c6:	a904      	add	r1, sp, #16
 800c4c8:	f7fc fcde 	bl	8008e88 <_printf_i>
 800c4cc:	e7eb      	b.n	800c4a6 <_svfiprintf_r+0x1c2>
 800c4ce:	bf00      	nop
 800c4d0:	0800d8bc 	.word	0x0800d8bc
 800c4d4:	0800d8c6 	.word	0x0800d8c6
 800c4d8:	08008951 	.word	0x08008951
 800c4dc:	0800c22d 	.word	0x0800c22d
 800c4e0:	0800d8c2 	.word	0x0800d8c2

0800c4e4 <nan>:
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	4901      	ldr	r1, [pc, #4]	; (800c4ec <nan+0x8>)
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	7ff80000 	.word	0x7ff80000

0800c4f0 <_sbrk_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	4d05      	ldr	r5, [pc, #20]	; (800c50c <_sbrk_r+0x1c>)
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	4608      	mov	r0, r1
 800c4fa:	602b      	str	r3, [r5, #0]
 800c4fc:	f7f6 fa7e 	bl	80029fc <_sbrk>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_sbrk_r+0x1a>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_sbrk_r+0x1a>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	200003a0 	.word	0x200003a0

0800c510 <strncmp>:
 800c510:	b510      	push	{r4, lr}
 800c512:	b16a      	cbz	r2, 800c530 <strncmp+0x20>
 800c514:	3901      	subs	r1, #1
 800c516:	1884      	adds	r4, r0, r2
 800c518:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c51c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c520:	4293      	cmp	r3, r2
 800c522:	d103      	bne.n	800c52c <strncmp+0x1c>
 800c524:	42a0      	cmp	r0, r4
 800c526:	d001      	beq.n	800c52c <strncmp+0x1c>
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1f5      	bne.n	800c518 <strncmp+0x8>
 800c52c:	1a98      	subs	r0, r3, r2
 800c52e:	bd10      	pop	{r4, pc}
 800c530:	4610      	mov	r0, r2
 800c532:	e7fc      	b.n	800c52e <strncmp+0x1e>

0800c534 <__ascii_wctomb>:
 800c534:	4603      	mov	r3, r0
 800c536:	4608      	mov	r0, r1
 800c538:	b141      	cbz	r1, 800c54c <__ascii_wctomb+0x18>
 800c53a:	2aff      	cmp	r2, #255	; 0xff
 800c53c:	d904      	bls.n	800c548 <__ascii_wctomb+0x14>
 800c53e:	228a      	movs	r2, #138	; 0x8a
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	4770      	bx	lr
 800c548:	2001      	movs	r0, #1
 800c54a:	700a      	strb	r2, [r1, #0]
 800c54c:	4770      	bx	lr
	...

0800c550 <__assert_func>:
 800c550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c552:	4614      	mov	r4, r2
 800c554:	461a      	mov	r2, r3
 800c556:	4b09      	ldr	r3, [pc, #36]	; (800c57c <__assert_func+0x2c>)
 800c558:	4605      	mov	r5, r0
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68d8      	ldr	r0, [r3, #12]
 800c55e:	b14c      	cbz	r4, 800c574 <__assert_func+0x24>
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <__assert_func+0x30>)
 800c562:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c566:	9100      	str	r1, [sp, #0]
 800c568:	462b      	mov	r3, r5
 800c56a:	4906      	ldr	r1, [pc, #24]	; (800c584 <__assert_func+0x34>)
 800c56c:	f000 f80e 	bl	800c58c <fiprintf>
 800c570:	f000 fa82 	bl	800ca78 <abort>
 800c574:	4b04      	ldr	r3, [pc, #16]	; (800c588 <__assert_func+0x38>)
 800c576:	461c      	mov	r4, r3
 800c578:	e7f3      	b.n	800c562 <__assert_func+0x12>
 800c57a:	bf00      	nop
 800c57c:	2000000c 	.word	0x2000000c
 800c580:	0800d8cd 	.word	0x0800d8cd
 800c584:	0800d8da 	.word	0x0800d8da
 800c588:	0800d908 	.word	0x0800d908

0800c58c <fiprintf>:
 800c58c:	b40e      	push	{r1, r2, r3}
 800c58e:	b503      	push	{r0, r1, lr}
 800c590:	4601      	mov	r1, r0
 800c592:	ab03      	add	r3, sp, #12
 800c594:	4805      	ldr	r0, [pc, #20]	; (800c5ac <fiprintf+0x20>)
 800c596:	f853 2b04 	ldr.w	r2, [r3], #4
 800c59a:	6800      	ldr	r0, [r0, #0]
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	f000 f87b 	bl	800c698 <_vfiprintf_r>
 800c5a2:	b002      	add	sp, #8
 800c5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	4770      	bx	lr
 800c5ac:	2000000c 	.word	0x2000000c

0800c5b0 <memmove>:
 800c5b0:	4288      	cmp	r0, r1
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	eb01 0402 	add.w	r4, r1, r2
 800c5b8:	d902      	bls.n	800c5c0 <memmove+0x10>
 800c5ba:	4284      	cmp	r4, r0
 800c5bc:	4623      	mov	r3, r4
 800c5be:	d807      	bhi.n	800c5d0 <memmove+0x20>
 800c5c0:	1e43      	subs	r3, r0, #1
 800c5c2:	42a1      	cmp	r1, r4
 800c5c4:	d008      	beq.n	800c5d8 <memmove+0x28>
 800c5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ce:	e7f8      	b.n	800c5c2 <memmove+0x12>
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	4402      	add	r2, r0
 800c5d4:	428a      	cmp	r2, r1
 800c5d6:	d100      	bne.n	800c5da <memmove+0x2a>
 800c5d8:	bd10      	pop	{r4, pc}
 800c5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5e2:	e7f7      	b.n	800c5d4 <memmove+0x24>

0800c5e4 <__malloc_lock>:
 800c5e4:	4801      	ldr	r0, [pc, #4]	; (800c5ec <__malloc_lock+0x8>)
 800c5e6:	f000 bc07 	b.w	800cdf8 <__retarget_lock_acquire_recursive>
 800c5ea:	bf00      	nop
 800c5ec:	200003a8 	.word	0x200003a8

0800c5f0 <__malloc_unlock>:
 800c5f0:	4801      	ldr	r0, [pc, #4]	; (800c5f8 <__malloc_unlock+0x8>)
 800c5f2:	f000 bc02 	b.w	800cdfa <__retarget_lock_release_recursive>
 800c5f6:	bf00      	nop
 800c5f8:	200003a8 	.word	0x200003a8

0800c5fc <_realloc_r>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	4607      	mov	r7, r0
 800c600:	4614      	mov	r4, r2
 800c602:	460e      	mov	r6, r1
 800c604:	b921      	cbnz	r1, 800c610 <_realloc_r+0x14>
 800c606:	4611      	mov	r1, r2
 800c608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c60c:	f7ff bdb4 	b.w	800c178 <_malloc_r>
 800c610:	b922      	cbnz	r2, 800c61c <_realloc_r+0x20>
 800c612:	f7ff fd65 	bl	800c0e0 <_free_r>
 800c616:	4625      	mov	r5, r4
 800c618:	4628      	mov	r0, r5
 800c61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c61c:	f000 fc52 	bl	800cec4 <_malloc_usable_size_r>
 800c620:	42a0      	cmp	r0, r4
 800c622:	d20f      	bcs.n	800c644 <_realloc_r+0x48>
 800c624:	4621      	mov	r1, r4
 800c626:	4638      	mov	r0, r7
 800c628:	f7ff fda6 	bl	800c178 <_malloc_r>
 800c62c:	4605      	mov	r5, r0
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0f2      	beq.n	800c618 <_realloc_r+0x1c>
 800c632:	4631      	mov	r1, r6
 800c634:	4622      	mov	r2, r4
 800c636:	f7ff f87f 	bl	800b738 <memcpy>
 800c63a:	4631      	mov	r1, r6
 800c63c:	4638      	mov	r0, r7
 800c63e:	f7ff fd4f 	bl	800c0e0 <_free_r>
 800c642:	e7e9      	b.n	800c618 <_realloc_r+0x1c>
 800c644:	4635      	mov	r5, r6
 800c646:	e7e7      	b.n	800c618 <_realloc_r+0x1c>

0800c648 <__sfputc_r>:
 800c648:	6893      	ldr	r3, [r2, #8]
 800c64a:	b410      	push	{r4}
 800c64c:	3b01      	subs	r3, #1
 800c64e:	2b00      	cmp	r3, #0
 800c650:	6093      	str	r3, [r2, #8]
 800c652:	da07      	bge.n	800c664 <__sfputc_r+0x1c>
 800c654:	6994      	ldr	r4, [r2, #24]
 800c656:	42a3      	cmp	r3, r4
 800c658:	db01      	blt.n	800c65e <__sfputc_r+0x16>
 800c65a:	290a      	cmp	r1, #10
 800c65c:	d102      	bne.n	800c664 <__sfputc_r+0x1c>
 800c65e:	bc10      	pop	{r4}
 800c660:	f000 b94a 	b.w	800c8f8 <__swbuf_r>
 800c664:	6813      	ldr	r3, [r2, #0]
 800c666:	1c58      	adds	r0, r3, #1
 800c668:	6010      	str	r0, [r2, #0]
 800c66a:	7019      	strb	r1, [r3, #0]
 800c66c:	4608      	mov	r0, r1
 800c66e:	bc10      	pop	{r4}
 800c670:	4770      	bx	lr

0800c672 <__sfputs_r>:
 800c672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	4614      	mov	r4, r2
 800c67a:	18d5      	adds	r5, r2, r3
 800c67c:	42ac      	cmp	r4, r5
 800c67e:	d101      	bne.n	800c684 <__sfputs_r+0x12>
 800c680:	2000      	movs	r0, #0
 800c682:	e007      	b.n	800c694 <__sfputs_r+0x22>
 800c684:	463a      	mov	r2, r7
 800c686:	4630      	mov	r0, r6
 800c688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68c:	f7ff ffdc 	bl	800c648 <__sfputc_r>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d1f3      	bne.n	800c67c <__sfputs_r+0xa>
 800c694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c698 <_vfiprintf_r>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	460d      	mov	r5, r1
 800c69e:	4614      	mov	r4, r2
 800c6a0:	4698      	mov	r8, r3
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	b09d      	sub	sp, #116	; 0x74
 800c6a6:	b118      	cbz	r0, 800c6b0 <_vfiprintf_r+0x18>
 800c6a8:	6983      	ldr	r3, [r0, #24]
 800c6aa:	b90b      	cbnz	r3, 800c6b0 <_vfiprintf_r+0x18>
 800c6ac:	f000 fb06 	bl	800ccbc <__sinit>
 800c6b0:	4b89      	ldr	r3, [pc, #548]	; (800c8d8 <_vfiprintf_r+0x240>)
 800c6b2:	429d      	cmp	r5, r3
 800c6b4:	d11b      	bne.n	800c6ee <_vfiprintf_r+0x56>
 800c6b6:	6875      	ldr	r5, [r6, #4]
 800c6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ba:	07d9      	lsls	r1, r3, #31
 800c6bc:	d405      	bmi.n	800c6ca <_vfiprintf_r+0x32>
 800c6be:	89ab      	ldrh	r3, [r5, #12]
 800c6c0:	059a      	lsls	r2, r3, #22
 800c6c2:	d402      	bmi.n	800c6ca <_vfiprintf_r+0x32>
 800c6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c6:	f000 fb97 	bl	800cdf8 <__retarget_lock_acquire_recursive>
 800c6ca:	89ab      	ldrh	r3, [r5, #12]
 800c6cc:	071b      	lsls	r3, r3, #28
 800c6ce:	d501      	bpl.n	800c6d4 <_vfiprintf_r+0x3c>
 800c6d0:	692b      	ldr	r3, [r5, #16]
 800c6d2:	b9eb      	cbnz	r3, 800c710 <_vfiprintf_r+0x78>
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f000 f960 	bl	800c99c <__swsetup_r>
 800c6dc:	b1c0      	cbz	r0, 800c710 <_vfiprintf_r+0x78>
 800c6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6e0:	07dc      	lsls	r4, r3, #31
 800c6e2:	d50e      	bpl.n	800c702 <_vfiprintf_r+0x6a>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	b01d      	add	sp, #116	; 0x74
 800c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	4b7b      	ldr	r3, [pc, #492]	; (800c8dc <_vfiprintf_r+0x244>)
 800c6f0:	429d      	cmp	r5, r3
 800c6f2:	d101      	bne.n	800c6f8 <_vfiprintf_r+0x60>
 800c6f4:	68b5      	ldr	r5, [r6, #8]
 800c6f6:	e7df      	b.n	800c6b8 <_vfiprintf_r+0x20>
 800c6f8:	4b79      	ldr	r3, [pc, #484]	; (800c8e0 <_vfiprintf_r+0x248>)
 800c6fa:	429d      	cmp	r5, r3
 800c6fc:	bf08      	it	eq
 800c6fe:	68f5      	ldreq	r5, [r6, #12]
 800c700:	e7da      	b.n	800c6b8 <_vfiprintf_r+0x20>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	0598      	lsls	r0, r3, #22
 800c706:	d4ed      	bmi.n	800c6e4 <_vfiprintf_r+0x4c>
 800c708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c70a:	f000 fb76 	bl	800cdfa <__retarget_lock_release_recursive>
 800c70e:	e7e9      	b.n	800c6e4 <_vfiprintf_r+0x4c>
 800c710:	2300      	movs	r3, #0
 800c712:	9309      	str	r3, [sp, #36]	; 0x24
 800c714:	2320      	movs	r3, #32
 800c716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c71a:	2330      	movs	r3, #48	; 0x30
 800c71c:	f04f 0901 	mov.w	r9, #1
 800c720:	f8cd 800c 	str.w	r8, [sp, #12]
 800c724:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c8e4 <_vfiprintf_r+0x24c>
 800c728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c72c:	4623      	mov	r3, r4
 800c72e:	469a      	mov	sl, r3
 800c730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c734:	b10a      	cbz	r2, 800c73a <_vfiprintf_r+0xa2>
 800c736:	2a25      	cmp	r2, #37	; 0x25
 800c738:	d1f9      	bne.n	800c72e <_vfiprintf_r+0x96>
 800c73a:	ebba 0b04 	subs.w	fp, sl, r4
 800c73e:	d00b      	beq.n	800c758 <_vfiprintf_r+0xc0>
 800c740:	465b      	mov	r3, fp
 800c742:	4622      	mov	r2, r4
 800c744:	4629      	mov	r1, r5
 800c746:	4630      	mov	r0, r6
 800c748:	f7ff ff93 	bl	800c672 <__sfputs_r>
 800c74c:	3001      	adds	r0, #1
 800c74e:	f000 80aa 	beq.w	800c8a6 <_vfiprintf_r+0x20e>
 800c752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c754:	445a      	add	r2, fp
 800c756:	9209      	str	r2, [sp, #36]	; 0x24
 800c758:	f89a 3000 	ldrb.w	r3, [sl]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 80a2 	beq.w	800c8a6 <_vfiprintf_r+0x20e>
 800c762:	2300      	movs	r3, #0
 800c764:	f04f 32ff 	mov.w	r2, #4294967295
 800c768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c76c:	f10a 0a01 	add.w	sl, sl, #1
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	9307      	str	r3, [sp, #28]
 800c774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c778:	931a      	str	r3, [sp, #104]	; 0x68
 800c77a:	4654      	mov	r4, sl
 800c77c:	2205      	movs	r2, #5
 800c77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c782:	4858      	ldr	r0, [pc, #352]	; (800c8e4 <_vfiprintf_r+0x24c>)
 800c784:	f7fe ffca 	bl	800b71c <memchr>
 800c788:	9a04      	ldr	r2, [sp, #16]
 800c78a:	b9d8      	cbnz	r0, 800c7c4 <_vfiprintf_r+0x12c>
 800c78c:	06d1      	lsls	r1, r2, #27
 800c78e:	bf44      	itt	mi
 800c790:	2320      	movmi	r3, #32
 800c792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c796:	0713      	lsls	r3, r2, #28
 800c798:	bf44      	itt	mi
 800c79a:	232b      	movmi	r3, #43	; 0x2b
 800c79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a6:	d015      	beq.n	800c7d4 <_vfiprintf_r+0x13c>
 800c7a8:	4654      	mov	r4, sl
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	f04f 0c0a 	mov.w	ip, #10
 800c7b0:	9a07      	ldr	r2, [sp, #28]
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b8:	3b30      	subs	r3, #48	; 0x30
 800c7ba:	2b09      	cmp	r3, #9
 800c7bc:	d94e      	bls.n	800c85c <_vfiprintf_r+0x1c4>
 800c7be:	b1b0      	cbz	r0, 800c7ee <_vfiprintf_r+0x156>
 800c7c0:	9207      	str	r2, [sp, #28]
 800c7c2:	e014      	b.n	800c7ee <_vfiprintf_r+0x156>
 800c7c4:	eba0 0308 	sub.w	r3, r0, r8
 800c7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	46a2      	mov	sl, r4
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	e7d2      	b.n	800c77a <_vfiprintf_r+0xe2>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	1d19      	adds	r1, r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	9103      	str	r1, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bfbb      	ittet	lt
 800c7e0:	425b      	neglt	r3, r3
 800c7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e6:	9307      	strge	r3, [sp, #28]
 800c7e8:	9307      	strlt	r3, [sp, #28]
 800c7ea:	bfb8      	it	lt
 800c7ec:	9204      	strlt	r2, [sp, #16]
 800c7ee:	7823      	ldrb	r3, [r4, #0]
 800c7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c7f2:	d10c      	bne.n	800c80e <_vfiprintf_r+0x176>
 800c7f4:	7863      	ldrb	r3, [r4, #1]
 800c7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f8:	d135      	bne.n	800c866 <_vfiprintf_r+0x1ce>
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	3402      	adds	r4, #2
 800c7fe:	1d1a      	adds	r2, r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	9203      	str	r2, [sp, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	bfb8      	it	lt
 800c808:	f04f 33ff 	movlt.w	r3, #4294967295
 800c80c:	9305      	str	r3, [sp, #20]
 800c80e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8f4 <_vfiprintf_r+0x25c>
 800c812:	2203      	movs	r2, #3
 800c814:	4650      	mov	r0, sl
 800c816:	7821      	ldrb	r1, [r4, #0]
 800c818:	f7fe ff80 	bl	800b71c <memchr>
 800c81c:	b140      	cbz	r0, 800c830 <_vfiprintf_r+0x198>
 800c81e:	2340      	movs	r3, #64	; 0x40
 800c820:	eba0 000a 	sub.w	r0, r0, sl
 800c824:	fa03 f000 	lsl.w	r0, r3, r0
 800c828:	9b04      	ldr	r3, [sp, #16]
 800c82a:	3401      	adds	r4, #1
 800c82c:	4303      	orrs	r3, r0
 800c82e:	9304      	str	r3, [sp, #16]
 800c830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c834:	2206      	movs	r2, #6
 800c836:	482c      	ldr	r0, [pc, #176]	; (800c8e8 <_vfiprintf_r+0x250>)
 800c838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c83c:	f7fe ff6e 	bl	800b71c <memchr>
 800c840:	2800      	cmp	r0, #0
 800c842:	d03f      	beq.n	800c8c4 <_vfiprintf_r+0x22c>
 800c844:	4b29      	ldr	r3, [pc, #164]	; (800c8ec <_vfiprintf_r+0x254>)
 800c846:	bb1b      	cbnz	r3, 800c890 <_vfiprintf_r+0x1f8>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	3307      	adds	r3, #7
 800c84c:	f023 0307 	bic.w	r3, r3, #7
 800c850:	3308      	adds	r3, #8
 800c852:	9303      	str	r3, [sp, #12]
 800c854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c856:	443b      	add	r3, r7
 800c858:	9309      	str	r3, [sp, #36]	; 0x24
 800c85a:	e767      	b.n	800c72c <_vfiprintf_r+0x94>
 800c85c:	460c      	mov	r4, r1
 800c85e:	2001      	movs	r0, #1
 800c860:	fb0c 3202 	mla	r2, ip, r2, r3
 800c864:	e7a5      	b.n	800c7b2 <_vfiprintf_r+0x11a>
 800c866:	2300      	movs	r3, #0
 800c868:	f04f 0c0a 	mov.w	ip, #10
 800c86c:	4619      	mov	r1, r3
 800c86e:	3401      	adds	r4, #1
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	4620      	mov	r0, r4
 800c874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c878:	3a30      	subs	r2, #48	; 0x30
 800c87a:	2a09      	cmp	r2, #9
 800c87c:	d903      	bls.n	800c886 <_vfiprintf_r+0x1ee>
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d0c5      	beq.n	800c80e <_vfiprintf_r+0x176>
 800c882:	9105      	str	r1, [sp, #20]
 800c884:	e7c3      	b.n	800c80e <_vfiprintf_r+0x176>
 800c886:	4604      	mov	r4, r0
 800c888:	2301      	movs	r3, #1
 800c88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c88e:	e7f0      	b.n	800c872 <_vfiprintf_r+0x1da>
 800c890:	ab03      	add	r3, sp, #12
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	462a      	mov	r2, r5
 800c896:	4630      	mov	r0, r6
 800c898:	4b15      	ldr	r3, [pc, #84]	; (800c8f0 <_vfiprintf_r+0x258>)
 800c89a:	a904      	add	r1, sp, #16
 800c89c:	f7fc f858 	bl	8008950 <_printf_float>
 800c8a0:	4607      	mov	r7, r0
 800c8a2:	1c78      	adds	r0, r7, #1
 800c8a4:	d1d6      	bne.n	800c854 <_vfiprintf_r+0x1bc>
 800c8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8a8:	07d9      	lsls	r1, r3, #31
 800c8aa:	d405      	bmi.n	800c8b8 <_vfiprintf_r+0x220>
 800c8ac:	89ab      	ldrh	r3, [r5, #12]
 800c8ae:	059a      	lsls	r2, r3, #22
 800c8b0:	d402      	bmi.n	800c8b8 <_vfiprintf_r+0x220>
 800c8b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8b4:	f000 faa1 	bl	800cdfa <__retarget_lock_release_recursive>
 800c8b8:	89ab      	ldrh	r3, [r5, #12]
 800c8ba:	065b      	lsls	r3, r3, #25
 800c8bc:	f53f af12 	bmi.w	800c6e4 <_vfiprintf_r+0x4c>
 800c8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c2:	e711      	b.n	800c6e8 <_vfiprintf_r+0x50>
 800c8c4:	ab03      	add	r3, sp, #12
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	4b08      	ldr	r3, [pc, #32]	; (800c8f0 <_vfiprintf_r+0x258>)
 800c8ce:	a904      	add	r1, sp, #16
 800c8d0:	f7fc fada 	bl	8008e88 <_printf_i>
 800c8d4:	e7e4      	b.n	800c8a0 <_vfiprintf_r+0x208>
 800c8d6:	bf00      	nop
 800c8d8:	0800d92c 	.word	0x0800d92c
 800c8dc:	0800d94c 	.word	0x0800d94c
 800c8e0:	0800d90c 	.word	0x0800d90c
 800c8e4:	0800d8bc 	.word	0x0800d8bc
 800c8e8:	0800d8c6 	.word	0x0800d8c6
 800c8ec:	08008951 	.word	0x08008951
 800c8f0:	0800c673 	.word	0x0800c673
 800c8f4:	0800d8c2 	.word	0x0800d8c2

0800c8f8 <__swbuf_r>:
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	460e      	mov	r6, r1
 800c8fc:	4614      	mov	r4, r2
 800c8fe:	4605      	mov	r5, r0
 800c900:	b118      	cbz	r0, 800c90a <__swbuf_r+0x12>
 800c902:	6983      	ldr	r3, [r0, #24]
 800c904:	b90b      	cbnz	r3, 800c90a <__swbuf_r+0x12>
 800c906:	f000 f9d9 	bl	800ccbc <__sinit>
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <__swbuf_r+0x98>)
 800c90c:	429c      	cmp	r4, r3
 800c90e:	d12b      	bne.n	800c968 <__swbuf_r+0x70>
 800c910:	686c      	ldr	r4, [r5, #4]
 800c912:	69a3      	ldr	r3, [r4, #24]
 800c914:	60a3      	str	r3, [r4, #8]
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	071a      	lsls	r2, r3, #28
 800c91a:	d52f      	bpl.n	800c97c <__swbuf_r+0x84>
 800c91c:	6923      	ldr	r3, [r4, #16]
 800c91e:	b36b      	cbz	r3, 800c97c <__swbuf_r+0x84>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	6820      	ldr	r0, [r4, #0]
 800c924:	b2f6      	uxtb	r6, r6
 800c926:	1ac0      	subs	r0, r0, r3
 800c928:	6963      	ldr	r3, [r4, #20]
 800c92a:	4637      	mov	r7, r6
 800c92c:	4283      	cmp	r3, r0
 800c92e:	dc04      	bgt.n	800c93a <__swbuf_r+0x42>
 800c930:	4621      	mov	r1, r4
 800c932:	4628      	mov	r0, r5
 800c934:	f000 f92e 	bl	800cb94 <_fflush_r>
 800c938:	bb30      	cbnz	r0, 800c988 <__swbuf_r+0x90>
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	3001      	adds	r0, #1
 800c93e:	3b01      	subs	r3, #1
 800c940:	60a3      	str	r3, [r4, #8]
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	1c5a      	adds	r2, r3, #1
 800c946:	6022      	str	r2, [r4, #0]
 800c948:	701e      	strb	r6, [r3, #0]
 800c94a:	6963      	ldr	r3, [r4, #20]
 800c94c:	4283      	cmp	r3, r0
 800c94e:	d004      	beq.n	800c95a <__swbuf_r+0x62>
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	07db      	lsls	r3, r3, #31
 800c954:	d506      	bpl.n	800c964 <__swbuf_r+0x6c>
 800c956:	2e0a      	cmp	r6, #10
 800c958:	d104      	bne.n	800c964 <__swbuf_r+0x6c>
 800c95a:	4621      	mov	r1, r4
 800c95c:	4628      	mov	r0, r5
 800c95e:	f000 f919 	bl	800cb94 <_fflush_r>
 800c962:	b988      	cbnz	r0, 800c988 <__swbuf_r+0x90>
 800c964:	4638      	mov	r0, r7
 800c966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c968:	4b0a      	ldr	r3, [pc, #40]	; (800c994 <__swbuf_r+0x9c>)
 800c96a:	429c      	cmp	r4, r3
 800c96c:	d101      	bne.n	800c972 <__swbuf_r+0x7a>
 800c96e:	68ac      	ldr	r4, [r5, #8]
 800c970:	e7cf      	b.n	800c912 <__swbuf_r+0x1a>
 800c972:	4b09      	ldr	r3, [pc, #36]	; (800c998 <__swbuf_r+0xa0>)
 800c974:	429c      	cmp	r4, r3
 800c976:	bf08      	it	eq
 800c978:	68ec      	ldreq	r4, [r5, #12]
 800c97a:	e7ca      	b.n	800c912 <__swbuf_r+0x1a>
 800c97c:	4621      	mov	r1, r4
 800c97e:	4628      	mov	r0, r5
 800c980:	f000 f80c 	bl	800c99c <__swsetup_r>
 800c984:	2800      	cmp	r0, #0
 800c986:	d0cb      	beq.n	800c920 <__swbuf_r+0x28>
 800c988:	f04f 37ff 	mov.w	r7, #4294967295
 800c98c:	e7ea      	b.n	800c964 <__swbuf_r+0x6c>
 800c98e:	bf00      	nop
 800c990:	0800d92c 	.word	0x0800d92c
 800c994:	0800d94c 	.word	0x0800d94c
 800c998:	0800d90c 	.word	0x0800d90c

0800c99c <__swsetup_r>:
 800c99c:	4b32      	ldr	r3, [pc, #200]	; (800ca68 <__swsetup_r+0xcc>)
 800c99e:	b570      	push	{r4, r5, r6, lr}
 800c9a0:	681d      	ldr	r5, [r3, #0]
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	b125      	cbz	r5, 800c9b2 <__swsetup_r+0x16>
 800c9a8:	69ab      	ldr	r3, [r5, #24]
 800c9aa:	b913      	cbnz	r3, 800c9b2 <__swsetup_r+0x16>
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 f985 	bl	800ccbc <__sinit>
 800c9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ca6c <__swsetup_r+0xd0>)
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	d10f      	bne.n	800c9d8 <__swsetup_r+0x3c>
 800c9b8:	686c      	ldr	r4, [r5, #4]
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9c0:	0719      	lsls	r1, r3, #28
 800c9c2:	d42c      	bmi.n	800ca1e <__swsetup_r+0x82>
 800c9c4:	06dd      	lsls	r5, r3, #27
 800c9c6:	d411      	bmi.n	800c9ec <__swsetup_r+0x50>
 800c9c8:	2309      	movs	r3, #9
 800c9ca:	6033      	str	r3, [r6, #0]
 800c9cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	e03e      	b.n	800ca56 <__swsetup_r+0xba>
 800c9d8:	4b25      	ldr	r3, [pc, #148]	; (800ca70 <__swsetup_r+0xd4>)
 800c9da:	429c      	cmp	r4, r3
 800c9dc:	d101      	bne.n	800c9e2 <__swsetup_r+0x46>
 800c9de:	68ac      	ldr	r4, [r5, #8]
 800c9e0:	e7eb      	b.n	800c9ba <__swsetup_r+0x1e>
 800c9e2:	4b24      	ldr	r3, [pc, #144]	; (800ca74 <__swsetup_r+0xd8>)
 800c9e4:	429c      	cmp	r4, r3
 800c9e6:	bf08      	it	eq
 800c9e8:	68ec      	ldreq	r4, [r5, #12]
 800c9ea:	e7e6      	b.n	800c9ba <__swsetup_r+0x1e>
 800c9ec:	0758      	lsls	r0, r3, #29
 800c9ee:	d512      	bpl.n	800ca16 <__swsetup_r+0x7a>
 800c9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f2:	b141      	cbz	r1, 800ca06 <__swsetup_r+0x6a>
 800c9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9f8:	4299      	cmp	r1, r3
 800c9fa:	d002      	beq.n	800ca02 <__swsetup_r+0x66>
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7ff fb6f 	bl	800c0e0 <_free_r>
 800ca02:	2300      	movs	r3, #0
 800ca04:	6363      	str	r3, [r4, #52]	; 0x34
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca0c:	81a3      	strh	r3, [r4, #12]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	6063      	str	r3, [r4, #4]
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	f043 0308 	orr.w	r3, r3, #8
 800ca1c:	81a3      	strh	r3, [r4, #12]
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	b94b      	cbnz	r3, 800ca36 <__swsetup_r+0x9a>
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca2c:	d003      	beq.n	800ca36 <__swsetup_r+0x9a>
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4630      	mov	r0, r6
 800ca32:	f000 fa07 	bl	800ce44 <__smakebuf_r>
 800ca36:	89a0      	ldrh	r0, [r4, #12]
 800ca38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca3c:	f010 0301 	ands.w	r3, r0, #1
 800ca40:	d00a      	beq.n	800ca58 <__swsetup_r+0xbc>
 800ca42:	2300      	movs	r3, #0
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	6963      	ldr	r3, [r4, #20]
 800ca48:	425b      	negs	r3, r3
 800ca4a:	61a3      	str	r3, [r4, #24]
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	b943      	cbnz	r3, 800ca62 <__swsetup_r+0xc6>
 800ca50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca54:	d1ba      	bne.n	800c9cc <__swsetup_r+0x30>
 800ca56:	bd70      	pop	{r4, r5, r6, pc}
 800ca58:	0781      	lsls	r1, r0, #30
 800ca5a:	bf58      	it	pl
 800ca5c:	6963      	ldrpl	r3, [r4, #20]
 800ca5e:	60a3      	str	r3, [r4, #8]
 800ca60:	e7f4      	b.n	800ca4c <__swsetup_r+0xb0>
 800ca62:	2000      	movs	r0, #0
 800ca64:	e7f7      	b.n	800ca56 <__swsetup_r+0xba>
 800ca66:	bf00      	nop
 800ca68:	2000000c 	.word	0x2000000c
 800ca6c:	0800d92c 	.word	0x0800d92c
 800ca70:	0800d94c 	.word	0x0800d94c
 800ca74:	0800d90c 	.word	0x0800d90c

0800ca78 <abort>:
 800ca78:	2006      	movs	r0, #6
 800ca7a:	b508      	push	{r3, lr}
 800ca7c:	f000 fa52 	bl	800cf24 <raise>
 800ca80:	2001      	movs	r0, #1
 800ca82:	f7f5 ff48 	bl	8002916 <_exit>
	...

0800ca88 <__sflush_r>:
 800ca88:	898a      	ldrh	r2, [r1, #12]
 800ca8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8e:	4605      	mov	r5, r0
 800ca90:	0710      	lsls	r0, r2, #28
 800ca92:	460c      	mov	r4, r1
 800ca94:	d458      	bmi.n	800cb48 <__sflush_r+0xc0>
 800ca96:	684b      	ldr	r3, [r1, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dc05      	bgt.n	800caa8 <__sflush_r+0x20>
 800ca9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	dc02      	bgt.n	800caa8 <__sflush_r+0x20>
 800caa2:	2000      	movs	r0, #0
 800caa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caaa:	2e00      	cmp	r6, #0
 800caac:	d0f9      	beq.n	800caa2 <__sflush_r+0x1a>
 800caae:	2300      	movs	r3, #0
 800cab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cab4:	682f      	ldr	r7, [r5, #0]
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	d032      	beq.n	800cb20 <__sflush_r+0x98>
 800caba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cabc:	89a3      	ldrh	r3, [r4, #12]
 800cabe:	075a      	lsls	r2, r3, #29
 800cac0:	d505      	bpl.n	800cace <__sflush_r+0x46>
 800cac2:	6863      	ldr	r3, [r4, #4]
 800cac4:	1ac0      	subs	r0, r0, r3
 800cac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cac8:	b10b      	cbz	r3, 800cace <__sflush_r+0x46>
 800caca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cacc:	1ac0      	subs	r0, r0, r3
 800cace:	2300      	movs	r3, #0
 800cad0:	4602      	mov	r2, r0
 800cad2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cad4:	4628      	mov	r0, r5
 800cad6:	6a21      	ldr	r1, [r4, #32]
 800cad8:	47b0      	blx	r6
 800cada:	1c43      	adds	r3, r0, #1
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	d106      	bne.n	800caee <__sflush_r+0x66>
 800cae0:	6829      	ldr	r1, [r5, #0]
 800cae2:	291d      	cmp	r1, #29
 800cae4:	d82c      	bhi.n	800cb40 <__sflush_r+0xb8>
 800cae6:	4a2a      	ldr	r2, [pc, #168]	; (800cb90 <__sflush_r+0x108>)
 800cae8:	40ca      	lsrs	r2, r1
 800caea:	07d6      	lsls	r6, r2, #31
 800caec:	d528      	bpl.n	800cb40 <__sflush_r+0xb8>
 800caee:	2200      	movs	r2, #0
 800caf0:	6062      	str	r2, [r4, #4]
 800caf2:	6922      	ldr	r2, [r4, #16]
 800caf4:	04d9      	lsls	r1, r3, #19
 800caf6:	6022      	str	r2, [r4, #0]
 800caf8:	d504      	bpl.n	800cb04 <__sflush_r+0x7c>
 800cafa:	1c42      	adds	r2, r0, #1
 800cafc:	d101      	bne.n	800cb02 <__sflush_r+0x7a>
 800cafe:	682b      	ldr	r3, [r5, #0]
 800cb00:	b903      	cbnz	r3, 800cb04 <__sflush_r+0x7c>
 800cb02:	6560      	str	r0, [r4, #84]	; 0x54
 800cb04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb06:	602f      	str	r7, [r5, #0]
 800cb08:	2900      	cmp	r1, #0
 800cb0a:	d0ca      	beq.n	800caa2 <__sflush_r+0x1a>
 800cb0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb10:	4299      	cmp	r1, r3
 800cb12:	d002      	beq.n	800cb1a <__sflush_r+0x92>
 800cb14:	4628      	mov	r0, r5
 800cb16:	f7ff fae3 	bl	800c0e0 <_free_r>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	6360      	str	r0, [r4, #52]	; 0x34
 800cb1e:	e7c1      	b.n	800caa4 <__sflush_r+0x1c>
 800cb20:	6a21      	ldr	r1, [r4, #32]
 800cb22:	2301      	movs	r3, #1
 800cb24:	4628      	mov	r0, r5
 800cb26:	47b0      	blx	r6
 800cb28:	1c41      	adds	r1, r0, #1
 800cb2a:	d1c7      	bne.n	800cabc <__sflush_r+0x34>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d0c4      	beq.n	800cabc <__sflush_r+0x34>
 800cb32:	2b1d      	cmp	r3, #29
 800cb34:	d001      	beq.n	800cb3a <__sflush_r+0xb2>
 800cb36:	2b16      	cmp	r3, #22
 800cb38:	d101      	bne.n	800cb3e <__sflush_r+0xb6>
 800cb3a:	602f      	str	r7, [r5, #0]
 800cb3c:	e7b1      	b.n	800caa2 <__sflush_r+0x1a>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	e7ad      	b.n	800caa4 <__sflush_r+0x1c>
 800cb48:	690f      	ldr	r7, [r1, #16]
 800cb4a:	2f00      	cmp	r7, #0
 800cb4c:	d0a9      	beq.n	800caa2 <__sflush_r+0x1a>
 800cb4e:	0793      	lsls	r3, r2, #30
 800cb50:	bf18      	it	ne
 800cb52:	2300      	movne	r3, #0
 800cb54:	680e      	ldr	r6, [r1, #0]
 800cb56:	bf08      	it	eq
 800cb58:	694b      	ldreq	r3, [r1, #20]
 800cb5a:	eba6 0807 	sub.w	r8, r6, r7
 800cb5e:	600f      	str	r7, [r1, #0]
 800cb60:	608b      	str	r3, [r1, #8]
 800cb62:	f1b8 0f00 	cmp.w	r8, #0
 800cb66:	dd9c      	ble.n	800caa2 <__sflush_r+0x1a>
 800cb68:	4643      	mov	r3, r8
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	6a21      	ldr	r1, [r4, #32]
 800cb70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb72:	47b0      	blx	r6
 800cb74:	2800      	cmp	r0, #0
 800cb76:	dc06      	bgt.n	800cb86 <__sflush_r+0xfe>
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb82:	81a3      	strh	r3, [r4, #12]
 800cb84:	e78e      	b.n	800caa4 <__sflush_r+0x1c>
 800cb86:	4407      	add	r7, r0
 800cb88:	eba8 0800 	sub.w	r8, r8, r0
 800cb8c:	e7e9      	b.n	800cb62 <__sflush_r+0xda>
 800cb8e:	bf00      	nop
 800cb90:	20400001 	.word	0x20400001

0800cb94 <_fflush_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	690b      	ldr	r3, [r1, #16]
 800cb98:	4605      	mov	r5, r0
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	b913      	cbnz	r3, 800cba4 <_fflush_r+0x10>
 800cb9e:	2500      	movs	r5, #0
 800cba0:	4628      	mov	r0, r5
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	b118      	cbz	r0, 800cbae <_fflush_r+0x1a>
 800cba6:	6983      	ldr	r3, [r0, #24]
 800cba8:	b90b      	cbnz	r3, 800cbae <_fflush_r+0x1a>
 800cbaa:	f000 f887 	bl	800ccbc <__sinit>
 800cbae:	4b14      	ldr	r3, [pc, #80]	; (800cc00 <_fflush_r+0x6c>)
 800cbb0:	429c      	cmp	r4, r3
 800cbb2:	d11b      	bne.n	800cbec <_fflush_r+0x58>
 800cbb4:	686c      	ldr	r4, [r5, #4]
 800cbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0ef      	beq.n	800cb9e <_fflush_r+0xa>
 800cbbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbc0:	07d0      	lsls	r0, r2, #31
 800cbc2:	d404      	bmi.n	800cbce <_fflush_r+0x3a>
 800cbc4:	0599      	lsls	r1, r3, #22
 800cbc6:	d402      	bmi.n	800cbce <_fflush_r+0x3a>
 800cbc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbca:	f000 f915 	bl	800cdf8 <__retarget_lock_acquire_recursive>
 800cbce:	4628      	mov	r0, r5
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	f7ff ff59 	bl	800ca88 <__sflush_r>
 800cbd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbd8:	4605      	mov	r5, r0
 800cbda:	07da      	lsls	r2, r3, #31
 800cbdc:	d4e0      	bmi.n	800cba0 <_fflush_r+0xc>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	059b      	lsls	r3, r3, #22
 800cbe2:	d4dd      	bmi.n	800cba0 <_fflush_r+0xc>
 800cbe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbe6:	f000 f908 	bl	800cdfa <__retarget_lock_release_recursive>
 800cbea:	e7d9      	b.n	800cba0 <_fflush_r+0xc>
 800cbec:	4b05      	ldr	r3, [pc, #20]	; (800cc04 <_fflush_r+0x70>)
 800cbee:	429c      	cmp	r4, r3
 800cbf0:	d101      	bne.n	800cbf6 <_fflush_r+0x62>
 800cbf2:	68ac      	ldr	r4, [r5, #8]
 800cbf4:	e7df      	b.n	800cbb6 <_fflush_r+0x22>
 800cbf6:	4b04      	ldr	r3, [pc, #16]	; (800cc08 <_fflush_r+0x74>)
 800cbf8:	429c      	cmp	r4, r3
 800cbfa:	bf08      	it	eq
 800cbfc:	68ec      	ldreq	r4, [r5, #12]
 800cbfe:	e7da      	b.n	800cbb6 <_fflush_r+0x22>
 800cc00:	0800d92c 	.word	0x0800d92c
 800cc04:	0800d94c 	.word	0x0800d94c
 800cc08:	0800d90c 	.word	0x0800d90c

0800cc0c <std>:
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	b510      	push	{r4, lr}
 800cc10:	4604      	mov	r4, r0
 800cc12:	e9c0 3300 	strd	r3, r3, [r0]
 800cc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc1a:	6083      	str	r3, [r0, #8]
 800cc1c:	8181      	strh	r1, [r0, #12]
 800cc1e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc20:	81c2      	strh	r2, [r0, #14]
 800cc22:	6183      	str	r3, [r0, #24]
 800cc24:	4619      	mov	r1, r3
 800cc26:	2208      	movs	r2, #8
 800cc28:	305c      	adds	r0, #92	; 0x5c
 800cc2a:	f7fb fdeb 	bl	8008804 <memset>
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <std+0x38>)
 800cc30:	6224      	str	r4, [r4, #32]
 800cc32:	6263      	str	r3, [r4, #36]	; 0x24
 800cc34:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <std+0x3c>)
 800cc36:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc38:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <std+0x40>)
 800cc3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc3c:	4b04      	ldr	r3, [pc, #16]	; (800cc50 <std+0x44>)
 800cc3e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc40:	bd10      	pop	{r4, pc}
 800cc42:	bf00      	nop
 800cc44:	0800cf5d 	.word	0x0800cf5d
 800cc48:	0800cf7f 	.word	0x0800cf7f
 800cc4c:	0800cfb7 	.word	0x0800cfb7
 800cc50:	0800cfdb 	.word	0x0800cfdb

0800cc54 <_cleanup_r>:
 800cc54:	4901      	ldr	r1, [pc, #4]	; (800cc5c <_cleanup_r+0x8>)
 800cc56:	f000 b8af 	b.w	800cdb8 <_fwalk_reent>
 800cc5a:	bf00      	nop
 800cc5c:	0800cb95 	.word	0x0800cb95

0800cc60 <__sfmoreglue>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	2568      	movs	r5, #104	; 0x68
 800cc64:	1e4a      	subs	r2, r1, #1
 800cc66:	4355      	muls	r5, r2
 800cc68:	460e      	mov	r6, r1
 800cc6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc6e:	f7ff fa83 	bl	800c178 <_malloc_r>
 800cc72:	4604      	mov	r4, r0
 800cc74:	b140      	cbz	r0, 800cc88 <__sfmoreglue+0x28>
 800cc76:	2100      	movs	r1, #0
 800cc78:	e9c0 1600 	strd	r1, r6, [r0]
 800cc7c:	300c      	adds	r0, #12
 800cc7e:	60a0      	str	r0, [r4, #8]
 800cc80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc84:	f7fb fdbe 	bl	8008804 <memset>
 800cc88:	4620      	mov	r0, r4
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}

0800cc8c <__sfp_lock_acquire>:
 800cc8c:	4801      	ldr	r0, [pc, #4]	; (800cc94 <__sfp_lock_acquire+0x8>)
 800cc8e:	f000 b8b3 	b.w	800cdf8 <__retarget_lock_acquire_recursive>
 800cc92:	bf00      	nop
 800cc94:	200003ac 	.word	0x200003ac

0800cc98 <__sfp_lock_release>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__sfp_lock_release+0x8>)
 800cc9a:	f000 b8ae 	b.w	800cdfa <__retarget_lock_release_recursive>
 800cc9e:	bf00      	nop
 800cca0:	200003ac 	.word	0x200003ac

0800cca4 <__sinit_lock_acquire>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__sinit_lock_acquire+0x8>)
 800cca6:	f000 b8a7 	b.w	800cdf8 <__retarget_lock_acquire_recursive>
 800ccaa:	bf00      	nop
 800ccac:	200003a7 	.word	0x200003a7

0800ccb0 <__sinit_lock_release>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	; (800ccb8 <__sinit_lock_release+0x8>)
 800ccb2:	f000 b8a2 	b.w	800cdfa <__retarget_lock_release_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	200003a7 	.word	0x200003a7

0800ccbc <__sinit>:
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	f7ff fff0 	bl	800cca4 <__sinit_lock_acquire>
 800ccc4:	69a3      	ldr	r3, [r4, #24]
 800ccc6:	b11b      	cbz	r3, 800ccd0 <__sinit+0x14>
 800ccc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cccc:	f7ff bff0 	b.w	800ccb0 <__sinit_lock_release>
 800ccd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ccd4:	6523      	str	r3, [r4, #80]	; 0x50
 800ccd6:	4b13      	ldr	r3, [pc, #76]	; (800cd24 <__sinit+0x68>)
 800ccd8:	4a13      	ldr	r2, [pc, #76]	; (800cd28 <__sinit+0x6c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccde:	42a3      	cmp	r3, r4
 800cce0:	bf08      	it	eq
 800cce2:	2301      	moveq	r3, #1
 800cce4:	4620      	mov	r0, r4
 800cce6:	bf08      	it	eq
 800cce8:	61a3      	streq	r3, [r4, #24]
 800ccea:	f000 f81f 	bl	800cd2c <__sfp>
 800ccee:	6060      	str	r0, [r4, #4]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 f81b 	bl	800cd2c <__sfp>
 800ccf6:	60a0      	str	r0, [r4, #8]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 f817 	bl	800cd2c <__sfp>
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2104      	movs	r1, #4
 800cd02:	60e0      	str	r0, [r4, #12]
 800cd04:	6860      	ldr	r0, [r4, #4]
 800cd06:	f7ff ff81 	bl	800cc0c <std>
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	2109      	movs	r1, #9
 800cd0e:	68a0      	ldr	r0, [r4, #8]
 800cd10:	f7ff ff7c 	bl	800cc0c <std>
 800cd14:	2202      	movs	r2, #2
 800cd16:	2112      	movs	r1, #18
 800cd18:	68e0      	ldr	r0, [r4, #12]
 800cd1a:	f7ff ff77 	bl	800cc0c <std>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	61a3      	str	r3, [r4, #24]
 800cd22:	e7d1      	b.n	800ccc8 <__sinit+0xc>
 800cd24:	0800d4b8 	.word	0x0800d4b8
 800cd28:	0800cc55 	.word	0x0800cc55

0800cd2c <__sfp>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	4607      	mov	r7, r0
 800cd30:	f7ff ffac 	bl	800cc8c <__sfp_lock_acquire>
 800cd34:	4b1e      	ldr	r3, [pc, #120]	; (800cdb0 <__sfp+0x84>)
 800cd36:	681e      	ldr	r6, [r3, #0]
 800cd38:	69b3      	ldr	r3, [r6, #24]
 800cd3a:	b913      	cbnz	r3, 800cd42 <__sfp+0x16>
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f7ff ffbd 	bl	800ccbc <__sinit>
 800cd42:	3648      	adds	r6, #72	; 0x48
 800cd44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	d503      	bpl.n	800cd54 <__sfp+0x28>
 800cd4c:	6833      	ldr	r3, [r6, #0]
 800cd4e:	b30b      	cbz	r3, 800cd94 <__sfp+0x68>
 800cd50:	6836      	ldr	r6, [r6, #0]
 800cd52:	e7f7      	b.n	800cd44 <__sfp+0x18>
 800cd54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd58:	b9d5      	cbnz	r5, 800cd90 <__sfp+0x64>
 800cd5a:	4b16      	ldr	r3, [pc, #88]	; (800cdb4 <__sfp+0x88>)
 800cd5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd60:	60e3      	str	r3, [r4, #12]
 800cd62:	6665      	str	r5, [r4, #100]	; 0x64
 800cd64:	f000 f847 	bl	800cdf6 <__retarget_lock_init_recursive>
 800cd68:	f7ff ff96 	bl	800cc98 <__sfp_lock_release>
 800cd6c:	2208      	movs	r2, #8
 800cd6e:	4629      	mov	r1, r5
 800cd70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd78:	6025      	str	r5, [r4, #0]
 800cd7a:	61a5      	str	r5, [r4, #24]
 800cd7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd80:	f7fb fd40 	bl	8008804 <memset>
 800cd84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd90:	3468      	adds	r4, #104	; 0x68
 800cd92:	e7d9      	b.n	800cd48 <__sfp+0x1c>
 800cd94:	2104      	movs	r1, #4
 800cd96:	4638      	mov	r0, r7
 800cd98:	f7ff ff62 	bl	800cc60 <__sfmoreglue>
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	6030      	str	r0, [r6, #0]
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d1d5      	bne.n	800cd50 <__sfp+0x24>
 800cda4:	f7ff ff78 	bl	800cc98 <__sfp_lock_release>
 800cda8:	230c      	movs	r3, #12
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	e7ee      	b.n	800cd8c <__sfp+0x60>
 800cdae:	bf00      	nop
 800cdb0:	0800d4b8 	.word	0x0800d4b8
 800cdb4:	ffff0001 	.word	0xffff0001

0800cdb8 <_fwalk_reent>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	4688      	mov	r8, r1
 800cdc0:	2700      	movs	r7, #0
 800cdc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdca:	f1b9 0901 	subs.w	r9, r9, #1
 800cdce:	d505      	bpl.n	800cddc <_fwalk_reent+0x24>
 800cdd0:	6824      	ldr	r4, [r4, #0]
 800cdd2:	2c00      	cmp	r4, #0
 800cdd4:	d1f7      	bne.n	800cdc6 <_fwalk_reent+0xe>
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cddc:	89ab      	ldrh	r3, [r5, #12]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d907      	bls.n	800cdf2 <_fwalk_reent+0x3a>
 800cde2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cde6:	3301      	adds	r3, #1
 800cde8:	d003      	beq.n	800cdf2 <_fwalk_reent+0x3a>
 800cdea:	4629      	mov	r1, r5
 800cdec:	4630      	mov	r0, r6
 800cdee:	47c0      	blx	r8
 800cdf0:	4307      	orrs	r7, r0
 800cdf2:	3568      	adds	r5, #104	; 0x68
 800cdf4:	e7e9      	b.n	800cdca <_fwalk_reent+0x12>

0800cdf6 <__retarget_lock_init_recursive>:
 800cdf6:	4770      	bx	lr

0800cdf8 <__retarget_lock_acquire_recursive>:
 800cdf8:	4770      	bx	lr

0800cdfa <__retarget_lock_release_recursive>:
 800cdfa:	4770      	bx	lr

0800cdfc <__swhatbuf_r>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	460e      	mov	r6, r1
 800ce00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce04:	4614      	mov	r4, r2
 800ce06:	2900      	cmp	r1, #0
 800ce08:	461d      	mov	r5, r3
 800ce0a:	b096      	sub	sp, #88	; 0x58
 800ce0c:	da07      	bge.n	800ce1e <__swhatbuf_r+0x22>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	602b      	str	r3, [r5, #0]
 800ce12:	89b3      	ldrh	r3, [r6, #12]
 800ce14:	061a      	lsls	r2, r3, #24
 800ce16:	d410      	bmi.n	800ce3a <__swhatbuf_r+0x3e>
 800ce18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce1c:	e00e      	b.n	800ce3c <__swhatbuf_r+0x40>
 800ce1e:	466a      	mov	r2, sp
 800ce20:	f000 f902 	bl	800d028 <_fstat_r>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	dbf2      	blt.n	800ce0e <__swhatbuf_r+0x12>
 800ce28:	9a01      	ldr	r2, [sp, #4]
 800ce2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce32:	425a      	negs	r2, r3
 800ce34:	415a      	adcs	r2, r3
 800ce36:	602a      	str	r2, [r5, #0]
 800ce38:	e7ee      	b.n	800ce18 <__swhatbuf_r+0x1c>
 800ce3a:	2340      	movs	r3, #64	; 0x40
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	6023      	str	r3, [r4, #0]
 800ce40:	b016      	add	sp, #88	; 0x58
 800ce42:	bd70      	pop	{r4, r5, r6, pc}

0800ce44 <__smakebuf_r>:
 800ce44:	898b      	ldrh	r3, [r1, #12]
 800ce46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce48:	079d      	lsls	r5, r3, #30
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	d507      	bpl.n	800ce60 <__smakebuf_r+0x1c>
 800ce50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	6123      	str	r3, [r4, #16]
 800ce58:	2301      	movs	r3, #1
 800ce5a:	6163      	str	r3, [r4, #20]
 800ce5c:	b002      	add	sp, #8
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	466a      	mov	r2, sp
 800ce62:	ab01      	add	r3, sp, #4
 800ce64:	f7ff ffca 	bl	800cdfc <__swhatbuf_r>
 800ce68:	9900      	ldr	r1, [sp, #0]
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f7ff f983 	bl	800c178 <_malloc_r>
 800ce72:	b948      	cbnz	r0, 800ce88 <__smakebuf_r+0x44>
 800ce74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce78:	059a      	lsls	r2, r3, #22
 800ce7a:	d4ef      	bmi.n	800ce5c <__smakebuf_r+0x18>
 800ce7c:	f023 0303 	bic.w	r3, r3, #3
 800ce80:	f043 0302 	orr.w	r3, r3, #2
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	e7e3      	b.n	800ce50 <__smakebuf_r+0xc>
 800ce88:	4b0d      	ldr	r3, [pc, #52]	; (800cec0 <__smakebuf_r+0x7c>)
 800ce8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	6020      	str	r0, [r4, #0]
 800ce90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce94:	81a3      	strh	r3, [r4, #12]
 800ce96:	9b00      	ldr	r3, [sp, #0]
 800ce98:	6120      	str	r0, [r4, #16]
 800ce9a:	6163      	str	r3, [r4, #20]
 800ce9c:	9b01      	ldr	r3, [sp, #4]
 800ce9e:	b15b      	cbz	r3, 800ceb8 <__smakebuf_r+0x74>
 800cea0:	4630      	mov	r0, r6
 800cea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea6:	f000 f8d1 	bl	800d04c <_isatty_r>
 800ceaa:	b128      	cbz	r0, 800ceb8 <__smakebuf_r+0x74>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f023 0303 	bic.w	r3, r3, #3
 800ceb2:	f043 0301 	orr.w	r3, r3, #1
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	89a0      	ldrh	r0, [r4, #12]
 800ceba:	4305      	orrs	r5, r0
 800cebc:	81a5      	strh	r5, [r4, #12]
 800cebe:	e7cd      	b.n	800ce5c <__smakebuf_r+0x18>
 800cec0:	0800cc55 	.word	0x0800cc55

0800cec4 <_malloc_usable_size_r>:
 800cec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec8:	1f18      	subs	r0, r3, #4
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	bfbc      	itt	lt
 800cece:	580b      	ldrlt	r3, [r1, r0]
 800ced0:	18c0      	addlt	r0, r0, r3
 800ced2:	4770      	bx	lr

0800ced4 <_raise_r>:
 800ced4:	291f      	cmp	r1, #31
 800ced6:	b538      	push	{r3, r4, r5, lr}
 800ced8:	4604      	mov	r4, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	d904      	bls.n	800cee8 <_raise_r+0x14>
 800cede:	2316      	movs	r3, #22
 800cee0:	6003      	str	r3, [r0, #0]
 800cee2:	f04f 30ff 	mov.w	r0, #4294967295
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ceea:	b112      	cbz	r2, 800cef2 <_raise_r+0x1e>
 800ceec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cef0:	b94b      	cbnz	r3, 800cf06 <_raise_r+0x32>
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f830 	bl	800cf58 <_getpid_r>
 800cef8:	462a      	mov	r2, r5
 800cefa:	4601      	mov	r1, r0
 800cefc:	4620      	mov	r0, r4
 800cefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf02:	f000 b817 	b.w	800cf34 <_kill_r>
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d00a      	beq.n	800cf20 <_raise_r+0x4c>
 800cf0a:	1c59      	adds	r1, r3, #1
 800cf0c:	d103      	bne.n	800cf16 <_raise_r+0x42>
 800cf0e:	2316      	movs	r3, #22
 800cf10:	6003      	str	r3, [r0, #0]
 800cf12:	2001      	movs	r0, #1
 800cf14:	e7e7      	b.n	800cee6 <_raise_r+0x12>
 800cf16:	2400      	movs	r4, #0
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf1e:	4798      	blx	r3
 800cf20:	2000      	movs	r0, #0
 800cf22:	e7e0      	b.n	800cee6 <_raise_r+0x12>

0800cf24 <raise>:
 800cf24:	4b02      	ldr	r3, [pc, #8]	; (800cf30 <raise+0xc>)
 800cf26:	4601      	mov	r1, r0
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	f7ff bfd3 	b.w	800ced4 <_raise_r>
 800cf2e:	bf00      	nop
 800cf30:	2000000c 	.word	0x2000000c

0800cf34 <_kill_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	2300      	movs	r3, #0
 800cf38:	4d06      	ldr	r5, [pc, #24]	; (800cf54 <_kill_r+0x20>)
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	4611      	mov	r1, r2
 800cf40:	602b      	str	r3, [r5, #0]
 800cf42:	f7f5 fcd8 	bl	80028f6 <_kill>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	d102      	bne.n	800cf50 <_kill_r+0x1c>
 800cf4a:	682b      	ldr	r3, [r5, #0]
 800cf4c:	b103      	cbz	r3, 800cf50 <_kill_r+0x1c>
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	bd38      	pop	{r3, r4, r5, pc}
 800cf52:	bf00      	nop
 800cf54:	200003a0 	.word	0x200003a0

0800cf58 <_getpid_r>:
 800cf58:	f7f5 bcc6 	b.w	80028e8 <_getpid>

0800cf5c <__sread>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	460c      	mov	r4, r1
 800cf60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf64:	f000 f894 	bl	800d090 <_read_r>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	bfab      	itete	ge
 800cf6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf6e:	89a3      	ldrhlt	r3, [r4, #12]
 800cf70:	181b      	addge	r3, r3, r0
 800cf72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf76:	bfac      	ite	ge
 800cf78:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf7a:	81a3      	strhlt	r3, [r4, #12]
 800cf7c:	bd10      	pop	{r4, pc}

0800cf7e <__swrite>:
 800cf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf82:	461f      	mov	r7, r3
 800cf84:	898b      	ldrh	r3, [r1, #12]
 800cf86:	4605      	mov	r5, r0
 800cf88:	05db      	lsls	r3, r3, #23
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	4616      	mov	r6, r2
 800cf8e:	d505      	bpl.n	800cf9c <__swrite+0x1e>
 800cf90:	2302      	movs	r3, #2
 800cf92:	2200      	movs	r2, #0
 800cf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf98:	f000 f868 	bl	800d06c <_lseek_r>
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	4632      	mov	r2, r6
 800cfa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	463b      	mov	r3, r7
 800cfaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb2:	f000 b817 	b.w	800cfe4 <_write_r>

0800cfb6 <__sseek>:
 800cfb6:	b510      	push	{r4, lr}
 800cfb8:	460c      	mov	r4, r1
 800cfba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfbe:	f000 f855 	bl	800d06c <_lseek_r>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	bf15      	itete	ne
 800cfc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfd2:	81a3      	strheq	r3, [r4, #12]
 800cfd4:	bf18      	it	ne
 800cfd6:	81a3      	strhne	r3, [r4, #12]
 800cfd8:	bd10      	pop	{r4, pc}

0800cfda <__sclose>:
 800cfda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfde:	f000 b813 	b.w	800d008 <_close_r>
	...

0800cfe4 <_write_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	4608      	mov	r0, r1
 800cfea:	4611      	mov	r1, r2
 800cfec:	2200      	movs	r2, #0
 800cfee:	4d05      	ldr	r5, [pc, #20]	; (800d004 <_write_r+0x20>)
 800cff0:	602a      	str	r2, [r5, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f7f5 fcb6 	bl	8002964 <_write>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_write_r+0x1e>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_write_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	200003a0 	.word	0x200003a0

0800d008 <_close_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	2300      	movs	r3, #0
 800d00c:	4d05      	ldr	r5, [pc, #20]	; (800d024 <_close_r+0x1c>)
 800d00e:	4604      	mov	r4, r0
 800d010:	4608      	mov	r0, r1
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	f7f5 fcc2 	bl	800299c <_close>
 800d018:	1c43      	adds	r3, r0, #1
 800d01a:	d102      	bne.n	800d022 <_close_r+0x1a>
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	b103      	cbz	r3, 800d022 <_close_r+0x1a>
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	200003a0 	.word	0x200003a0

0800d028 <_fstat_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	2300      	movs	r3, #0
 800d02c:	4d06      	ldr	r5, [pc, #24]	; (800d048 <_fstat_r+0x20>)
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	4611      	mov	r1, r2
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	f7f5 fcbc 	bl	80029b2 <_fstat>
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	d102      	bne.n	800d044 <_fstat_r+0x1c>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b103      	cbz	r3, 800d044 <_fstat_r+0x1c>
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	200003a0 	.word	0x200003a0

0800d04c <_isatty_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	2300      	movs	r3, #0
 800d050:	4d05      	ldr	r5, [pc, #20]	; (800d068 <_isatty_r+0x1c>)
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f5 fcba 	bl	80029d0 <_isatty>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_isatty_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_isatty_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	200003a0 	.word	0x200003a0

0800d06c <_lseek_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4604      	mov	r4, r0
 800d070:	4608      	mov	r0, r1
 800d072:	4611      	mov	r1, r2
 800d074:	2200      	movs	r2, #0
 800d076:	4d05      	ldr	r5, [pc, #20]	; (800d08c <_lseek_r+0x20>)
 800d078:	602a      	str	r2, [r5, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f7f5 fcb2 	bl	80029e4 <_lseek>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_lseek_r+0x1e>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_lseek_r+0x1e>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	200003a0 	.word	0x200003a0

0800d090 <_read_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4604      	mov	r4, r0
 800d094:	4608      	mov	r0, r1
 800d096:	4611      	mov	r1, r2
 800d098:	2200      	movs	r2, #0
 800d09a:	4d05      	ldr	r5, [pc, #20]	; (800d0b0 <_read_r+0x20>)
 800d09c:	602a      	str	r2, [r5, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f7f5 fc43 	bl	800292a <_read>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_read_r+0x1e>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_read_r+0x1e>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	200003a0 	.word	0x200003a0

0800d0b4 <_init>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	bf00      	nop
 800d0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	469e      	mov	lr, r3
 800d0be:	4770      	bx	lr

0800d0c0 <_fini>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr
